
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004778  08004778  000061a8  2**0
                  CONTENTS
  4 .ARM          00000008  08004778  08004778  00005778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004780  08004780  000061a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004780  08004780  00005780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08004788  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001a8  08004930  000061a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08004930  000064a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a924  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002025  00000000  00000000  00010afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00012b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000731  00000000  00000000  000134e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002724f  00000000  00000000  00013c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad73  00000000  00000000  0003ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e59  00000000  00000000  00045bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136a2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  00136a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00139798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004694 	.word	0x08004694

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	08004694 	.word	0x08004694

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <lsm6dsl_init>:
 *      Author: cheng
 */

#include "lsm6dsl.h"

void lsm6dsl_init() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
//	i2c_init();  // ensure that i2c is initialized

	// CTRL1_XL = 0x60
	uint8_t ctrl1_xl_data[2] = {CTRL1_XL, 0x60};
 8000276:	f246 0310 	movw	r3, #24592	@ 0x6010
 800027a:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(IMU_ADDR, 0, ctrl1_xl_data, 2);
 800027c:	1d3a      	adds	r2, r7, #4
 800027e:	2302      	movs	r3, #2
 8000280:	2100      	movs	r1, #0
 8000282:	206a      	movs	r0, #106	@ 0x6a
 8000284:	f000 fcb2 	bl	8000bec <i2c_transaction>

	// INT1_CTRL = 0x01
	uint8_t int1_ctrl_data[2] = {INT1_CTRL, 0x01};
 8000288:	f240 130d 	movw	r3, #269	@ 0x10d
 800028c:	803b      	strh	r3, [r7, #0]
	i2c_transaction(IMU_ADDR, 0, int1_ctrl_data, 2);
 800028e:	463a      	mov	r2, r7
 8000290:	2302      	movs	r3, #2
 8000292:	2100      	movs	r1, #0
 8000294:	206a      	movs	r0, #106	@ 0x6a
 8000296:	f000 fca9 	bl	8000bec <i2c_transaction>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b086      	sub	sp, #24
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	60f8      	str	r0, [r7, #12]
 80002aa:	60b9      	str	r1, [r7, #8]
 80002ac:	607a      	str	r2, [r7, #4]
	uint8_t data[7] = {OUTX_L_XL};
 80002ae:	2328      	movs	r3, #40	@ 0x28
 80002b0:	613b      	str	r3, [r7, #16]
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	2100      	movs	r1, #0
 80002b8:	460a      	mov	r2, r1
 80002ba:	801a      	strh	r2, [r3, #0]
 80002bc:	460a      	mov	r2, r1
 80002be:	709a      	strb	r2, [r3, #2]

	i2c_transaction(IMU_ADDR, 1, data, 7);
 80002c0:	f107 0210 	add.w	r2, r7, #16
 80002c4:	2307      	movs	r3, #7
 80002c6:	2101      	movs	r1, #1
 80002c8:	206a      	movs	r0, #106	@ 0x6a
 80002ca:	f000 fc8f 	bl	8000bec <i2c_transaction>

	*x = data[2] << 8 | data[1];
 80002ce:	7cbb      	ldrb	r3, [r7, #18]
 80002d0:	021b      	lsls	r3, r3, #8
 80002d2:	b21a      	sxth	r2, r3
 80002d4:	7c7b      	ldrb	r3, [r7, #17]
 80002d6:	b21b      	sxth	r3, r3
 80002d8:	4313      	orrs	r3, r2
 80002da:	b21a      	sxth	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	801a      	strh	r2, [r3, #0]
	*y = data[4] << 8 | data[3];
 80002e0:	7d3b      	ldrb	r3, [r7, #20]
 80002e2:	021b      	lsls	r3, r3, #8
 80002e4:	b21a      	sxth	r2, r3
 80002e6:	7cfb      	ldrb	r3, [r7, #19]
 80002e8:	b21b      	sxth	r3, r3
 80002ea:	4313      	orrs	r3, r2
 80002ec:	b21a      	sxth	r2, r3
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	801a      	strh	r2, [r3, #0]
	*z = data[6] << 8 | data[5];
 80002f2:	7dbb      	ldrb	r3, [r7, #22]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	b21a      	sxth	r2, r3
 80002f8:	7d7b      	ldrb	r3, [r7, #21]
 80002fa:	b21b      	sxth	r3, r3
 80002fc:	4313      	orrs	r3, r2
 80002fe:	b21a      	sxth	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	801a      	strh	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000312:	2006      	movs	r0, #6
 8000314:	f003 fa70 	bl	80037f8 <malloc>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4b70      	ldr	r3, [pc, #448]	@ (80004e0 <ble_init+0x1d4>)
 800031e:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000320:	bf00      	nop
 8000322:	4b70      	ldr	r3, [pc, #448]	@ (80004e4 <ble_init+0x1d8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0fb      	beq.n	8000322 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800032a:	4b6d      	ldr	r3, [pc, #436]	@ (80004e0 <ble_init+0x1d4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2106      	movs	r1, #6
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f905 	bl	8000540 <fetchBleEvent>
 8000336:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d111      	bne.n	8000362 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 800033e:	4b68      	ldr	r3, [pc, #416]	@ (80004e0 <ble_init+0x1d4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2206      	movs	r2, #6
 8000344:	4968      	ldr	r1, [pc, #416]	@ (80004e8 <ble_init+0x1dc>)
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f984 	bl	8000654 <checkEventResp>
 800034c:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d106      	bne.n	8000362 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 8000354:	4b65      	ldr	r3, [pc, #404]	@ (80004ec <ble_init+0x1e0>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b63      	ldr	r3, [pc, #396]	@ (80004ec <ble_init+0x1e0>)
 8000360:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 8000362:	200a      	movs	r0, #10
 8000364:	f001 fb4a 	bl	80019fc <HAL_Delay>
	free(rxEvent);
 8000368:	4b5d      	ldr	r3, [pc, #372]	@ (80004e0 <ble_init+0x1d4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	f003 fa4b 	bl	8003808 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000372:	2300      	movs	r3, #0
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2307      	movs	r3, #7
 8000378:	4a5d      	ldr	r2, [pc, #372]	@ (80004f0 <ble_init+0x1e4>)
 800037a:	2104      	movs	r1, #4
 800037c:	485d      	ldr	r0, [pc, #372]	@ (80004f4 <ble_init+0x1e8>)
 800037e:	f000 fa8f 	bl	80008a0 <BLE_command>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d106      	bne.n	8000396 <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 8000388:	4b58      	ldr	r3, [pc, #352]	@ (80004ec <ble_init+0x1e0>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	b29a      	uxth	r2, r3
 8000392:	4b56      	ldr	r3, [pc, #344]	@ (80004ec <ble_init+0x1e0>)
 8000394:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000396:	4b52      	ldr	r3, [pc, #328]	@ (80004e0 <ble_init+0x1d4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f003 fa34 	bl	8003808 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 80003a0:	2303      	movs	r3, #3
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2307      	movs	r3, #7
 80003a6:	4a54      	ldr	r2, [pc, #336]	@ (80004f8 <ble_init+0x1ec>)
 80003a8:	2107      	movs	r1, #7
 80003aa:	4854      	ldr	r0, [pc, #336]	@ (80004fc <ble_init+0x1f0>)
 80003ac:	f000 fa78 	bl	80008a0 <BLE_command>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d11b      	bne.n	80003ee <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 80003b6:	4b4d      	ldr	r3, [pc, #308]	@ (80004ec <ble_init+0x1e0>)
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	b29a      	uxth	r2, r3
 80003c0:	4b4a      	ldr	r3, [pc, #296]	@ (80004ec <ble_init+0x1e0>)
 80003c2:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 80003c4:	4b46      	ldr	r3, [pc, #280]	@ (80004e0 <ble_init+0x1d4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3307      	adds	r3, #7
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	b29a      	uxth	r2, r3
 80003ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000500 <ble_init+0x1f4>)
 80003d0:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 80003d2:	4b43      	ldr	r3, [pc, #268]	@ (80004e0 <ble_init+0x1d4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3309      	adds	r3, #9
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b49      	ldr	r3, [pc, #292]	@ (8000504 <ble_init+0x1f8>)
 80003de:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 80003e0:	4b3f      	ldr	r3, [pc, #252]	@ (80004e0 <ble_init+0x1d4>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	330b      	adds	r3, #11
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	4b47      	ldr	r3, [pc, #284]	@ (8000508 <ble_init+0x1fc>)
 80003ec:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003ee:	4b3c      	ldr	r3, [pc, #240]	@ (80004e0 <ble_init+0x1d4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f003 fa08 	bl	8003808 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 80003f8:	4b44      	ldr	r3, [pc, #272]	@ (800050c <ble_init+0x200>)
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2307      	movs	r3, #7
 80003fe:	2200      	movs	r2, #0
 8000400:	4940      	ldr	r1, [pc, #256]	@ (8000504 <ble_init+0x1f8>)
 8000402:	483f      	ldr	r0, [pc, #252]	@ (8000500 <ble_init+0x1f4>)
 8000404:	f000 fb12 	bl	8000a2c <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000408:	4b38      	ldr	r3, [pc, #224]	@ (80004ec <ble_init+0x1e0>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	f043 0308 	orr.w	r3, r3, #8
 8000410:	b29a      	uxth	r2, r3
 8000412:	4b36      	ldr	r3, [pc, #216]	@ (80004ec <ble_init+0x1e0>)
 8000414:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 8000416:	4b32      	ldr	r3, [pc, #200]	@ (80004e0 <ble_init+0x1d4>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4618      	mov	r0, r3
 800041c:	f003 f9f4 	bl	8003808 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000420:	2300      	movs	r3, #0
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2307      	movs	r3, #7
 8000426:	4a3a      	ldr	r2, [pc, #232]	@ (8000510 <ble_init+0x204>)
 8000428:	2110      	movs	r1, #16
 800042a:	483a      	ldr	r0, [pc, #232]	@ (8000514 <ble_init+0x208>)
 800042c:	f000 fa38 	bl	80008a0 <BLE_command>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 8000436:	4b2d      	ldr	r3, [pc, #180]	@ (80004ec <ble_init+0x1e0>)
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	b29a      	uxth	r2, r3
 8000440:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <ble_init+0x1e0>)
 8000442:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000444:	4b26      	ldr	r3, [pc, #152]	@ (80004e0 <ble_init+0x1d4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f003 f9dd 	bl	8003808 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800044e:	2300      	movs	r3, #0
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2307      	movs	r3, #7
 8000454:	4a30      	ldr	r2, [pc, #192]	@ (8000518 <ble_init+0x20c>)
 8000456:	2106      	movs	r1, #6
 8000458:	4830      	ldr	r0, [pc, #192]	@ (800051c <ble_init+0x210>)
 800045a:	f000 fa21 	bl	80008a0 <BLE_command>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d106      	bne.n	8000472 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 8000464:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <ble_init+0x1e0>)
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	f043 0320 	orr.w	r3, r3, #32
 800046c:	b29a      	uxth	r2, r3
 800046e:	4b1f      	ldr	r3, [pc, #124]	@ (80004ec <ble_init+0x1e0>)
 8000470:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000472:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <ble_init+0x1d4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f003 f9c6 	bl	8003808 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 800047c:	2300      	movs	r3, #0
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2307      	movs	r3, #7
 8000482:	4a27      	ldr	r2, [pc, #156]	@ (8000520 <ble_init+0x214>)
 8000484:	2124      	movs	r1, #36	@ 0x24
 8000486:	4827      	ldr	r0, [pc, #156]	@ (8000524 <ble_init+0x218>)
 8000488:	f000 fa0a 	bl	80008a0 <BLE_command>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d106      	bne.n	80004a0 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000492:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <ble_init+0x1e0>)
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <ble_init+0x1e0>)
 800049e:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <ble_init+0x1d4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f003 f9af 	bl	8003808 <free>

	//This will start the advertisment,
	setConnectable();
 80004aa:	f000 f979 	bl	80007a0 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 80004ae:	2207      	movs	r2, #7
 80004b0:	491d      	ldr	r1, [pc, #116]	@ (8000528 <ble_init+0x21c>)
 80004b2:	481e      	ldr	r0, [pc, #120]	@ (800052c <ble_init+0x220>)
 80004b4:	f000 fa40 	bl	8000938 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 80004b8:	2310      	movs	r3, #16
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2314      	movs	r3, #20
 80004be:	4a1a      	ldr	r2, [pc, #104]	@ (8000528 <ble_init+0x21c>)
 80004c0:	491b      	ldr	r1, [pc, #108]	@ (8000530 <ble_init+0x224>)
 80004c2:	481c      	ldr	r0, [pc, #112]	@ (8000534 <ble_init+0x228>)
 80004c4:	f000 fa70 	bl	80009a8 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 80004c8:	2304      	movs	r3, #4
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2314      	movs	r3, #20
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <ble_init+0x21c>)
 80004d0:	4919      	ldr	r1, [pc, #100]	@ (8000538 <ble_init+0x22c>)
 80004d2:	481a      	ldr	r0, [pc, #104]	@ (800053c <ble_init+0x230>)
 80004d4:	f000 fa68 	bl	80009a8 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 80004d8:	bf00      	nop
}
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200002dc 	.word	0x200002dc
 80004e4:	200002e0 	.word	0x200002e0
 80004e8:	20000000 	.word	0x20000000
 80004ec:	200002da 	.word	0x200002da
 80004f0:	2000000c 	.word	0x2000000c
 80004f4:	20000008 	.word	0x20000008
 80004f8:	2000001c 	.word	0x2000001c
 80004fc:	20000014 	.word	0x20000014
 8000500:	200001c4 	.word	0x200001c4
 8000504:	200001c8 	.word	0x200001c8
 8000508:	200001cc 	.word	0x200001cc
 800050c:	200000f4 	.word	0x200000f4
 8000510:	20000034 	.word	0x20000034
 8000514:	20000024 	.word	0x20000024
 8000518:	20000044 	.word	0x20000044
 800051c:	2000003c 	.word	0x2000003c
 8000520:	20000070 	.word	0x20000070
 8000524:	2000004c 	.word	0x2000004c
 8000528:	200002d0 	.word	0x200002d0
 800052c:	200000fc 	.word	0x200000fc
 8000530:	200002d8 	.word	0x200002d8
 8000534:	2000011c 	.word	0x2000011c
 8000538:	200002d4 	.word	0x200002d4
 800053c:	2000010c 	.word	0x2000010c

08000540 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	@ 0x30
 8000544:	af02      	add	r7, sp, #8
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 800054a:	4a3d      	ldr	r2, [pc, #244]	@ (8000640 <fetchBleEvent+0x100>)
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000554:	6018      	str	r0, [r3, #0]
 8000556:	3304      	adds	r3, #4
 8000558:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	4839      	ldr	r0, [pc, #228]	@ (8000644 <fetchBleEvent+0x104>)
 800055e:	f001 fd2d 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d065      	beq.n	8000634 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000568:	2005      	movs	r0, #5
 800056a:	f001 fa47 	bl	80019fc <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	4834      	ldr	r0, [pc, #208]	@ (8000648 <fetchBleEvent+0x108>)
 8000576:	f001 fd39 	bl	8001fec <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800057a:	f107 0210 	add.w	r2, r7, #16
 800057e:	f107 0118 	add.w	r1, r7, #24
 8000582:	2301      	movs	r3, #1
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2305      	movs	r3, #5
 8000588:	4830      	ldr	r0, [pc, #192]	@ (800064c <fetchBleEvent+0x10c>)
 800058a:	f002 fdaf 	bl	80030ec <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000594:	482c      	ldr	r0, [pc, #176]	@ (8000648 <fetchBleEvent+0x108>)
 8000596:	f001 fd29 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f001 fa2e 	bl	80019fc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a6:	4828      	ldr	r0, [pc, #160]	@ (8000648 <fetchBleEvent+0x108>)
 80005a8:	f001 fd20 	bl	8001fec <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80005ac:	f107 0210 	add.w	r2, r7, #16
 80005b0:	f107 0118 	add.w	r1, r7, #24
 80005b4:	2301      	movs	r3, #1
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2305      	movs	r3, #5
 80005ba:	4824      	ldr	r0, [pc, #144]	@ (800064c <fetchBleEvent+0x10c>)
 80005bc:	f002 fd96 	bl	80030ec <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 80005c0:	7cfb      	ldrb	r3, [r7, #19]
 80005c2:	461a      	mov	r2, r3
 80005c4:	7d3b      	ldrb	r3, [r7, #20]
 80005c6:	021b      	lsls	r3, r3, #8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 80005cc:	23ff      	movs	r3, #255	@ 0xff
 80005ce:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 80005d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dd01      	ble.n	80005dc <fetchBleEvent+0x9c>
	  dataSize=size;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 80005dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dd1f      	ble.n	8000622 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
 80005e6:	e00d      	b.n	8000604 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	441a      	add	r2, r3
 80005ee:	f107 010f 	add.w	r1, r7, #15
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4814      	ldr	r0, [pc, #80]	@ (800064c <fetchBleEvent+0x10c>)
 80005fa:	f002 fd77 	bl	80030ec <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 80005fe:	6a3b      	ldr	r3, [r7, #32]
 8000600:	3301      	adds	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
 8000604:	6a3a      	ldr	r2, [r7, #32]
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	429a      	cmp	r2, r3
 800060a:	dbed      	blt.n	80005e8 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <fetchBleEvent+0x108>)
 8000614:	f001 fcea 	bl	8001fec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 8000618:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <fetchBleEvent+0x110>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e00a      	b.n	8000638 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000628:	4807      	ldr	r0, [pc, #28]	@ (8000648 <fetchBleEvent+0x108>)
 800062a:	f001 fcdf 	bl	8001fec <HAL_GPIO_WritePin>
        return -1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000632:	e001      	b.n	8000638 <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000634:	f06f 0301 	mvn.w	r3, #1
  }
}
 8000638:	4618      	mov	r0, r3
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	080046ac 	.word	0x080046ac
 8000644:	48001000 	.word	0x48001000
 8000648:	48000c00 	.word	0x48000c00
 800064c:	200002e4 	.word	0x200002e4
 8000650:	200002e0 	.word	0x200002e0

08000654 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000654:	b480      	push	{r7}
 8000656:	b087      	sub	sp, #28
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
	int j=0;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e00f      	b.n	800068a <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	440b      	add	r3, r1
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	d002      	beq.n	8000684 <checkEventResp+0x30>
			return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000682:	e007      	b.n	8000694 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	dbeb      	blt.n	800066a <checkEventResp+0x16>
		}
	}

return BLE_OK;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	371c      	adds	r7, #28
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80006aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <sendCommand+0x88>)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b4:	6018      	str	r0, [r3, #0]
 80006b6:	3304      	adds	r3, #4
 80006b8:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c0:	481a      	ldr	r0, [pc, #104]	@ (800072c <sendCommand+0x8c>)
 80006c2:	f001 fc93 	bl	8001fec <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80006c6:	f107 0208 	add.w	r2, r7, #8
 80006ca:	f107 0110 	add.w	r1, r7, #16
 80006ce:	2301      	movs	r3, #1
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2305      	movs	r3, #5
 80006d4:	4816      	ldr	r0, [pc, #88]	@ (8000730 <sendCommand+0x90>)
 80006d6:	f002 fd09 	bl	80030ec <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 80006da:	7abb      	ldrb	r3, [r7, #10]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	7a7a      	ldrb	r2, [r7, #9]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	db09      	blt.n	8000700 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	2301      	movs	r3, #1
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	480e      	ldr	r0, [pc, #56]	@ (8000730 <sendCommand+0x90>)
 80006f6:	f002 fb84 	bl	8002e02 <HAL_SPI_Transmit>
		result=0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
 80006fe:	e002      	b.n	8000706 <sendCommand+0x66>
	  }else{
		result=-1;
 8000700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000704:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070c:	4807      	ldr	r0, [pc, #28]	@ (800072c <sendCommand+0x8c>)
 800070e:	f001 fc6d 	bl	8001fec <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <sendCommand+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1cd      	bne.n	80006ba <sendCommand+0x1a>

}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	080046b4 	.word	0x080046b4
 800072c:	48000c00 	.word	0x48000c00
 8000730:	200002e4 	.word	0x200002e4
 8000734:	200002e0 	.word	0x200002e0

08000738 <catchBLE>:

void catchBLE(){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 800073e:	217f      	movs	r1, #127	@ 0x7f
 8000740:	4813      	ldr	r0, [pc, #76]	@ (8000790 <catchBLE+0x58>)
 8000742:	f7ff fefd 	bl	8000540 <fetchBleEvent>
 8000746:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d11b      	bne.n	8000786 <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 800074e:	2203      	movs	r2, #3
 8000750:	4910      	ldr	r1, [pc, #64]	@ (8000794 <catchBLE+0x5c>)
 8000752:	480f      	ldr	r0, [pc, #60]	@ (8000790 <catchBLE+0x58>)
 8000754:	f7ff ff7e 	bl	8000654 <checkEventResp>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 800075e:	f000 f81f 	bl	80007a0 <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000762:	2205      	movs	r2, #5
 8000764:	490c      	ldr	r1, [pc, #48]	@ (8000798 <catchBLE+0x60>)
 8000766:	480a      	ldr	r0, [pc, #40]	@ (8000790 <catchBLE+0x58>)
 8000768:	f7ff ff74 	bl	8000654 <checkEventResp>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d109      	bne.n	8000786 <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <catchBLE+0x58>)
 8000774:	795b      	ldrb	r3, [r3, #5]
 8000776:	b21a      	sxth	r2, r3
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <catchBLE+0x64>)
 800077a:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <catchBLE+0x58>)
 800077e:	799b      	ldrb	r3, [r3, #6]
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <catchBLE+0x64>)
 8000784:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001d0 	.word	0x200001d0
 8000794:	200000e8 	.word	0x200000e8
 8000798:	200000ec 	.word	0x200000ec
 800079c:	2000012c 	.word	0x2000012c

080007a0 <setConnectable>:

void setConnectable(){
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80007a6:	200c      	movs	r0, #12
 80007a8:	f003 f826 	bl	80037f8 <malloc>
 80007ac:	4603      	mov	r3, r0
 80007ae:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4a36      	ldr	r2, [pc, #216]	@ (800088c <setConnectable+0xec>)
 80007b4:	6810      	ldr	r0, [r2, #0]
 80007b6:	6018      	str	r0, [r3, #0]
 80007b8:	8891      	ldrh	r1, [r2, #4]
 80007ba:	7992      	ldrb	r2, [r2, #6]
 80007bc:	8099      	strh	r1, [r3, #4]
 80007be:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3308      	adds	r3, #8
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3309      	adds	r3, #9
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	330a      	adds	r3, #10
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	330b      	adds	r3, #11
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3307      	adds	r3, #7
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <setConnectable+0xf0>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <setConnectable+0xf0>)
 80007f0:	2215      	movs	r2, #21
 80007f2:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80007f4:	2019      	movs	r0, #25
 80007f6:	f002 ffff 	bl	80037f8 <malloc>
 80007fa:	4603      	mov	r3, r0
 80007fc:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4a23      	ldr	r2, [pc, #140]	@ (8000890 <setConnectable+0xf0>)
 8000802:	461c      	mov	r4, r3
 8000804:	4613      	mov	r3, r2
 8000806:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000808:	6020      	str	r0, [r4, #0]
 800080a:	6061      	str	r1, [r4, #4]
 800080c:	60a2      	str	r2, [r4, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	330d      	adds	r3, #13
 8000816:	220c      	movs	r2, #12
 8000818:	68f9      	ldr	r1, [r7, #12]
 800081a:	4618      	mov	r0, r3
 800081c:	f003 f9c3 	bl	8003ba6 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000820:	2119      	movs	r1, #25
 8000822:	68b8      	ldr	r0, [r7, #8]
 8000824:	f7ff ff3c 	bl	80006a0 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000828:	2007      	movs	r0, #7
 800082a:	f002 ffe5 	bl	80037f8 <malloc>
 800082e:	4603      	mov	r3, r0
 8000830:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 8000832:	bf00      	nop
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <setConnectable+0xf4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0fb      	beq.n	8000834 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 800083c:	2107      	movs	r1, #7
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe7e 	bl	8000540 <fetchBleEvent>
 8000844:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10f      	bne.n	800086c <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 800084c:	2207      	movs	r2, #7
 800084e:	4912      	ldr	r1, [pc, #72]	@ (8000898 <setConnectable+0xf8>)
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff feff 	bl	8000654 <checkEventResp>
 8000856:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <setConnectable+0xfc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <setConnectable+0xfc>)
 800086a:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f002 ffcb 	bl	8003808 <free>
	   free(discoverableCommand);
 8000872:	68b8      	ldr	r0, [r7, #8]
 8000874:	f002 ffc8 	bl	8003808 <free>
	   free(localname);
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f002 ffc5 	bl	8003808 <free>
	   HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f001 f8bc 	bl	80019fc <HAL_Delay>
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	200000f4 	.word	0x200000f4
 8000890:	20000078 	.word	0x20000078
 8000894:	200002e0 	.word	0x200002e0
 8000898:	20000088 	.word	0x20000088
 800089c:	200002da 	.word	0x200002da

080008a0 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 80008ae:	68b9      	ldr	r1, [r7, #8]
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fef5 	bl	80006a0 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	005a      	lsls	r2, r3, #1
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 ff9a 	bl	80037f8 <malloc>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <BLE_command+0x90>)
 80008ca:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80008d0:	e007      	b.n	80008e2 <BLE_command+0x42>
		   contatore++;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	3301      	adds	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	f247 5230 	movw	r2, #30000	@ 0x7530
 80008de:	4293      	cmp	r3, r2
 80008e0:	dc07      	bgt.n	80008f2 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	4813      	ldr	r0, [pc, #76]	@ (8000934 <BLE_command+0x94>)
 80008e6:	f001 fb69 	bl	8001fbc <HAL_GPIO_ReadPin>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f0      	beq.n	80008d2 <BLE_command+0x32>
 80008f0:	e000      	b.n	80008f4 <BLE_command+0x54>
			   break;
 80008f2:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <BLE_command+0x90>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	005a      	lsls	r2, r3, #1
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4619      	mov	r1, r3
 8000902:	f7ff fe1d 	bl	8000540 <fetchBleEvent>
 8000906:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d107      	bne.n	800091e <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <BLE_command+0x90>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fe9c 	bl	8000654 <checkEventResp>
 800091c:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 800091e:	200a      	movs	r0, #10
 8000920:	f001 f86c 	bl	80019fc <HAL_Delay>


	return response;
 8000924:	697b      	ldr	r3, [r7, #20]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200002dc 	.word	0x200002dc
 8000934:	48001000 	.word	0x48001000

08000938 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <addService+0x60>)
 8000946:	2210      	movs	r2, #16
 8000948:	68f9      	ldr	r1, [r7, #12]
 800094a:	4618      	mov	r0, r3
 800094c:	f003 f92b 	bl	8003ba6 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <addService+0x64>)
 8000956:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000958:	2301      	movs	r3, #1
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <addService+0x68>)
 8000960:	2117      	movs	r1, #23
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <addService+0x64>)
 8000964:	f7ff ff9c 	bl	80008a0 <BLE_command>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10a      	bne.n	8000984 <addService+0x4c>
		   handle[0]=rxEvent[7];
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <addService+0x6c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	79da      	ldrb	r2, [r3, #7]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <addService+0x6c>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	3301      	adds	r3, #1
 8000980:	7a12      	ldrb	r2, [r2, #8]
 8000982:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <addService+0x6c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f002 ff3d 	bl	8003808 <free>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000095 	.word	0x20000095
 800099c:	20000090 	.word	0x20000090
 80009a0:	200000a8 	.word	0x200000a8
 80009a4:	200002dc 	.word	0x200002dc

080009a8 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <addCharacteristic+0x74>)
 80009b8:	2210      	movs	r2, #16
 80009ba:	68f9      	ldr	r1, [r7, #12]
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f8f2 	bl	8003ba6 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <addCharacteristic+0x78>)
 80009c8:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	785a      	ldrb	r2, [r3, #1]
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <addCharacteristic+0x78>)
 80009d0:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 80009d2:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <addCharacteristic+0x78>)
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 80009d8:	4a11      	ldr	r2, [pc, #68]	@ (8000a20 <addCharacteristic+0x78>)
 80009da:	7e3b      	ldrb	r3, [r7, #24]
 80009dc:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80009de:	2301      	movs	r3, #1
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2307      	movs	r3, #7
 80009e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <addCharacteristic+0x7c>)
 80009e6:	211e      	movs	r1, #30
 80009e8:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <addCharacteristic+0x78>)
 80009ea:	f7ff ff59 	bl	80008a0 <BLE_command>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10a      	bne.n	8000a0a <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <addCharacteristic+0x80>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	79da      	ldrb	r2, [r3, #7]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <addCharacteristic+0x80>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	3301      	adds	r3, #1
 8000a06:	7a12      	ldrb	r2, [r2, #8]
 8000a08:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000a0a:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <addCharacteristic+0x80>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fefa 	bl	8003808 <free>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000b7 	.word	0x200000b7
 8000a20:	200000b0 	.word	0x200000b0
 8000a24:	200000d0 	.word	0x200000d0
 8000a28:	200002dc 	.word	0x200002dc

08000a2c <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	3306      	adds	r3, #6
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a44:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a4c:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	785a      	ldrb	r2, [r3, #1]
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a54:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a5c:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	785a      	ldrb	r2, [r3, #1]
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a64:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a6c:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a74:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	330a      	adds	r3, #10
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 febc 	bl	80037f8 <malloc>
 8000a80:	4603      	mov	r3, r0
 8000a82:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000a84:	220a      	movs	r2, #10
 8000a86:	4910      	ldr	r1, [pc, #64]	@ (8000ac8 <updateCharValue+0x9c>)
 8000a88:	6978      	ldr	r0, [r7, #20]
 8000a8a:	f003 f88c 	bl	8003ba6 <memcpy>
	memcpy(commandComplete+10,data,size);
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	330a      	adds	r3, #10
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	6a39      	ldr	r1, [r7, #32]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 f885 	bl	8003ba6 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f103 010a 	add.w	r1, r3, #10
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	4a08      	ldr	r2, [pc, #32]	@ (8000acc <updateCharValue+0xa0>)
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff fef8 	bl	80008a0 <BLE_command>

	free(commandComplete);
 8000ab0:	6978      	ldr	r0, [r7, #20]
 8000ab2:	f002 fea9 	bl	8003808 <free>
	free(rxEvent);
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <updateCharValue+0xa4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fea4 	bl	8003808 <free>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000d8 	.word	0x200000d8
 8000acc:	200000d0 	.word	0x200000d0
 8000ad0:	200002dc 	.word	0x200002dc

08000ad4 <i2c_init>:
#include <stm32l475xx.h>

void i2c_init() {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000ad8:	4b41      	ldr	r3, [pc, #260]	@ (8000be0 <i2c_init+0x10c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d177      	bne.n	8000bd4 <i2c_init+0x100>

    // Enable GPIOB and I2C2 clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8000be4 <i2c_init+0x110>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	4a3e      	ldr	r2, [pc, #248]	@ (8000be4 <i2c_init+0x110>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000af0:	4b3c      	ldr	r3, [pc, #240]	@ (8000be4 <i2c_init+0x110>)
 8000af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af4:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <i2c_init+0x110>)
 8000af6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000afa:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PB10 (SCL) and PB11 (SDA) as alternate function
    GPIOB->MODER &= ~GPIO_MODER_MODE10 & ~GPIO_MODER_MODE11; // Clear mode bits
 8000afc:	4b3a      	ldr	r3, [pc, #232]	@ (8000be8 <i2c_init+0x114>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a39      	ldr	r2, [pc, #228]	@ (8000be8 <i2c_init+0x114>)
 8000b02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b06:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1;  // Set alternate function mode
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <i2c_init+0x114>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a36      	ldr	r2, [pc, #216]	@ (8000be8 <i2c_init+0x114>)
 8000b0e:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000b12:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11;  // Open-drain mode (needed for I2C)
 8000b14:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <i2c_init+0x114>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a33      	ldr	r2, [pc, #204]	@ (8000be8 <i2c_init+0x114>)
 8000b1a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000b1e:	6053      	str	r3, [r2, #4]

    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);  // Clear pull-up/down register
 8000b20:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <i2c_init+0x114>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4a30      	ldr	r2, [pc, #192]	@ (8000be8 <i2c_init+0x114>)
 8000b26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b2a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);  // Pull-up (default 1 from floating)
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <i2c_init+0x114>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	4a2d      	ldr	r2, [pc, #180]	@ (8000be8 <i2c_init+0x114>)
 8000b32:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000b36:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <i2c_init+0x114>)
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000be8 <i2c_init+0x114>)
 8000b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b42:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL11_2;
 8000b44:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <i2c_init+0x114>)
 8000b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b48:	4a27      	ldr	r2, [pc, #156]	@ (8000be8 <i2c_init+0x114>)
 8000b4a:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000b4e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Reset I2C2
    I2C2->CR1 &= ~I2C_CR1_PE;
 8000b50:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <i2c_init+0x10c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a22      	ldr	r2, [pc, #136]	@ (8000be0 <i2c_init+0x10c>)
 8000b56:	f023 0301 	bic.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_SWRST;
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <i2c_init+0x10c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1f      	ldr	r2, [pc, #124]	@ (8000be0 <i2c_init+0x10c>)
 8000b62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b66:	6013      	str	r3, [r2, #0]
    I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <i2c_init+0x10c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <i2c_init+0x10c>)
 8000b6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000b72:	6013      	str	r3, [r2, #0]

    // SYSCLK is 4 MHz
    // PCLK1 will be 4 MHz if we configure no divides between SYSCLK and HCLK and b/t HCLK and PCLK1

    // configure HCLK and PCLK1 to have no divides
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1);
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <i2c_init+0x110>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	4a1a      	ldr	r2, [pc, #104]	@ (8000be4 <i2c_init+0x110>)
 8000b7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8000b7e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV1;
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <i2c_init+0x110>)
 8000b82:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <i2c_init+0x110>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	6093      	str	r3, [r2, #8]
    // tFilter = 260 ns (analog filter only)
    // tI2CCLK = 1 / PCLK1 = 1 / 4 MHz = 250 ns
    // PRESC = 0 (keep at 250 ns)
    // SCLL = (tLow - tFilter) / tI2CCLK = round((20 us - 260 ns) / 250 ns) = 79
    // SCLH = tHigh / tI2CCLK = 20 us / 250 ns = 80
    I2C2->TIMINGR &= 0;
 8000b88:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <i2c_init+0x10c>)
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <i2c_init+0x10c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_PRESC_Pos;
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <i2c_init+0x10c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <i2c_init+0x10c>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 79 << I2C_TIMINGR_SCLL_Pos;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <i2c_init+0x10c>)
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <i2c_init+0x10c>)
 8000ba0:	f043 034f 	orr.w	r3, r3, #79	@ 0x4f
 8000ba4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 80 << I2C_TIMINGR_SCLH_Pos;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <i2c_init+0x10c>)
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <i2c_init+0x10c>)
 8000bac:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000bb0:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_SDADEL_Pos;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <i2c_init+0x10c>)
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <i2c_init+0x10c>)
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 2 << I2C_TIMINGR_SCLDEL_Pos;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <i2c_init+0x10c>)
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <i2c_init+0x10c>)
 8000bc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc4:	6113      	str	r3, [r2, #16]

    // Enable I2C2
    I2C2->CR1 |= I2C_CR1_PE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <i2c_init+0x10c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <i2c_init+0x10c>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e000      	b.n	8000bd6 <i2c_init+0x102>
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000bd4:	bf00      	nop
}
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40005800 	.word	0x40005800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000400 	.word	0x48000400

08000bec <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	603a      	str	r2, [r7, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
    uint32_t timeout = 1000000;  // Simple timeout mechanism
 8000c02:	4b79      	ldr	r3, [pc, #484]	@ (8000de8 <i2c_transaction+0x1fc>)
 8000c04:	60fb      	str	r3, [r7, #12]

    // Ensure the bus is free
    while ((I2C2->ISR & I2C_ISR_BUSY) && --timeout);
 8000c06:	bf00      	nop
 8000c08:	4b78      	ldr	r3, [pc, #480]	@ (8000dec <i2c_transaction+0x200>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <i2c_transaction+0x34>
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f3      	bne.n	8000c08 <i2c_transaction+0x1c>
    if (!timeout) return 1;  // Timeout error
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <i2c_transaction+0x3e>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0d7      	b.n	8000dda <i2c_transaction+0x1ee>

    if (dir) {  // read
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 8087 	beq.w	8000d40 <i2c_transaction+0x154>
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a6d      	ldr	r2, [pc, #436]	@ (8000dec <i2c_transaction+0x200>)
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8000dec <i2c_transaction+0x200>)
 8000c3c:	4a6b      	ldr	r2, [pc, #428]	@ (8000dec <i2c_transaction+0x200>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 1 << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000c42:	4b6a      	ldr	r3, [pc, #424]	@ (8000dec <i2c_transaction+0x200>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4a69      	ldr	r2, [pc, #420]	@ (8000dec <i2c_transaction+0x200>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c4c:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000c4e:	4b67      	ldr	r3, [pc, #412]	@ (8000dec <i2c_transaction+0x200>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a66      	ldr	r2, [pc, #408]	@ (8000dec <i2c_transaction+0x200>)
 8000c54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c58:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	72fb      	strb	r3, [r7, #11]
 8000c5e:	e06a      	b.n	8000d36 <i2c_transaction+0x14a>
	    	timeout = 1000000;
 8000c60:	4b61      	ldr	r3, [pc, #388]	@ (8000de8 <i2c_transaction+0x1fc>)
 8000c62:	60fb      	str	r3, [r7, #12]

    	    if (i == 0) {
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d149      	bne.n	8000cfe <i2c_transaction+0x112>
    	    	while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000c6a:	bf00      	nop
 8000c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dec <i2c_transaction+0x200>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <i2c_transaction+0x98>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f3      	bne.n	8000c6c <i2c_transaction+0x80>
    	        if (!timeout) return 2;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <i2c_transaction+0xa2>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e0a5      	b.n	8000dda <i2c_transaction+0x1ee>
    	        I2C2->TXDR = data[i];
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	4b55      	ldr	r3, [pc, #340]	@ (8000dec <i2c_transaction+0x200>)
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28

    	        while (!(I2C2->ISR & I2C_ISR_TC) && --timeout);
 8000c9a:	bf00      	nop
 8000c9c:	4b53      	ldr	r3, [pc, #332]	@ (8000dec <i2c_transaction+0x200>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d105      	bne.n	8000cb4 <i2c_transaction+0xc8>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f3      	bne.n	8000c9c <i2c_transaction+0xb0>
    	       	if (!timeout) return 2;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <i2c_transaction+0xd2>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e08d      	b.n	8000dda <i2c_transaction+0x1ee>

    	        I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8000dec <i2c_transaction+0x200>)
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_RD_WRN;  // transfer direction. 0 for write, 1 for read
 8000cc6:	4b49      	ldr	r3, [pc, #292]	@ (8000dec <i2c_transaction+0x200>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4a48      	ldr	r2, [pc, #288]	@ (8000dec <i2c_transaction+0x200>)
 8000ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd0:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= (len - 1) << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000cd2:	4b46      	ldr	r3, [pc, #280]	@ (8000dec <i2c_transaction+0x200>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	797a      	ldrb	r2, [r7, #5]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	0412      	lsls	r2, r2, #16
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a43      	ldr	r2, [pc, #268]	@ (8000dec <i2c_transaction+0x200>)
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_AUTOEND;  // auto transmit STOP after # of bytes
 8000ce4:	4b41      	ldr	r3, [pc, #260]	@ (8000dec <i2c_transaction+0x200>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a40      	ldr	r2, [pc, #256]	@ (8000dec <i2c_transaction+0x200>)
 8000cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cee:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dec <i2c_transaction+0x200>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8000dec <i2c_transaction+0x200>)
 8000cf6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cfa:	6053      	str	r3, [r2, #4]

    	       	continue;
 8000cfc:	e018      	b.n	8000d30 <i2c_transaction+0x144>
    	    }

    	    while (!(I2C2->ISR & I2C_ISR_RXNE) && --timeout);
 8000cfe:	bf00      	nop
 8000d00:	4b3a      	ldr	r3, [pc, #232]	@ (8000dec <i2c_transaction+0x200>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <i2c_transaction+0x12c>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f3      	bne.n	8000d00 <i2c_transaction+0x114>
    	    if (!timeout) return 3;  // Timeout error
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <i2c_transaction+0x136>
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e05b      	b.n	8000dda <i2c_transaction+0x1ee>
    	    data[i] = I2C2->RXDR;
 8000d22:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <i2c_transaction+0x200>)
 8000d24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d26:	7afb      	ldrb	r3, [r7, #11]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b2ca      	uxtb	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
	    for (uint8_t i = 0; i < len; i++) {
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	3301      	adds	r3, #1
 8000d34:	72fb      	strb	r3, [r7, #11]
 8000d36:	7afa      	ldrb	r2, [r7, #11]
 8000d38:	797b      	ldrb	r3, [r7, #5]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d390      	bcc.n	8000c60 <i2c_transaction+0x74>
 8000d3e:	e03e      	b.n	8000dbe <i2c_transaction+0x1d2>
	    }
    } else {  // write
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4a2a      	ldr	r2, [pc, #168]	@ (8000dec <i2c_transaction+0x200>)
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <i2c_transaction+0x200>)
 8000d4a:	4a28      	ldr	r2, [pc, #160]	@ (8000dec <i2c_transaction+0x200>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= len << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <i2c_transaction+0x200>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	797b      	ldrb	r3, [r7, #5]
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	4924      	ldr	r1, [pc, #144]	@ (8000dec <i2c_transaction+0x200>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
    	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <i2c_transaction+0x200>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a22      	ldr	r2, [pc, #136]	@ (8000dec <i2c_transaction+0x200>)
 8000d64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d68:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <i2c_transaction+0x200>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dec <i2c_transaction+0x200>)
 8000d70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d74:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	72bb      	strb	r3, [r7, #10]
 8000d7a:	e01c      	b.n	8000db6 <i2c_transaction+0x1ca>
	    	timeout = 1000000;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <i2c_transaction+0x1fc>)
 8000d7e:	60fb      	str	r3, [r7, #12]

            while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000d80:	bf00      	nop
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <i2c_transaction+0x200>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d105      	bne.n	8000d9a <i2c_transaction+0x1ae>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f3      	bne.n	8000d82 <i2c_transaction+0x196>
   	        if (!timeout) return 2;  // Timeout error
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <i2c_transaction+0x1b8>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e01a      	b.n	8000dda <i2c_transaction+0x1ee>
    	    I2C2->TXDR = data[i];
 8000da4:	7abb      	ldrb	r3, [r7, #10]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <i2c_transaction+0x200>)
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
	    for (uint8_t i = 0; i < len; i++) {
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	3301      	adds	r3, #1
 8000db4:	72bb      	strb	r3, [r7, #10]
 8000db6:	7aba      	ldrb	r2, [r7, #10]
 8000db8:	797b      	ldrb	r3, [r7, #5]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3de      	bcc.n	8000d7c <i2c_transaction+0x190>
	    }
    }

    while (!(I2C2->ISR & I2C_ISR_STOPF));  // Wait for STOP condition
 8000dbe:	bf00      	nop
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <i2c_transaction+0x200>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0320 	and.w	r3, r3, #32
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f9      	beq.n	8000dc0 <i2c_transaction+0x1d4>
    I2C2->ICR |= I2C_ICR_STOPCF;  // Clear STOP flag
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <i2c_transaction+0x200>)
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <i2c_transaction+0x200>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	61d3      	str	r3, [r2, #28]

    return 0;  // Success
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	000f4240 	.word	0x000f4240
 8000dec:	40005800 	.word	0x40005800

08000df0 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 8000df4:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <leds_init+0xc4>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb4 <leds_init+0xc4>)
 8000dfa:	f043 0303 	orr.w	r3, r3, #3
 8000dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Configure PA5 and PB14 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000e00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e0a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000e0e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000e10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000e20:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <leds_init+0xc8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a24      	ldr	r2, [pc, #144]	@ (8000eb8 <leds_init+0xc8>)
 8000e26:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000e2a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <leds_init+0xc8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <leds_init+0xc8>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000e38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e42:	f023 0320 	bic.w	r3, r3, #32
 8000e46:	6053      	str	r3, [r2, #4]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <leds_init+0xc8>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb8 <leds_init+0xc8>)
 8000e4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e52:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000e54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e5e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e62:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD14;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <leds_init+0xc8>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <leds_init+0xc8>)
 8000e6a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000e6e:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000e70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e7a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000e7e:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <leds_init+0xc8>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb8 <leds_init+0xc8>)
 8000e86:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000e8a:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000e8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e96:	f023 0320 	bic.w	r3, r3, #32
 8000e9a:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <leds_init+0xc8>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <leds_init+0xc8>)
 8000ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ea6:	6153      	str	r3, [r2, #20]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400

08000ebc <leds_set>:

void leds_set(uint8_t led)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d847      	bhi.n	8000f5c <leds_set+0xa0>
 8000ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed4 <leds_set+0x18>)
 8000ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000f03 	.word	0x08000f03
 8000edc:	08000f21 	.word	0x08000f21
 8000ee0:	08000f3f 	.word	0x08000f3f
        case 0:
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000ee4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eee:	f023 0320 	bic.w	r3, r3, #32
 8000ef2:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <leds_set+0xac>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f68 <leds_set+0xac>)
 8000efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000efe:	6153      	str	r3, [r2, #20]
            break;
 8000f00:	e02c      	b.n	8000f5c <leds_set+0xa0>
        case 1:
            //LED 2 is turned on
            GPIOA->ODR |= GPIO_ODR_OD5;
 8000f02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <leds_set+0xac>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <leds_set+0xac>)
 8000f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f1c:	6153      	str	r3, [r2, #20]
            break;
 8000f1e:	e01d      	b.n	8000f5c <leds_set+0xa0>
        case 2:
        	//LED 1 is turned on
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000f20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f2a:	f023 0320 	bic.w	r3, r3, #32
 8000f2e:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <leds_set+0xac>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <leds_set+0xac>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3a:	6153      	str	r3, [r2, #20]
            break;
 8000f3c:	e00e      	b.n	8000f5c <leds_set+0xa0>
        case 3:
        	//Both LEDs are on
            GPIOA->ODR |= GPIO_ODR_OD5;
 8000f3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <leds_set+0xac>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <leds_set+0xac>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f58:	6153      	str	r3, [r2, #20]
            break;
 8000f5a:	bf00      	nop

    }
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	48000400 	.word	0x48000400

08000f6c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f78:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f84:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f88:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f8c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00b      	beq.n	8000fac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f94:	e000      	b.n	8000f98 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f96:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f98:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f9      	beq.n	8000f96 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fa2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <TIM2_IRQHandler>:
volatile int counter = 0;
volatile int arr_counter = 0;  // Counter for which part of the array we are displaying
volatile uint8_t minute_counter = 0; // counter for how many minutes have gone by

void TIM2_IRQHandler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

    if (TIM2->SR & TIM_SR_UIF) {  // check if interrupt status reg != 0
 8000fc0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d018      	beq.n	8001000 <TIM2_IRQHandler+0x44>
        TIM2->SR &= ~TIM_SR_UIF;  // turn it off
 8000fce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6113      	str	r3, [r2, #16]

        arr_counter = (arr_counter + 1) % ARR_LENGTH;  // increment counter
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <TIM2_IRQHandler+0x50>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	425a      	negs	r2, r3
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	f002 020f 	and.w	r2, r2, #15
 8000fee:	bf58      	it	pl
 8000ff0:	4253      	negpl	r3, r2
 8000ff2:	4a06      	ldr	r2, [pc, #24]	@ (800100c <TIM2_IRQHandler+0x50>)
 8000ff4:	6013      	str	r3, [r2, #0]

        counter += 1;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <TIM2_IRQHandler+0x54>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <TIM2_IRQHandler+0x54>)
 8000ffe:	6013      	str	r3, [r2, #0]
    }
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000034c 	.word	0x2000034c
 8001010:	20000348 	.word	0x20000348

08001014 <_write>:
int _write(int file, char *ptr, int len) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e009      	b.n	800103e <_write+0x2a>
        ITM_SendChar(*ptr++);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	60ba      	str	r2, [r7, #8]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff9a 	bl	8000f6c <ITM_SendChar>
    for (i = 0; i < len; i++) {
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	dbf1      	blt.n	800102a <_write+0x16>
    }
    return len;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b092      	sub	sp, #72	@ 0x48
 8001054:	af02      	add	r7, sp, #8
int main(void)
 8001056:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800105a:	623b      	str	r3, [r7, #32]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fc59 	bl	8001912 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f924 	bl	80012ac <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f9a6 	bl	80013b4 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001068:	f000 f966 	bl	8001338 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001076:	f000 ffb9 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fcbe 	bl	80019fc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108a:	f000 ffaf 	bl	8001fec <HAL_GPIO_WritePin>

  ble_init();
 800108e:	f7ff f93d 	bl	800030c <ble_init>
  //Old code
  leds_init();
 8001092:	f7ff fead 	bl	8000df0 <leds_init>
  timer_init(TIM2);
 8001096:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800109a:	f000 fbc9 	bl	8001830 <timer_init>
  timer_set_ms(TIM2, 50);
 800109e:	2132      	movs	r1, #50	@ 0x32
 80010a0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80010a4:	f000 fbfa 	bl	800189c <timer_set_ms>
  printf("Print works");
 80010a8:	4876      	ldr	r0, [pc, #472]	@ (8001284 <main+0x234>)
 80010aa:	f002 fd25 	bl	8003af8 <iprintf>
  i2c_init();
 80010ae:	f7ff fd11 	bl	8000ad4 <i2c_init>
  lsm6dsl_init();
 80010b2:	f7ff f8dd 	bl	8000270 <lsm6dsl_init>

  int16_t x, y, z;
  int16_t last_x = 0, last_y = 0, last_z = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80010ba:	2300      	movs	r3, #0
 80010bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80010be:	2300      	movs	r3, #0
 80010c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  int stable_counter = 0;  // Count how many iterations values remain within threshold
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  const int STABLE_THRESHOLD = 160;
 80010c6:	23a0      	movs	r3, #160	@ 0xa0
 80010c8:	633b      	str	r3, [r7, #48]	@ 0x30
          ITM_SendChar(*ptr++);
      }
      return len;
  }
  //Old code end
  HAL_Delay(10);
 80010ca:	200a      	movs	r0, #10
 80010cc:	f000 fc96 	bl	80019fc <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  while (1)
  {
	  //Old code
	  lsm6dsl_read_xyz(&x, &y, &z);
 80010d6:	f107 021a 	add.w	r2, r7, #26
 80010da:	f107 011c 	add.w	r1, r7, #28
 80010de:	f107 031e 	add.w	r3, r7, #30
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f8dd 	bl	80002a2 <lsm6dsl_read_xyz>

	          // Convert values to match the scale
	          int16_t x_scaled = x / 16;
 80010e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da00      	bge.n	80010f2 <main+0xa2>
 80010f0:	330f      	adds	r3, #15
 80010f2:	111b      	asrs	r3, r3, #4
 80010f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	          int16_t y_scaled = y / 16;
 80010f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da00      	bge.n	8001100 <main+0xb0>
 80010fe:	330f      	adds	r3, #15
 8001100:	111b      	asrs	r3, r3, #4
 8001102:	857b      	strh	r3, [r7, #42]	@ 0x2a
	          int16_t z_scaled = z / 16;
 8001104:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da00      	bge.n	800110e <main+0xbe>
 800110c:	330f      	adds	r3, #15
 800110e:	111b      	asrs	r3, r3, #4
 8001110:	853b      	strh	r3, [r7, #40]	@ 0x28

	          // Check if the change is within the stable threshold
	          if (abs(x_scaled - last_x) <= STABLE_THRESHOLD && abs(y_scaled - last_y) <= STABLE_THRESHOLD && abs(z_scaled - last_z) <= STABLE_THRESHOLD)
 8001112:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001116:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	bfb8      	it	lt
 8001120:	425b      	neglt	r3, r3
 8001122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001124:	429a      	cmp	r2, r3
 8001126:	db69      	blt.n	80011fc <main+0x1ac>
 8001128:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800112c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	bfb8      	it	lt
 8001136:	425b      	neglt	r3, r3
 8001138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800113a:	429a      	cmp	r2, r3
 800113c:	db5e      	blt.n	80011fc <main+0x1ac>
 800113e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001142:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	bfb8      	it	lt
 800114c:	425b      	neglt	r3, r3
 800114e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001150:	429a      	cmp	r2, r3
 8001152:	db53      	blt.n	80011fc <main+0x1ac>
	          {
	              stable_counter++;
 8001154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001156:	3301      	adds	r3, #1
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
	              if (counter >= MINUTE_COUNT)
 800115a:	4b4b      	ldr	r3, [pc, #300]	@ (8001288 <main+0x238>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001162:	db57      	blt.n	8001214 <main+0x1c4>
	              {
	              	if(minute_counter==0){
 8001164:	4b49      	ldr	r3, [pc, #292]	@ (800128c <main+0x23c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <main+0x124>
	                  	arr_counter = 0;
 800116e:	4b48      	ldr	r3, [pc, #288]	@ (8001290 <main+0x240>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
	                  }
	                  minute_counter+=1;
 8001174:	4b45      	ldr	r3, [pc, #276]	@ (800128c <main+0x23c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b43      	ldr	r3, [pc, #268]	@ (800128c <main+0x23c>)
 8001180:	701a      	strb	r2, [r3, #0]
	                  uint8_t segment1 = (minute_counter >> 6) & 0x3; // Bits 7-8
 8001182:	4b42      	ldr	r3, [pc, #264]	@ (800128c <main+0x23c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	099b      	lsrs	r3, r3, #6
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	                  uint8_t segment2 = (minute_counter >> 4) & 0x3; // Bits 5-6
 8001194:	4b3d      	ldr	r3, [pc, #244]	@ (800128c <main+0x23c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	                  uint8_t segment3 = (minute_counter >> 2) & 0x3; // Bits 3-4
 80011a6:	4b39      	ldr	r3, [pc, #228]	@ (800128c <main+0x23c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	                  uint8_t segment4 = minute_counter & 0x3;
 80011b8:	4b34      	ldr	r3, [pc, #208]	@ (800128c <main+0x23c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	                  arr[12] = segment1;
 80011c6:	4a33      	ldr	r2, [pc, #204]	@ (8001294 <main+0x244>)
 80011c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011cc:	7313      	strb	r3, [r2, #12]
	                  arr[13] = segment2;
 80011ce:	4a31      	ldr	r2, [pc, #196]	@ (8001294 <main+0x244>)
 80011d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011d4:	7353      	strb	r3, [r2, #13]
	                  arr[14] = segment3;
 80011d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001294 <main+0x244>)
 80011d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80011dc:	7393      	strb	r3, [r2, #14]
	                  arr[15] = segment4;
 80011de:	4a2d      	ldr	r2, [pc, #180]	@ (8001294 <main+0x244>)
 80011e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011e4:	73d3      	strb	r3, [r2, #15]
	                  counter = 0; //reset counter so it doesn't keep printing
 80011e6:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <main+0x238>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]


	                  printf("Device has not moved for %d minute(s)\n", minute_counter);
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <main+0x23c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	4828      	ldr	r0, [pc, #160]	@ (8001298 <main+0x248>)
 80011f6:	f002 fc7f 	bl	8003af8 <iprintf>
	              if (counter >= MINUTE_COUNT)
 80011fa:	e00b      	b.n	8001214 <main+0x1c4>

	              }
	          }
	          else
	          {
	          	leds_set(0);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fe5d 	bl	8000ebc <leds_set>
	          	arr_counter = 0;
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <main+0x240>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
	          	minute_counter = 0;
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <main+0x23c>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	              counter = 0; // Reset the counter when the thing moves
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <main+0x238>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
	          }

	          // Updating the compares
	          last_x = x_scaled;
 8001214:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001216:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	          last_y = y_scaled;
 8001218:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800121a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	          last_z = z_scaled;
 800121c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800121e:	877b      	strh	r3, [r7, #58]	@ 0x3a

	          if(minute_counter>0){
 8001220:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <main+0x23c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <main+0x1e8>
	          	leds_set(arr[arr_counter]);  // set LEDs based off current pattern
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <main+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <main+0x244>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fe42 	bl	8000ebc <leds_set>
	          }
	  //Old code end
	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001238:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <main+0x204>
 8001240:	2140      	movs	r1, #64	@ 0x40
 8001242:	4816      	ldr	r0, [pc, #88]	@ (800129c <main+0x24c>)
 8001244:	f000 feba 	bl	8001fbc <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <main+0x204>
	    catchBLE();
 800124e:	f7ff fa73 	bl	8000738 <catchBLE>
 8001252:	e016      	b.n	8001282 <main+0x232>
	  }else{
		  HAL_Delay(1000);
 8001254:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001258:	f000 fbd0 	bl	80019fc <HAL_Delay>
		  // Send a string to the NORDIC UART service, remember to not include the newline
		  unsigned char test_str[] = "youlostit BLE test";
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <main+0x250>)
 800125e:	1d3c      	adds	r4, r7, #4
 8001260:	461d      	mov	r5, r3
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	8022      	strh	r2, [r4, #0]
 800126c:	3402      	adds	r4, #2
 800126e:	0c1b      	lsrs	r3, r3, #16
 8001270:	7023      	strb	r3, [r4, #0]
		  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2312      	movs	r3, #18
 8001278:	2200      	movs	r2, #0
 800127a:	490a      	ldr	r1, [pc, #40]	@ (80012a4 <main+0x254>)
 800127c:	480a      	ldr	r0, [pc, #40]	@ (80012a8 <main+0x258>)
 800127e:	f7ff fbd5 	bl	8000a2c <updateCharValue>
  {
 8001282:	e728      	b.n	80010d6 <main+0x86>
 8001284:	080046bc 	.word	0x080046bc
 8001288:	20000348 	.word	0x20000348
 800128c:	20000350 	.word	0x20000350
 8001290:	2000034c 	.word	0x2000034c
 8001294:	20000130 	.word	0x20000130
 8001298:	080046c8 	.word	0x080046c8
 800129c:	48001000 	.word	0x48001000
 80012a0:	080046f0 	.word	0x080046f0
 80012a4:	200002d8 	.word	0x200002d8
 80012a8:	200002d0 	.word	0x200002d0

080012ac <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b096      	sub	sp, #88	@ 0x58
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2244      	movs	r2, #68	@ 0x44
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fc2e 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012d2:	f000 fed5 	bl	8002080 <HAL_PWREx_ControlVoltageScaling>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012dc:	f000 f902 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012e0:	2310      	movs	r3, #16
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80012ec:	2370      	movs	r3, #112	@ 0x70
 80012ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 ff17 	bl	800212c <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001304:	f000 f8ee 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fadf 	bl	80028e4 <HAL_RCC_ClockConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800132c:	f000 f8da 	bl	80014e4 <Error_Handler>
  }
}
 8001330:	bf00      	nop
 8001332:	3758      	adds	r7, #88	@ 0x58
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <MX_SPI3_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <MX_SPI3_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001344:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001348:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <MX_SPI3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001352:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001356:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_SPI3_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_SPI3_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_SPI3_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001386:	2207      	movs	r2, #7
 8001388:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_SPI3_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001392:	2208      	movs	r2, #8
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_SPI3_Init+0x74>)
 8001398:	f001 fc90 	bl	8002cbc <HAL_SPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 f89f 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002e4 	.word	0x200002e4
 80013b0:	40003c00 	.word	0x40003c00

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ca:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <MX_GPIO_Init+0x124>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a42      	ldr	r2, [pc, #264]	@ (80014d8 <MX_GPIO_Init+0x124>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b40      	ldr	r3, [pc, #256]	@ (80014d8 <MX_GPIO_Init+0x124>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b3d      	ldr	r3, [pc, #244]	@ (80014d8 <MX_GPIO_Init+0x124>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a3c      	ldr	r2, [pc, #240]	@ (80014d8 <MX_GPIO_Init+0x124>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <MX_GPIO_Init+0x124>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <MX_GPIO_Init+0x124>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	4a36      	ldr	r2, [pc, #216]	@ (80014d8 <MX_GPIO_Init+0x124>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <MX_GPIO_Init+0x124>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <MX_GPIO_Init+0x124>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	4a30      	ldr	r2, [pc, #192]	@ (80014d8 <MX_GPIO_Init+0x124>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <MX_GPIO_Init+0x124>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <MX_GPIO_Init+0x124>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a2a      	ldr	r2, [pc, #168]	@ (80014d8 <MX_GPIO_Init+0x124>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <MX_GPIO_Init+0x124>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f000 fdcf 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001454:	4821      	ldr	r0, [pc, #132]	@ (80014dc <MX_GPIO_Init+0x128>)
 8001456:	f000 fdc9 	bl	8001fec <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001464:	f000 fdc2 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <MX_GPIO_Init+0x12c>)
 800147e:	f000 fbf3 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8001482:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149e:	f000 fbe3 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80014a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4808      	ldr	r0, [pc, #32]	@ (80014dc <MX_GPIO_Init+0x128>)
 80014bc:	f000 fbd4 	bl	8001c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2017      	movs	r0, #23
 80014c6:	f000 fb98 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014ca:	2017      	movs	r0, #23
 80014cc:	f000 fbb1 	bl	8001c32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000c00 	.word	0x48000c00
 80014e0:	48001000 	.word	0x48001000

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <Error_Handler+0x8>

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001534 <HAL_MspInit+0x44>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6613      	str	r3, [r2, #96]	@ 0x60
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_MspInit+0x44>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_MspInit+0x44>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_MspInit+0x44>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_SPI_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d128      	bne.n	80015ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	4a16      	ldr	r2, [pc, #88]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001564:	6593      	str	r3, [r2, #88]	@ 0x58
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800158a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800159c:	2306      	movs	r3, #6
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <HAL_SPI_MspInit+0x84>)
 80015a8:	f000 fb5e 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40003c00 	.word	0x40003c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000800 	.word	0x48000800

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f9d1 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <EXTI9_5_IRQHandler+0x14>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800162a:	2040      	movs	r0, #64	@ 0x40
 800162c:	f000 fcf6 	bl	800201c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200002e0 	.word	0x200002e0

08001638 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e00a      	b.n	8001660 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800164a:	f3af 8000 	nop.w
 800164e:	4601      	mov	r1, r0
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	b2ca      	uxtb	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf0      	blt.n	800164a <_read+0x12>
	}

return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <_sbrk+0x50>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x16>
		heap_end = &end;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <_sbrk+0x50>)
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <_sbrk+0x54>)
 8001688:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <_sbrk+0x50>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <_sbrk+0x50>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	466a      	mov	r2, sp
 800169a:	4293      	cmp	r3, r2
 800169c:	d907      	bls.n	80016ae <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800169e:	f002 fa55 	bl	8003b4c <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	220c      	movs	r2, #12
 80016a6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ac:	e006      	b.n	80016bc <_sbrk+0x48>
	}

	heap_end += incr;
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <_sbrk+0x50>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a03      	ldr	r2, [pc, #12]	@ (80016c4 <_sbrk+0x50>)
 80016b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000354 	.word	0x20000354
 80016c8:	200004a8 	.word	0x200004a8

080016cc <_close>:

int _close(int file)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	return -1;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f4:	605a      	str	r2, [r3, #4]
	return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_isatty>:

int _isatty(int file)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
	return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <SystemInit+0x64>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173e:	4a16      	ldr	r2, [pc, #88]	@ (8001798 <SystemInit+0x64>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <SystemInit+0x68>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a13      	ldr	r2, [pc, #76]	@ (800179c <SystemInit+0x68>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <SystemInit+0x68>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <SystemInit+0x68>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <SystemInit+0x68>)
 8001760:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001764:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001768:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <SystemInit+0x68>)
 800176c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001770:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <SystemInit+0x68>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a09      	ldr	r2, [pc, #36]	@ (800179c <SystemInit+0x68>)
 8001778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <SystemInit+0x68>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SystemInit+0x64>)
 8001786:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800178a:	609a      	str	r2, [r3, #8]
#endif
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	40021000 	.word	0x40021000

080017a0 <__NVIC_EnableIRQ>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	@ (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <timer_init>:
#include "timer.h"
#include <stm32l475xx.h>


void timer_init(TIM_TypeDef* timer)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 0201 	bic.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
	timer->CNT = 0;//making the timer counter 0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
	timer->SR = 0;//making the interrupt flag 0
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; //adding the clock for TIM2
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <timer_init+0x68>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	4a10      	ldr	r2, [pc, #64]	@ (8001898 <timer_init+0x68>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6593      	str	r3, [r2, #88]	@ 0x58
	timer->PSC = 4000-1; // Making the clock frequency 1ms
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001862:	629a      	str	r2, [r3, #40]	@ 0x28
	timer->ARR = 49; // Setting the timer interrupt to 50ms
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2231      	movs	r2, #49	@ 0x31
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer->DIER|=TIM_DIER_UIE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8001876:	201c      	movs	r0, #28
 8001878:	f7ff ff92 	bl	80017a0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 0);
 800187c:	2100      	movs	r1, #0
 800187e:	201c      	movs	r0, #28
 8001880:	f7ff ffac 	bl	80017dc <__NVIC_SetPriority>
	timer->CR1|= TIM_CR1_CEN; //Starting the timer
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000

0800189c <timer_set_ms>:
{
	timer->CNT = 0; // Reseting the timer to zero
}

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
	timer->ARR = period_ms-1; // Setting the timer interrupt to whatever is passed in
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c4:	f7ff ff36 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c8:	480c      	ldr	r0, [pc, #48]	@ (80018fc <LoopForever+0x6>)
  ldr r1, =_edata
 80018ca:	490d      	ldr	r1, [pc, #52]	@ (8001900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <LoopForever+0xe>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e0:	4c0a      	ldr	r4, [pc, #40]	@ (800190c <LoopForever+0x16>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ee:	f002 f933 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f2:	f7ff fbad 	bl	8001050 <main>

080018f6 <LoopForever>:

LoopForever:
    b LoopForever
 80018f6:	e7fe      	b.n	80018f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8001904:	08004788 	.word	0x08004788
  ldr r2, =_sbss
 8001908:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 800190c:	200004a8 	.word	0x200004a8

08001910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC1_2_IRQHandler>

08001912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f961 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f80e 	bl	8001944 <HAL_InitTick>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	e001      	b.n	8001938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001934:	f7ff fddc 	bl	80014f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001938:	79fb      	ldrb	r3, [r7, #7]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_InitTick+0x6c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001958:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <HAL_InitTick+0x70>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_InitTick+0x6c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001966:	fbb3 f3f1 	udiv	r3, r3, r1
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f96d 	bl	8001c4e <HAL_SYSTICK_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d809      	bhi.n	8001994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001988:	f000 f937 	bl	8001bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800198c:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <HAL_InitTick+0x74>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e007      	b.n	80019a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e004      	b.n	80019a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e001      	b.n	80019a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000148 	.word	0x20000148
 80019b4:	20000140 	.word	0x20000140
 80019b8:	20000144 	.word	0x20000144

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000148 	.word	0x20000148
 80019e0:	20000358 	.word	0x20000358

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000358 	.word	0x20000358

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000148 	.word	0x20000148

08001a44 <__NVIC_SetPriorityGrouping>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff29 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff3e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff8e 	bl	8001b38 <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff31 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e17f      	b.n	8001f78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8171 	beq.w	8001f72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x40>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d118      	bne.n	8001d48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d017      	beq.n	8001d84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d123      	bne.n	8001dd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	6939      	ldr	r1, [r7, #16]
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80ac 	beq.w	8001f72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f98 <HAL_GPIO_Init+0x330>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001f98 <HAL_GPIO_Init+0x330>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e26:	4b5c      	ldr	r3, [pc, #368]	@ (8001f98 <HAL_GPIO_Init+0x330>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e32:	4a5a      	ldr	r2, [pc, #360]	@ (8001f9c <HAL_GPIO_Init+0x334>)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x242>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa0 <HAL_GPIO_Init+0x338>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x23e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4e      	ldr	r2, [pc, #312]	@ (8001fa4 <HAL_GPIO_Init+0x33c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x23a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4d      	ldr	r2, [pc, #308]	@ (8001fa8 <HAL_GPIO_Init+0x340>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x236>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4c      	ldr	r2, [pc, #304]	@ (8001fac <HAL_GPIO_Init+0x344>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x232>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb0 <HAL_GPIO_Init+0x348>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x22e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb4 <HAL_GPIO_Init+0x34c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x22a>
 8001e8e:	2306      	movs	r3, #6
 8001e90:	e00c      	b.n	8001eac <HAL_GPIO_Init+0x244>
 8001e92:	2307      	movs	r3, #7
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_Init+0x244>
 8001e96:	2305      	movs	r3, #5
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x244>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x244>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x244>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x244>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x244>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ebc:	4937      	ldr	r1, [pc, #220]	@ (8001f9c <HAL_GPIO_Init+0x334>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eca:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eee:	4a32      	ldr	r2, [pc, #200]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ef4:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f18:	4a27      	ldr	r2, [pc, #156]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f1e:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f42:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f6c:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <HAL_GPIO_Init+0x350>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f47f ae78 	bne.w	8001c78 <HAL_GPIO_Init+0x10>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	48001000 	.word	0x48001000
 8001fb0:	48001400 	.word	0x48001400
 8001fb4:	48001800 	.word	0x48001800
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002008:	e002      	b.n	8002010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f806 	bl	800204c <HAL_GPIO_EXTI_Callback>
  }
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002068:	4b04      	ldr	r3, [pc, #16]	@ (800207c <HAL_PWREx_GetVoltageRange+0x18>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40007000 	.word	0x40007000

08002080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800208e:	d130      	bne.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002090:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800209c:	d038      	beq.n	8002110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2232      	movs	r2, #50	@ 0x32
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0c9b      	lsrs	r3, r3, #18
 80020c0:	3301      	adds	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c4:	e002      	b.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d8:	d102      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f2      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ec:	d110      	bne.n	8002110 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e00f      	b.n	8002112 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fe:	d007      	beq.n	8002110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002100:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002108:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40007000 	.word	0x40007000
 8002124:	20000140 	.word	0x20000140
 8002128:	431bde83 	.word	0x431bde83

0800212c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e3ca      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	4b97      	ldr	r3, [pc, #604]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002148:	4b94      	ldr	r3, [pc, #592]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80e4 	beq.w	8002328 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_RCC_OscConfig+0x4a>
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	f040 808b 	bne.w	8002284 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 8087 	bne.w	8002284 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002176:	4b89      	ldr	r3, [pc, #548]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e3a2      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	4b82      	ldr	r3, [pc, #520]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <HAL_RCC_OscConfig+0x7c>
 800219e:	4b7f      	ldr	r3, [pc, #508]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_OscConfig+0x88>
 80021a8:	4b7c      	ldr	r3, [pc, #496]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d223      	bcs.n	8002200 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fd1d 	bl	8002bfc <RCC_SetFlashLatencyFromMSIRange>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e383      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021cc:	4b73      	ldr	r3, [pc, #460]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a72      	ldr	r2, [pc, #456]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b70      	ldr	r3, [pc, #448]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	496d      	ldr	r1, [pc, #436]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ea:	4b6c      	ldr	r3, [pc, #432]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	4968      	ldr	r1, [pc, #416]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
 80021fe:	e025      	b.n	800224c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002200:	4b66      	ldr	r3, [pc, #408]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a65      	ldr	r2, [pc, #404]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4960      	ldr	r1, [pc, #384]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800221e:	4b5f      	ldr	r3, [pc, #380]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	495b      	ldr	r1, [pc, #364]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fcdd 	bl	8002bfc <RCC_SetFlashLatencyFromMSIRange>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e343      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800224c:	f000 fc4a 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b52      	ldr	r3, [pc, #328]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	4950      	ldr	r1, [pc, #320]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	4a4e      	ldr	r2, [pc, #312]	@ (80023a4 <HAL_RCC_OscConfig+0x278>)
 800226a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800226c:	4b4e      	ldr	r3, [pc, #312]	@ (80023a8 <HAL_RCC_OscConfig+0x27c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fb67 	bl	8001944 <HAL_InitTick>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d052      	beq.n	8002326 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	e327      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d032      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800228c:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a42      	ldr	r2, [pc, #264]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002298:	f7ff fba4 	bl	80019e4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a0:	f7ff fba0 	bl	80019e4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e310      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a36      	ldr	r2, [pc, #216]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b34      	ldr	r3, [pc, #208]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4931      	ldr	r1, [pc, #196]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022dc:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	492c      	ldr	r1, [pc, #176]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
 80022f0:	e01a      	b.n	8002328 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022f2:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a29      	ldr	r2, [pc, #164]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022fe:	f7ff fb71 	bl	80019e4 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002306:	f7ff fb6d 	bl	80019e4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e2dd      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002318:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x1da>
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002326:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d074      	beq.n	800241e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b08      	cmp	r3, #8
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x21a>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d10e      	bne.n	800235e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d10b      	bne.n	800235e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d064      	beq.n	800241c <HAL_RCC_OscConfig+0x2f0>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d160      	bne.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e2ba      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x24a>
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e026      	b.n	80023c4 <HAL_RCC_OscConfig+0x298>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800237e:	d115      	bne.n	80023ac <HAL_RCC_OscConfig+0x280>
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a05      	ldr	r2, [pc, #20]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a02      	ldr	r2, [pc, #8]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e014      	b.n	80023c4 <HAL_RCC_OscConfig+0x298>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	08004704 	.word	0x08004704
 80023a4:	20000140 	.word	0x20000140
 80023a8:	20000144 	.word	0x20000144
 80023ac:	4ba0      	ldr	r3, [pc, #640]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a9f      	ldr	r2, [pc, #636]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b9d      	ldr	r3, [pc, #628]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a9c      	ldr	r2, [pc, #624]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff fb0a 	bl	80019e4 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fb06 	bl	80019e4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e276      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	4b92      	ldr	r3, [pc, #584]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x2a8>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff faf6 	bl	80019e4 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff faf2 	bl	80019e4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	@ 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e262      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240e:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x2d0>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d060      	beq.n	80024ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x310>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d119      	bne.n	800246a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d116      	bne.n	800246a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243c:	4b7c      	ldr	r3, [pc, #496]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_OscConfig+0x328>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e23f      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b76      	ldr	r3, [pc, #472]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	4973      	ldr	r1, [pc, #460]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002468:	e040      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d023      	beq.n	80024ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002472:	4b6f      	ldr	r3, [pc, #444]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6e      	ldr	r2, [pc, #440]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7ff fab1 	bl	80019e4 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002486:	f7ff faad 	bl	80019e4 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e21d      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002498:	4b65      	ldr	r3, [pc, #404]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b62      	ldr	r3, [pc, #392]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	495f      	ldr	r1, [pc, #380]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
 80024b8:	e018      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5c      	ldr	r2, [pc, #368]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff fa8d 	bl	80019e4 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff fa89 	bl	80019e4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e1f9      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03c      	beq.n	8002572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002500:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002506:	4a4a      	ldr	r2, [pc, #296]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7ff fa68 	bl	80019e4 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff fa64 	bl	80019e4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1d4      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 800252c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCC_OscConfig+0x3ec>
 8002538:	e01b      	b.n	8002572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253a:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 800253c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002540:	4a3b      	ldr	r2, [pc, #236]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7ff fa4b 	bl	80019e4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002552:	f7ff fa47 	bl	80019e4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1b7      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002564:	4b32      	ldr	r3, [pc, #200]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ef      	bne.n	8002552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80a6 	beq.w	80026cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002584:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	4a26      	ldr	r2, [pc, #152]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	@ 0x58
 800259c:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ac:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <HAL_RCC_OscConfig+0x508>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d118      	bne.n	80025ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_RCC_OscConfig+0x508>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <HAL_RCC_OscConfig+0x508>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c4:	f7ff fa0e 	bl	80019e4 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025cc:	f7ff fa0a 	bl	80019e4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e17a      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <HAL_RCC_OscConfig+0x508>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d108      	bne.n	8002604 <HAL_RCC_OscConfig+0x4d8>
 80025f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002602:	e029      	b.n	8002658 <HAL_RCC_OscConfig+0x52c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d115      	bne.n	8002638 <HAL_RCC_OscConfig+0x50c>
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	4a07      	ldr	r2, [pc, #28]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002622:	4a03      	ldr	r2, [pc, #12]	@ (8002630 <HAL_RCC_OscConfig+0x504>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x52c>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	4b9c      	ldr	r3, [pc, #624]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	4a9b      	ldr	r2, [pc, #620]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002648:	4b98      	ldr	r3, [pc, #608]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	4a97      	ldr	r2, [pc, #604]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d016      	beq.n	800268e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7ff f9c0 	bl	80019e4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	e00a      	b.n	800267e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7ff f9bc 	bl	80019e4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e12a      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267e:	4b8b      	ldr	r3, [pc, #556]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ed      	beq.n	8002668 <HAL_RCC_OscConfig+0x53c>
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7ff f9a9 	bl	80019e4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7ff f9a5 	bl	80019e4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e113      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ac:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ed      	bne.n	8002696 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ba:	7ffb      	ldrb	r3, [r7, #31]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b7a      	ldr	r3, [pc, #488]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	4a79      	ldr	r2, [pc, #484]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80fe 	beq.w	80028d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	2b02      	cmp	r3, #2
 80026dc:	f040 80d0 	bne.w	8002880 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026e0:	4b72      	ldr	r3, [pc, #456]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d130      	bne.n	8002756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	3b01      	subs	r3, #1
 8002700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d127      	bne.n	8002756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002710:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d11f      	bne.n	8002756 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002720:	2a07      	cmp	r2, #7
 8002722:	bf14      	ite	ne
 8002724:	2201      	movne	r2, #1
 8002726:	2200      	moveq	r2, #0
 8002728:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272a:	4293      	cmp	r3, r2
 800272c:	d113      	bne.n	8002756 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	3b01      	subs	r3, #1
 800273c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d109      	bne.n	8002756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d06e      	beq.n	8002834 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	d069      	beq.n	8002830 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002768:	4b50      	ldr	r3, [pc, #320]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0ad      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002778:	4b4c      	ldr	r3, [pc, #304]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4b      	ldr	r2, [pc, #300]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800277e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002784:	f7ff f92e 	bl	80019e4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7ff f92a 	bl	80019e4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e09a      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279e:	4b43      	ldr	r3, [pc, #268]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027aa:	4b40      	ldr	r3, [pc, #256]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	4b40      	ldr	r3, [pc, #256]	@ (80028b0 <HAL_RCC_OscConfig+0x784>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027ba:	3a01      	subs	r2, #1
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027c4:	0212      	lsls	r2, r2, #8
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027cc:	0852      	lsrs	r2, r2, #1
 80027ce:	3a01      	subs	r2, #1
 80027d0:	0552      	lsls	r2, r2, #21
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027d8:	0852      	lsrs	r2, r2, #1
 80027da:	3a01      	subs	r2, #1
 80027dc:	0652      	lsls	r2, r2, #25
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027e4:	0912      	lsrs	r2, r2, #4
 80027e6:	0452      	lsls	r2, r2, #17
 80027e8:	430a      	orrs	r2, r1
 80027ea:	4930      	ldr	r1, [pc, #192]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027f0:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2d      	ldr	r2, [pc, #180]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027fc:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a2a      	ldr	r2, [pc, #168]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002808:	f7ff f8ec 	bl	80019e4 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7ff f8e8 	bl	80019e4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e058      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282e:	e050      	b.n	80028d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e04f      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d148      	bne.n	80028d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800284c:	4b17      	ldr	r3, [pc, #92]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a16      	ldr	r2, [pc, #88]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002858:	f7ff f8c4 	bl	80019e4 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff f8c0 	bl	80019e4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e030      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x734>
 800287e:	e028      	b.n	80028d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d023      	beq.n	80028ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a08      	ldr	r2, [pc, #32]	@ (80028ac <HAL_RCC_OscConfig+0x780>)
 800288c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7ff f8a7 	bl	80019e4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	e00c      	b.n	80028b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7ff f8a3 	bl	80019e4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d905      	bls.n	80028b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e013      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
 80028ac:	40021000 	.word	0x40021000
 80028b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HAL_RCC_OscConfig+0x7b0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ec      	bne.n	800289a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_RCC_OscConfig+0x7b0>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4905      	ldr	r1, [pc, #20]	@ (80028dc <HAL_RCC_OscConfig+0x7b0>)
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_RCC_OscConfig+0x7b4>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
 80028cc:	e001      	b.n	80028d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	feeefffc 	.word	0xfeeefffc

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0e7      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b75      	ldr	r3, [pc, #468]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b72      	ldr	r3, [pc, #456]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4970      	ldr	r1, [pc, #448]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0cf      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d010      	beq.n	8002956 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	4b66      	ldr	r3, [pc, #408]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002940:	429a      	cmp	r2, r3
 8002942:	d908      	bls.n	8002956 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b63      	ldr	r3, [pc, #396]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4960      	ldr	r1, [pc, #384]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04c      	beq.n	80029fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d121      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0a6      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002982:	4b54      	ldr	r3, [pc, #336]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d115      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e09a      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800299a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e08e      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e086      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b46      	ldr	r3, [pc, #280]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4943      	ldr	r1, [pc, #268]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7ff f80a 	bl	80019e4 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7ff f806 	bl	80019e4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e06e      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d208      	bcs.n	8002a2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	492b      	ldr	r1, [pc, #172]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d210      	bcs.n	8002a5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a38:	4b25      	ldr	r3, [pc, #148]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 0207 	bic.w	r2, r3, #7
 8002a40:	4923      	ldr	r1, [pc, #140]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e036      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4918      	ldr	r1, [pc, #96]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4910      	ldr	r1, [pc, #64]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a98:	f000 f824 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	490b      	ldr	r1, [pc, #44]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1f4>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <HAL_RCC_ClockConfig+0x1f8>)
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1fc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe ff41 	bl	8001944 <HAL_InitTick>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08004704 	.word	0x08004704
 8002adc:	20000140 	.word	0x20000140
 8002ae0:	20000144 	.word	0x20000144

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d121      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d11e      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b18:	4b34      	ldr	r3, [pc, #208]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b24:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e005      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b34:	4b2d      	ldr	r3, [pc, #180]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b40:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	e004      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b68:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d134      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b72:	4b1e      	ldr	r3, [pc, #120]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d003      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0xac>
 8002b88:	e005      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b8c:	617b      	str	r3, [r7, #20]
      break;
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b92:	617b      	str	r3, [r7, #20]
      break;
 8002b94:	e002      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	617b      	str	r3, [r7, #20]
      break;
 8002b9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002baa:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	fb03 f202 	mul.w	r2, r3, r2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	0e5b      	lsrs	r3, r3, #25
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08004714 	.word	0x08004714
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	007a1200 	.word	0x007a1200

08002bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c14:	f7ff fa26 	bl	8002064 <HAL_PWREx_GetVoltageRange>
 8002c18:	6178      	str	r0, [r7, #20]
 8002c1a:	e014      	b.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	4a24      	ldr	r2, [pc, #144]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c28:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c34:	f7ff fa16 	bl	8002064 <HAL_PWREx_GetVoltageRange>
 8002c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c4c:	d10b      	bne.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b80      	cmp	r3, #128	@ 0x80
 8002c52:	d919      	bls.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c58:	d902      	bls.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e013      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e010      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	@ 0x80
 8002c6a:	d902      	bls.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	e00a      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b80      	cmp	r3, #128	@ 0x80
 8002c76:	d102      	bne.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c78:	2302      	movs	r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e004      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b70      	cmp	r3, #112	@ 0x70
 8002c82:	d101      	bne.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c84:	2301      	movs	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 0207 	bic.w	r2, r3, #7
 8002c90:	4909      	ldr	r1, [pc, #36]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40022000 	.word	0x40022000

08002cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e095      	b.n	8002dfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cde:	d009      	beq.n	8002cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
 8002ce6:	e005      	b.n	8002cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fc12 	bl	8001538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d34:	d902      	bls.n	8002d3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e002      	b.n	8002d42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d4a:	d007      	beq.n	8002d5c <HAL_SPI_Init+0xa0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d54:	d002      	beq.n	8002d5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	ea42 0103 	orr.w	r1, r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	f003 0204 	and.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002dd8:	ea42 0103 	orr.w	r1, r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b088      	sub	sp, #32
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_SPI_Transmit+0x22>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e15f      	b.n	80030e4 <HAL_SPI_Transmit+0x2e2>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2c:	f7fe fdda 	bl	80019e4 <HAL_GetTick>
 8002e30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
 8002e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e46:	e148      	b.n	80030da <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_Transmit+0x52>
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e58:	e13f      	b.n	80030da <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ec4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d007      	beq.n	8002ee4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eec:	d94f      	bls.n	8002f8e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_SPI_Transmit+0xfa>
 8002ef6:	8afb      	ldrh	r3, [r7, #22]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d142      	bne.n	8002f82 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f20:	e02f      	b.n	8002f82 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d112      	bne.n	8002f56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f40:	1c9a      	adds	r2, r3, #2
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f54:	e015      	b.n	8002f82 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f56:	f7fe fd45 	bl	80019e4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d803      	bhi.n	8002f6e <HAL_SPI_Transmit+0x16c>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f6c:	d102      	bne.n	8002f74 <HAL_SPI_Transmit+0x172>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f80:	e0ab      	b.n	80030da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ca      	bne.n	8002f22 <HAL_SPI_Transmit+0x120>
 8002f8c:	e080      	b.n	8003090 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_SPI_Transmit+0x19a>
 8002f96:	8afb      	ldrh	r3, [r7, #22]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d174      	bne.n	8003086 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d912      	bls.n	8002fcc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	881a      	ldrh	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	1c9a      	adds	r2, r3, #2
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b02      	subs	r3, #2
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fca:	e05c      	b.n	8003086 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ff2:	e048      	b.n	8003086 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d12b      	bne.n	800305a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d912      	bls.n	8003032 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003010:	881a      	ldrh	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	1c9a      	adds	r2, r3, #2
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b02      	subs	r3, #2
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003030:	e029      	b.n	8003086 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	7812      	ldrb	r2, [r2, #0]
 800303e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003058:	e015      	b.n	8003086 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800305a:	f7fe fcc3 	bl	80019e4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d803      	bhi.n	8003072 <HAL_SPI_Transmit+0x270>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003070:	d102      	bne.n	8003078 <HAL_SPI_Transmit+0x276>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003084:	e029      	b.n	80030da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1b1      	bne.n	8002ff4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	6839      	ldr	r1, [r7, #0]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fb69 	bl	800376c <SPI_EndRxTxTransaction>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e003      	b.n	80030da <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	@ 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030fa:	2301      	movs	r3, #1
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_SPI_TransmitReceive+0x26>
 800310e:	2302      	movs	r3, #2
 8003110:	e20a      	b.n	8003528 <HAL_SPI_TransmitReceive+0x43c>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800311a:	f7fe fc63 	bl	80019e4 <HAL_GetTick>
 800311e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003126:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003136:	7efb      	ldrb	r3, [r7, #27]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00e      	beq.n	800315a <HAL_SPI_TransmitReceive+0x6e>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003142:	d106      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x66>
 800314c:	7efb      	ldrb	r3, [r7, #27]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d003      	beq.n	800315a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003158:	e1e0      	b.n	800351c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_SPI_TransmitReceive+0x80>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_SPI_TransmitReceive+0x80>
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003172:	e1d3      	b.n	800351c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b04      	cmp	r3, #4
 800317e:	d003      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2205      	movs	r2, #5
 8003184:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	887a      	ldrh	r2, [r7, #2]
 80031ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031ca:	d802      	bhi.n	80031d2 <HAL_SPI_TransmitReceive+0xe6>
 80031cc:	8a3b      	ldrh	r3, [r7, #16]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d908      	bls.n	80031e4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	e007      	b.n	80031f4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b40      	cmp	r3, #64	@ 0x40
 8003200:	d007      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003210:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800321a:	f240 8081 	bls.w	8003320 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SPI_TransmitReceive+0x140>
 8003226:	8a7b      	ldrh	r3, [r7, #18]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d16d      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003250:	e05a      	b.n	8003308 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11b      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x1ac>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d016      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x1ac>
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	2b01      	cmp	r3, #1
 800326e:	d113      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003274:	881a      	ldrh	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d11c      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x1f4>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	b292      	uxth	r2, r2
 80032be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	1c9a      	adds	r2, r3, #2
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032dc:	2301      	movs	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032e0:	f7fe fb80 	bl	80019e4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d80b      	bhi.n	8003308 <HAL_SPI_TransmitReceive+0x21c>
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f6:	d007      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003306:	e109      	b.n	800351c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d19f      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x166>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d199      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x166>
 800331e:	e0e3      	b.n	80034e8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x244>
 8003328:	8a7b      	ldrh	r3, [r7, #18]
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 80cf 	bne.w	80034ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d912      	bls.n	8003360 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334a:	1c9a      	adds	r2, r3, #2
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b02      	subs	r3, #2
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800335e:	e0b6      	b.n	80034ce <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003386:	e0a2      	b.n	80034ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d134      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x314>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02f      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x314>
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d12c      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d912      	bls.n	80033d6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	1c9a      	adds	r2, r3, #2
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b02      	subs	r3, #2
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033d4:	e012      	b.n	80033fc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d148      	bne.n	80034a0 <HAL_SPI_TransmitReceive+0x3b4>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d042      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d923      	bls.n	800346e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	b292      	uxth	r2, r2
 8003432:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	1c9a      	adds	r2, r3, #2
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b02      	subs	r3, #2
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d81f      	bhi.n	800349c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	e016      	b.n	800349c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f103 020c 	add.w	r2, r3, #12
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034a0:	f7fe faa0 	bl	80019e4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d803      	bhi.n	80034b8 <HAL_SPI_TransmitReceive+0x3cc>
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b6:	d102      	bne.n	80034be <HAL_SPI_TransmitReceive+0x3d2>
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034cc:	e026      	b.n	800351c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f af57 	bne.w	8003388 <HAL_SPI_TransmitReceive+0x29c>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f47f af50 	bne.w	8003388 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f93d 	bl	800376c <SPI_EndRxTxTransaction>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e003      	b.n	800351c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003524:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003528:	4618      	mov	r0, r3
 800352a:	3728      	adds	r7, #40	@ 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003540:	f7fe fa50 	bl	80019e4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003550:	f7fe fa48 	bl	80019e4 <HAL_GetTick>
 8003554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003556:	4b39      	ldr	r3, [pc, #228]	@ (800363c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	015b      	lsls	r3, r3, #5
 800355c:	0d1b      	lsrs	r3, r3, #20
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003566:	e054      	b.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800356e:	d050      	beq.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003570:	f7fe fa38 	bl	80019e4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	429a      	cmp	r2, r3
 800357e:	d902      	bls.n	8003586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d13d      	bne.n	8003602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800359e:	d111      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a8:	d004      	beq.n	80035b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b2:	d107      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035cc:	d10f      	bne.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e017      	b.n	8003632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3b01      	subs	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	429a      	cmp	r2, r3
 800362e:	d19b      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000140 	.word	0x20000140

08003640 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003652:	f7fe f9c7 	bl	80019e4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4413      	add	r3, r2
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003662:	f7fe f9bf 	bl	80019e4 <HAL_GetTick>
 8003666:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003670:	4b3d      	ldr	r3, [pc, #244]	@ (8003768 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00da      	lsls	r2, r3, #3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	0d1b      	lsrs	r3, r3, #20
 8003680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003688:	e060      	b.n	800374c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003690:	d107      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036a8:	d050      	beq.n	800374c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036aa:	f7fe f99b 	bl	80019e4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d902      	bls.n	80036c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d13d      	bne.n	800373c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d8:	d111      	bne.n	80036fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e2:	d004      	beq.n	80036ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ec:	d107      	bne.n	80036fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003706:	d10f      	bne.n	8003728 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003726:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e010      	b.n	800375e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	3b01      	subs	r3, #1
 800374a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d196      	bne.n	800368a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3728      	adds	r7, #40	@ 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000140 	.word	0x20000140

0800376c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff ff5b 	bl	8003640 <SPI_WaitFifoStateUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e027      	b.n	80037f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	2180      	movs	r1, #128	@ 0x80
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff fec0 	bl	8003530 <SPI_WaitFlagStateUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e014      	b.n	80037f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff ff34 	bl	8003640 <SPI_WaitFifoStateUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e000      	b.n	80037f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <malloc>:
 80037f8:	4b02      	ldr	r3, [pc, #8]	@ (8003804 <malloc+0xc>)
 80037fa:	4601      	mov	r1, r0
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	f000 b82d 	b.w	800385c <_malloc_r>
 8003802:	bf00      	nop
 8003804:	20000158 	.word	0x20000158

08003808 <free>:
 8003808:	4b02      	ldr	r3, [pc, #8]	@ (8003814 <free+0xc>)
 800380a:	4601      	mov	r1, r0
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	f000 b9d9 	b.w	8003bc4 <_free_r>
 8003812:	bf00      	nop
 8003814:	20000158 	.word	0x20000158

08003818 <sbrk_aligned>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4e0f      	ldr	r6, [pc, #60]	@ (8003858 <sbrk_aligned+0x40>)
 800381c:	460c      	mov	r4, r1
 800381e:	6831      	ldr	r1, [r6, #0]
 8003820:	4605      	mov	r5, r0
 8003822:	b911      	cbnz	r1, 800382a <sbrk_aligned+0x12>
 8003824:	f000 f982 	bl	8003b2c <_sbrk_r>
 8003828:	6030      	str	r0, [r6, #0]
 800382a:	4621      	mov	r1, r4
 800382c:	4628      	mov	r0, r5
 800382e:	f000 f97d 	bl	8003b2c <_sbrk_r>
 8003832:	1c43      	adds	r3, r0, #1
 8003834:	d103      	bne.n	800383e <sbrk_aligned+0x26>
 8003836:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800383a:	4620      	mov	r0, r4
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	1cc4      	adds	r4, r0, #3
 8003840:	f024 0403 	bic.w	r4, r4, #3
 8003844:	42a0      	cmp	r0, r4
 8003846:	d0f8      	beq.n	800383a <sbrk_aligned+0x22>
 8003848:	1a21      	subs	r1, r4, r0
 800384a:	4628      	mov	r0, r5
 800384c:	f000 f96e 	bl	8003b2c <_sbrk_r>
 8003850:	3001      	adds	r0, #1
 8003852:	d1f2      	bne.n	800383a <sbrk_aligned+0x22>
 8003854:	e7ef      	b.n	8003836 <sbrk_aligned+0x1e>
 8003856:	bf00      	nop
 8003858:	2000035c 	.word	0x2000035c

0800385c <_malloc_r>:
 800385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003860:	1ccd      	adds	r5, r1, #3
 8003862:	f025 0503 	bic.w	r5, r5, #3
 8003866:	3508      	adds	r5, #8
 8003868:	2d0c      	cmp	r5, #12
 800386a:	bf38      	it	cc
 800386c:	250c      	movcc	r5, #12
 800386e:	2d00      	cmp	r5, #0
 8003870:	4606      	mov	r6, r0
 8003872:	db01      	blt.n	8003878 <_malloc_r+0x1c>
 8003874:	42a9      	cmp	r1, r5
 8003876:	d904      	bls.n	8003882 <_malloc_r+0x26>
 8003878:	230c      	movs	r3, #12
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	2000      	movs	r0, #0
 800387e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003958 <_malloc_r+0xfc>
 8003886:	f000 f869 	bl	800395c <__malloc_lock>
 800388a:	f8d8 3000 	ldr.w	r3, [r8]
 800388e:	461c      	mov	r4, r3
 8003890:	bb44      	cbnz	r4, 80038e4 <_malloc_r+0x88>
 8003892:	4629      	mov	r1, r5
 8003894:	4630      	mov	r0, r6
 8003896:	f7ff ffbf 	bl	8003818 <sbrk_aligned>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	4604      	mov	r4, r0
 800389e:	d158      	bne.n	8003952 <_malloc_r+0xf6>
 80038a0:	f8d8 4000 	ldr.w	r4, [r8]
 80038a4:	4627      	mov	r7, r4
 80038a6:	2f00      	cmp	r7, #0
 80038a8:	d143      	bne.n	8003932 <_malloc_r+0xd6>
 80038aa:	2c00      	cmp	r4, #0
 80038ac:	d04b      	beq.n	8003946 <_malloc_r+0xea>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	4639      	mov	r1, r7
 80038b2:	4630      	mov	r0, r6
 80038b4:	eb04 0903 	add.w	r9, r4, r3
 80038b8:	f000 f938 	bl	8003b2c <_sbrk_r>
 80038bc:	4581      	cmp	r9, r0
 80038be:	d142      	bne.n	8003946 <_malloc_r+0xea>
 80038c0:	6821      	ldr	r1, [r4, #0]
 80038c2:	1a6d      	subs	r5, r5, r1
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7ff ffa6 	bl	8003818 <sbrk_aligned>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d03a      	beq.n	8003946 <_malloc_r+0xea>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	442b      	add	r3, r5
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f8d8 3000 	ldr.w	r3, [r8]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	bb62      	cbnz	r2, 8003938 <_malloc_r+0xdc>
 80038de:	f8c8 7000 	str.w	r7, [r8]
 80038e2:	e00f      	b.n	8003904 <_malloc_r+0xa8>
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	1b52      	subs	r2, r2, r5
 80038e8:	d420      	bmi.n	800392c <_malloc_r+0xd0>
 80038ea:	2a0b      	cmp	r2, #11
 80038ec:	d917      	bls.n	800391e <_malloc_r+0xc2>
 80038ee:	1961      	adds	r1, r4, r5
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	6025      	str	r5, [r4, #0]
 80038f4:	bf18      	it	ne
 80038f6:	6059      	strne	r1, [r3, #4]
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	bf08      	it	eq
 80038fc:	f8c8 1000 	streq.w	r1, [r8]
 8003900:	5162      	str	r2, [r4, r5]
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	4630      	mov	r0, r6
 8003906:	f000 f82f 	bl	8003968 <__malloc_unlock>
 800390a:	f104 000b 	add.w	r0, r4, #11
 800390e:	1d23      	adds	r3, r4, #4
 8003910:	f020 0007 	bic.w	r0, r0, #7
 8003914:	1ac2      	subs	r2, r0, r3
 8003916:	bf1c      	itt	ne
 8003918:	1a1b      	subne	r3, r3, r0
 800391a:	50a3      	strne	r3, [r4, r2]
 800391c:	e7af      	b.n	800387e <_malloc_r+0x22>
 800391e:	6862      	ldr	r2, [r4, #4]
 8003920:	42a3      	cmp	r3, r4
 8003922:	bf0c      	ite	eq
 8003924:	f8c8 2000 	streq.w	r2, [r8]
 8003928:	605a      	strne	r2, [r3, #4]
 800392a:	e7eb      	b.n	8003904 <_malloc_r+0xa8>
 800392c:	4623      	mov	r3, r4
 800392e:	6864      	ldr	r4, [r4, #4]
 8003930:	e7ae      	b.n	8003890 <_malloc_r+0x34>
 8003932:	463c      	mov	r4, r7
 8003934:	687f      	ldr	r7, [r7, #4]
 8003936:	e7b6      	b.n	80038a6 <_malloc_r+0x4a>
 8003938:	461a      	mov	r2, r3
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	42a3      	cmp	r3, r4
 800393e:	d1fb      	bne.n	8003938 <_malloc_r+0xdc>
 8003940:	2300      	movs	r3, #0
 8003942:	6053      	str	r3, [r2, #4]
 8003944:	e7de      	b.n	8003904 <_malloc_r+0xa8>
 8003946:	230c      	movs	r3, #12
 8003948:	6033      	str	r3, [r6, #0]
 800394a:	4630      	mov	r0, r6
 800394c:	f000 f80c 	bl	8003968 <__malloc_unlock>
 8003950:	e794      	b.n	800387c <_malloc_r+0x20>
 8003952:	6005      	str	r5, [r0, #0]
 8003954:	e7d6      	b.n	8003904 <_malloc_r+0xa8>
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360

0800395c <__malloc_lock>:
 800395c:	4801      	ldr	r0, [pc, #4]	@ (8003964 <__malloc_lock+0x8>)
 800395e:	f000 b920 	b.w	8003ba2 <__retarget_lock_acquire_recursive>
 8003962:	bf00      	nop
 8003964:	200004a0 	.word	0x200004a0

08003968 <__malloc_unlock>:
 8003968:	4801      	ldr	r0, [pc, #4]	@ (8003970 <__malloc_unlock+0x8>)
 800396a:	f000 b91b 	b.w	8003ba4 <__retarget_lock_release_recursive>
 800396e:	bf00      	nop
 8003970:	200004a0 	.word	0x200004a0

08003974 <std>:
 8003974:	2300      	movs	r3, #0
 8003976:	b510      	push	{r4, lr}
 8003978:	4604      	mov	r4, r0
 800397a:	e9c0 3300 	strd	r3, r3, [r0]
 800397e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003982:	6083      	str	r3, [r0, #8]
 8003984:	8181      	strh	r1, [r0, #12]
 8003986:	6643      	str	r3, [r0, #100]	@ 0x64
 8003988:	81c2      	strh	r2, [r0, #14]
 800398a:	6183      	str	r3, [r0, #24]
 800398c:	4619      	mov	r1, r3
 800398e:	2208      	movs	r2, #8
 8003990:	305c      	adds	r0, #92	@ 0x5c
 8003992:	f000 f8c3 	bl	8003b1c <memset>
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <std+0x58>)
 8003998:	6263      	str	r3, [r4, #36]	@ 0x24
 800399a:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <std+0x5c>)
 800399c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <std+0x60>)
 80039a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <std+0x64>)
 80039a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <std+0x68>)
 80039a8:	6224      	str	r4, [r4, #32]
 80039aa:	429c      	cmp	r4, r3
 80039ac:	d006      	beq.n	80039bc <std+0x48>
 80039ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039b2:	4294      	cmp	r4, r2
 80039b4:	d002      	beq.n	80039bc <std+0x48>
 80039b6:	33d0      	adds	r3, #208	@ 0xd0
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d105      	bne.n	80039c8 <std+0x54>
 80039bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c4:	f000 b8ec 	b.w	8003ba0 <__retarget_lock_init_recursive>
 80039c8:	bd10      	pop	{r4, pc}
 80039ca:	bf00      	nop
 80039cc:	08004351 	.word	0x08004351
 80039d0:	08004373 	.word	0x08004373
 80039d4:	080043ab 	.word	0x080043ab
 80039d8:	080043cf 	.word	0x080043cf
 80039dc:	20000364 	.word	0x20000364

080039e0 <stdio_exit_handler>:
 80039e0:	4a02      	ldr	r2, [pc, #8]	@ (80039ec <stdio_exit_handler+0xc>)
 80039e2:	4903      	ldr	r1, [pc, #12]	@ (80039f0 <stdio_exit_handler+0x10>)
 80039e4:	4803      	ldr	r0, [pc, #12]	@ (80039f4 <stdio_exit_handler+0x14>)
 80039e6:	f000 b869 	b.w	8003abc <_fwalk_sglue>
 80039ea:	bf00      	nop
 80039ec:	2000014c 	.word	0x2000014c
 80039f0:	08004301 	.word	0x08004301
 80039f4:	2000015c 	.word	0x2000015c

080039f8 <cleanup_stdio>:
 80039f8:	6841      	ldr	r1, [r0, #4]
 80039fa:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <cleanup_stdio+0x34>)
 80039fc:	4299      	cmp	r1, r3
 80039fe:	b510      	push	{r4, lr}
 8003a00:	4604      	mov	r4, r0
 8003a02:	d001      	beq.n	8003a08 <cleanup_stdio+0x10>
 8003a04:	f000 fc7c 	bl	8004300 <_fflush_r>
 8003a08:	68a1      	ldr	r1, [r4, #8]
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <cleanup_stdio+0x38>)
 8003a0c:	4299      	cmp	r1, r3
 8003a0e:	d002      	beq.n	8003a16 <cleanup_stdio+0x1e>
 8003a10:	4620      	mov	r0, r4
 8003a12:	f000 fc75 	bl	8004300 <_fflush_r>
 8003a16:	68e1      	ldr	r1, [r4, #12]
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <cleanup_stdio+0x3c>)
 8003a1a:	4299      	cmp	r1, r3
 8003a1c:	d004      	beq.n	8003a28 <cleanup_stdio+0x30>
 8003a1e:	4620      	mov	r0, r4
 8003a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a24:	f000 bc6c 	b.w	8004300 <_fflush_r>
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000364 	.word	0x20000364
 8003a30:	200003cc 	.word	0x200003cc
 8003a34:	20000434 	.word	0x20000434

08003a38 <global_stdio_init.part.0>:
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <global_stdio_init.part.0+0x30>)
 8003a3c:	4c0b      	ldr	r4, [pc, #44]	@ (8003a6c <global_stdio_init.part.0+0x34>)
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <global_stdio_init.part.0+0x38>)
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	4620      	mov	r0, r4
 8003a44:	2200      	movs	r2, #0
 8003a46:	2104      	movs	r1, #4
 8003a48:	f7ff ff94 	bl	8003974 <std>
 8003a4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a50:	2201      	movs	r2, #1
 8003a52:	2109      	movs	r1, #9
 8003a54:	f7ff ff8e 	bl	8003974 <std>
 8003a58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a62:	2112      	movs	r1, #18
 8003a64:	f7ff bf86 	b.w	8003974 <std>
 8003a68:	2000049c 	.word	0x2000049c
 8003a6c:	20000364 	.word	0x20000364
 8003a70:	080039e1 	.word	0x080039e1

08003a74 <__sfp_lock_acquire>:
 8003a74:	4801      	ldr	r0, [pc, #4]	@ (8003a7c <__sfp_lock_acquire+0x8>)
 8003a76:	f000 b894 	b.w	8003ba2 <__retarget_lock_acquire_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	200004a1 	.word	0x200004a1

08003a80 <__sfp_lock_release>:
 8003a80:	4801      	ldr	r0, [pc, #4]	@ (8003a88 <__sfp_lock_release+0x8>)
 8003a82:	f000 b88f 	b.w	8003ba4 <__retarget_lock_release_recursive>
 8003a86:	bf00      	nop
 8003a88:	200004a1 	.word	0x200004a1

08003a8c <__sinit>:
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	4604      	mov	r4, r0
 8003a90:	f7ff fff0 	bl	8003a74 <__sfp_lock_acquire>
 8003a94:	6a23      	ldr	r3, [r4, #32]
 8003a96:	b11b      	cbz	r3, 8003aa0 <__sinit+0x14>
 8003a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a9c:	f7ff bff0 	b.w	8003a80 <__sfp_lock_release>
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <__sinit+0x28>)
 8003aa2:	6223      	str	r3, [r4, #32]
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <__sinit+0x2c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f5      	bne.n	8003a98 <__sinit+0xc>
 8003aac:	f7ff ffc4 	bl	8003a38 <global_stdio_init.part.0>
 8003ab0:	e7f2      	b.n	8003a98 <__sinit+0xc>
 8003ab2:	bf00      	nop
 8003ab4:	080039f9 	.word	0x080039f9
 8003ab8:	2000049c 	.word	0x2000049c

08003abc <_fwalk_sglue>:
 8003abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	4688      	mov	r8, r1
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003acc:	f1b9 0901 	subs.w	r9, r9, #1
 8003ad0:	d505      	bpl.n	8003ade <_fwalk_sglue+0x22>
 8003ad2:	6824      	ldr	r4, [r4, #0]
 8003ad4:	2c00      	cmp	r4, #0
 8003ad6:	d1f7      	bne.n	8003ac8 <_fwalk_sglue+0xc>
 8003ad8:	4630      	mov	r0, r6
 8003ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ade:	89ab      	ldrh	r3, [r5, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d907      	bls.n	8003af4 <_fwalk_sglue+0x38>
 8003ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	d003      	beq.n	8003af4 <_fwalk_sglue+0x38>
 8003aec:	4629      	mov	r1, r5
 8003aee:	4638      	mov	r0, r7
 8003af0:	47c0      	blx	r8
 8003af2:	4306      	orrs	r6, r0
 8003af4:	3568      	adds	r5, #104	@ 0x68
 8003af6:	e7e9      	b.n	8003acc <_fwalk_sglue+0x10>

08003af8 <iprintf>:
 8003af8:	b40f      	push	{r0, r1, r2, r3}
 8003afa:	b507      	push	{r0, r1, r2, lr}
 8003afc:	4906      	ldr	r1, [pc, #24]	@ (8003b18 <iprintf+0x20>)
 8003afe:	ab04      	add	r3, sp, #16
 8003b00:	6808      	ldr	r0, [r1, #0]
 8003b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b06:	6881      	ldr	r1, [r0, #8]
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	f000 f8cf 	bl	8003cac <_vfiprintf_r>
 8003b0e:	b003      	add	sp, #12
 8003b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b14:	b004      	add	sp, #16
 8003b16:	4770      	bx	lr
 8003b18:	20000158 	.word	0x20000158

08003b1c <memset>:
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <_sbrk_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4d06      	ldr	r5, [pc, #24]	@ (8003b48 <_sbrk_r+0x1c>)
 8003b30:	2300      	movs	r3, #0
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	f7fd fd9c 	bl	8001674 <_sbrk>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d102      	bne.n	8003b46 <_sbrk_r+0x1a>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	b103      	cbz	r3, 8003b46 <_sbrk_r+0x1a>
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	200004a4 	.word	0x200004a4

08003b4c <__errno>:
 8003b4c:	4b01      	ldr	r3, [pc, #4]	@ (8003b54 <__errno+0x8>)
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000158 	.word	0x20000158

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b90 <__libc_init_array+0x38>)
 8003b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003b94 <__libc_init_array+0x3c>)
 8003b5e:	1b64      	subs	r4, r4, r5
 8003b60:	10a4      	asrs	r4, r4, #2
 8003b62:	2600      	movs	r6, #0
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	4d0b      	ldr	r5, [pc, #44]	@ (8003b98 <__libc_init_array+0x40>)
 8003b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b9c <__libc_init_array+0x44>)
 8003b6c:	f000 fd92 	bl	8004694 <_init>
 8003b70:	1b64      	subs	r4, r4, r5
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	2600      	movs	r6, #0
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	08004780 	.word	0x08004780
 8003b94:	08004780 	.word	0x08004780
 8003b98:	08004780 	.word	0x08004780
 8003b9c:	08004784 	.word	0x08004784

08003ba0 <__retarget_lock_init_recursive>:
 8003ba0:	4770      	bx	lr

08003ba2 <__retarget_lock_acquire_recursive>:
 8003ba2:	4770      	bx	lr

08003ba4 <__retarget_lock_release_recursive>:
 8003ba4:	4770      	bx	lr

08003ba6 <memcpy>:
 8003ba6:	440a      	add	r2, r1
 8003ba8:	4291      	cmp	r1, r2
 8003baa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003bae:	d100      	bne.n	8003bb2 <memcpy+0xc>
 8003bb0:	4770      	bx	lr
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bbc:	4291      	cmp	r1, r2
 8003bbe:	d1f9      	bne.n	8003bb4 <memcpy+0xe>
 8003bc0:	bd10      	pop	{r4, pc}
	...

08003bc4 <_free_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d041      	beq.n	8003c50 <_free_r+0x8c>
 8003bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd0:	1f0c      	subs	r4, r1, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bfb8      	it	lt
 8003bd6:	18e4      	addlt	r4, r4, r3
 8003bd8:	f7ff fec0 	bl	800395c <__malloc_lock>
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <_free_r+0x90>)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	b933      	cbnz	r3, 8003bf0 <_free_r+0x2c>
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	6014      	str	r4, [r2, #0]
 8003be6:	4628      	mov	r0, r5
 8003be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bec:	f7ff bebc 	b.w	8003968 <__malloc_unlock>
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	d908      	bls.n	8003c06 <_free_r+0x42>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	1821      	adds	r1, r4, r0
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	bf01      	itttt	eq
 8003bfc:	6819      	ldreq	r1, [r3, #0]
 8003bfe:	685b      	ldreq	r3, [r3, #4]
 8003c00:	1809      	addeq	r1, r1, r0
 8003c02:	6021      	streq	r1, [r4, #0]
 8003c04:	e7ed      	b.n	8003be2 <_free_r+0x1e>
 8003c06:	461a      	mov	r2, r3
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b10b      	cbz	r3, 8003c10 <_free_r+0x4c>
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	d9fa      	bls.n	8003c06 <_free_r+0x42>
 8003c10:	6811      	ldr	r1, [r2, #0]
 8003c12:	1850      	adds	r0, r2, r1
 8003c14:	42a0      	cmp	r0, r4
 8003c16:	d10b      	bne.n	8003c30 <_free_r+0x6c>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	4401      	add	r1, r0
 8003c1c:	1850      	adds	r0, r2, r1
 8003c1e:	4283      	cmp	r3, r0
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	d1e0      	bne.n	8003be6 <_free_r+0x22>
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	6053      	str	r3, [r2, #4]
 8003c2a:	4408      	add	r0, r1
 8003c2c:	6010      	str	r0, [r2, #0]
 8003c2e:	e7da      	b.n	8003be6 <_free_r+0x22>
 8003c30:	d902      	bls.n	8003c38 <_free_r+0x74>
 8003c32:	230c      	movs	r3, #12
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	e7d6      	b.n	8003be6 <_free_r+0x22>
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	1821      	adds	r1, r4, r0
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf04      	itt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	6063      	str	r3, [r4, #4]
 8003c46:	bf04      	itt	eq
 8003c48:	1809      	addeq	r1, r1, r0
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	6054      	str	r4, [r2, #4]
 8003c4e:	e7ca      	b.n	8003be6 <_free_r+0x22>
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	bf00      	nop
 8003c54:	20000360 	.word	0x20000360

08003c58 <__sfputc_r>:
 8003c58:	6893      	ldr	r3, [r2, #8]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	b410      	push	{r4}
 8003c60:	6093      	str	r3, [r2, #8]
 8003c62:	da08      	bge.n	8003c76 <__sfputc_r+0x1e>
 8003c64:	6994      	ldr	r4, [r2, #24]
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	db01      	blt.n	8003c6e <__sfputc_r+0x16>
 8003c6a:	290a      	cmp	r1, #10
 8003c6c:	d103      	bne.n	8003c76 <__sfputc_r+0x1e>
 8003c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c72:	f000 bbb0 	b.w	80043d6 <__swbuf_r>
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	1c58      	adds	r0, r3, #1
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	7019      	strb	r1, [r3, #0]
 8003c7e:	4608      	mov	r0, r1
 8003c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <__sfputs_r>:
 8003c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c88:	4606      	mov	r6, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	18d5      	adds	r5, r2, r3
 8003c90:	42ac      	cmp	r4, r5
 8003c92:	d101      	bne.n	8003c98 <__sfputs_r+0x12>
 8003c94:	2000      	movs	r0, #0
 8003c96:	e007      	b.n	8003ca8 <__sfputs_r+0x22>
 8003c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9c:	463a      	mov	r2, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff ffda 	bl	8003c58 <__sfputc_r>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d1f3      	bne.n	8003c90 <__sfputs_r+0xa>
 8003ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cac <_vfiprintf_r>:
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	b09d      	sub	sp, #116	@ 0x74
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	4698      	mov	r8, r3
 8003cb8:	4606      	mov	r6, r0
 8003cba:	b118      	cbz	r0, 8003cc4 <_vfiprintf_r+0x18>
 8003cbc:	6a03      	ldr	r3, [r0, #32]
 8003cbe:	b90b      	cbnz	r3, 8003cc4 <_vfiprintf_r+0x18>
 8003cc0:	f7ff fee4 	bl	8003a8c <__sinit>
 8003cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cc6:	07d9      	lsls	r1, r3, #31
 8003cc8:	d405      	bmi.n	8003cd6 <_vfiprintf_r+0x2a>
 8003cca:	89ab      	ldrh	r3, [r5, #12]
 8003ccc:	059a      	lsls	r2, r3, #22
 8003cce:	d402      	bmi.n	8003cd6 <_vfiprintf_r+0x2a>
 8003cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cd2:	f7ff ff66 	bl	8003ba2 <__retarget_lock_acquire_recursive>
 8003cd6:	89ab      	ldrh	r3, [r5, #12]
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	d501      	bpl.n	8003ce0 <_vfiprintf_r+0x34>
 8003cdc:	692b      	ldr	r3, [r5, #16]
 8003cde:	b99b      	cbnz	r3, 8003d08 <_vfiprintf_r+0x5c>
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f000 fbb6 	bl	8004454 <__swsetup_r>
 8003ce8:	b170      	cbz	r0, 8003d08 <_vfiprintf_r+0x5c>
 8003cea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cec:	07dc      	lsls	r4, r3, #31
 8003cee:	d504      	bpl.n	8003cfa <_vfiprintf_r+0x4e>
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cf4:	b01d      	add	sp, #116	@ 0x74
 8003cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfa:	89ab      	ldrh	r3, [r5, #12]
 8003cfc:	0598      	lsls	r0, r3, #22
 8003cfe:	d4f7      	bmi.n	8003cf0 <_vfiprintf_r+0x44>
 8003d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d02:	f7ff ff4f 	bl	8003ba4 <__retarget_lock_release_recursive>
 8003d06:	e7f3      	b.n	8003cf0 <_vfiprintf_r+0x44>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d16:	2330      	movs	r3, #48	@ 0x30
 8003d18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ec8 <_vfiprintf_r+0x21c>
 8003d1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d20:	f04f 0901 	mov.w	r9, #1
 8003d24:	4623      	mov	r3, r4
 8003d26:	469a      	mov	sl, r3
 8003d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d2c:	b10a      	cbz	r2, 8003d32 <_vfiprintf_r+0x86>
 8003d2e:	2a25      	cmp	r2, #37	@ 0x25
 8003d30:	d1f9      	bne.n	8003d26 <_vfiprintf_r+0x7a>
 8003d32:	ebba 0b04 	subs.w	fp, sl, r4
 8003d36:	d00b      	beq.n	8003d50 <_vfiprintf_r+0xa4>
 8003d38:	465b      	mov	r3, fp
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ffa1 	bl	8003c86 <__sfputs_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	f000 80a7 	beq.w	8003e98 <_vfiprintf_r+0x1ec>
 8003d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d4c:	445a      	add	r2, fp
 8003d4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d50:	f89a 3000 	ldrb.w	r3, [sl]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 809f 	beq.w	8003e98 <_vfiprintf_r+0x1ec>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d64:	f10a 0a01 	add.w	sl, sl, #1
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	9307      	str	r3, [sp, #28]
 8003d6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d70:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d72:	4654      	mov	r4, sl
 8003d74:	2205      	movs	r2, #5
 8003d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7a:	4853      	ldr	r0, [pc, #332]	@ (8003ec8 <_vfiprintf_r+0x21c>)
 8003d7c:	f7fc fa28 	bl	80001d0 <memchr>
 8003d80:	9a04      	ldr	r2, [sp, #16]
 8003d82:	b9d8      	cbnz	r0, 8003dbc <_vfiprintf_r+0x110>
 8003d84:	06d1      	lsls	r1, r2, #27
 8003d86:	bf44      	itt	mi
 8003d88:	2320      	movmi	r3, #32
 8003d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d8e:	0713      	lsls	r3, r2, #28
 8003d90:	bf44      	itt	mi
 8003d92:	232b      	movmi	r3, #43	@ 0x2b
 8003d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d98:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d9e:	d015      	beq.n	8003dcc <_vfiprintf_r+0x120>
 8003da0:	9a07      	ldr	r2, [sp, #28]
 8003da2:	4654      	mov	r4, sl
 8003da4:	2000      	movs	r0, #0
 8003da6:	f04f 0c0a 	mov.w	ip, #10
 8003daa:	4621      	mov	r1, r4
 8003dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003db0:	3b30      	subs	r3, #48	@ 0x30
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d94b      	bls.n	8003e4e <_vfiprintf_r+0x1a2>
 8003db6:	b1b0      	cbz	r0, 8003de6 <_vfiprintf_r+0x13a>
 8003db8:	9207      	str	r2, [sp, #28]
 8003dba:	e014      	b.n	8003de6 <_vfiprintf_r+0x13a>
 8003dbc:	eba0 0308 	sub.w	r3, r0, r8
 8003dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	46a2      	mov	sl, r4
 8003dca:	e7d2      	b.n	8003d72 <_vfiprintf_r+0xc6>
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	1d19      	adds	r1, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	9103      	str	r1, [sp, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bfbb      	ittet	lt
 8003dd8:	425b      	neglt	r3, r3
 8003dda:	f042 0202 	orrlt.w	r2, r2, #2
 8003dde:	9307      	strge	r3, [sp, #28]
 8003de0:	9307      	strlt	r3, [sp, #28]
 8003de2:	bfb8      	it	lt
 8003de4:	9204      	strlt	r2, [sp, #16]
 8003de6:	7823      	ldrb	r3, [r4, #0]
 8003de8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dea:	d10a      	bne.n	8003e02 <_vfiprintf_r+0x156>
 8003dec:	7863      	ldrb	r3, [r4, #1]
 8003dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df0:	d132      	bne.n	8003e58 <_vfiprintf_r+0x1ac>
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	9203      	str	r2, [sp, #12]
 8003dfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dfe:	3402      	adds	r4, #2
 8003e00:	9305      	str	r3, [sp, #20]
 8003e02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ed8 <_vfiprintf_r+0x22c>
 8003e06:	7821      	ldrb	r1, [r4, #0]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4650      	mov	r0, sl
 8003e0c:	f7fc f9e0 	bl	80001d0 <memchr>
 8003e10:	b138      	cbz	r0, 8003e22 <_vfiprintf_r+0x176>
 8003e12:	9b04      	ldr	r3, [sp, #16]
 8003e14:	eba0 000a 	sub.w	r0, r0, sl
 8003e18:	2240      	movs	r2, #64	@ 0x40
 8003e1a:	4082      	lsls	r2, r0
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	3401      	adds	r4, #1
 8003e20:	9304      	str	r3, [sp, #16]
 8003e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e26:	4829      	ldr	r0, [pc, #164]	@ (8003ecc <_vfiprintf_r+0x220>)
 8003e28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e2c:	2206      	movs	r2, #6
 8003e2e:	f7fc f9cf 	bl	80001d0 <memchr>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d03f      	beq.n	8003eb6 <_vfiprintf_r+0x20a>
 8003e36:	4b26      	ldr	r3, [pc, #152]	@ (8003ed0 <_vfiprintf_r+0x224>)
 8003e38:	bb1b      	cbnz	r3, 8003e82 <_vfiprintf_r+0x1d6>
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	3307      	adds	r3, #7
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	3308      	adds	r3, #8
 8003e44:	9303      	str	r3, [sp, #12]
 8003e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e48:	443b      	add	r3, r7
 8003e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e4c:	e76a      	b.n	8003d24 <_vfiprintf_r+0x78>
 8003e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e52:	460c      	mov	r4, r1
 8003e54:	2001      	movs	r0, #1
 8003e56:	e7a8      	b.n	8003daa <_vfiprintf_r+0xfe>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	3401      	adds	r4, #1
 8003e5c:	9305      	str	r3, [sp, #20]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f04f 0c0a 	mov.w	ip, #10
 8003e64:	4620      	mov	r0, r4
 8003e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e6a:	3a30      	subs	r2, #48	@ 0x30
 8003e6c:	2a09      	cmp	r2, #9
 8003e6e:	d903      	bls.n	8003e78 <_vfiprintf_r+0x1cc>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0c6      	beq.n	8003e02 <_vfiprintf_r+0x156>
 8003e74:	9105      	str	r1, [sp, #20]
 8003e76:	e7c4      	b.n	8003e02 <_vfiprintf_r+0x156>
 8003e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e7f0      	b.n	8003e64 <_vfiprintf_r+0x1b8>
 8003e82:	ab03      	add	r3, sp, #12
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	462a      	mov	r2, r5
 8003e88:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <_vfiprintf_r+0x228>)
 8003e8a:	a904      	add	r1, sp, #16
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f3af 8000 	nop.w
 8003e92:	4607      	mov	r7, r0
 8003e94:	1c78      	adds	r0, r7, #1
 8003e96:	d1d6      	bne.n	8003e46 <_vfiprintf_r+0x19a>
 8003e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e9a:	07d9      	lsls	r1, r3, #31
 8003e9c:	d405      	bmi.n	8003eaa <_vfiprintf_r+0x1fe>
 8003e9e:	89ab      	ldrh	r3, [r5, #12]
 8003ea0:	059a      	lsls	r2, r3, #22
 8003ea2:	d402      	bmi.n	8003eaa <_vfiprintf_r+0x1fe>
 8003ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ea6:	f7ff fe7d 	bl	8003ba4 <__retarget_lock_release_recursive>
 8003eaa:	89ab      	ldrh	r3, [r5, #12]
 8003eac:	065b      	lsls	r3, r3, #25
 8003eae:	f53f af1f 	bmi.w	8003cf0 <_vfiprintf_r+0x44>
 8003eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003eb4:	e71e      	b.n	8003cf4 <_vfiprintf_r+0x48>
 8003eb6:	ab03      	add	r3, sp, #12
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	462a      	mov	r2, r5
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <_vfiprintf_r+0x228>)
 8003ebe:	a904      	add	r1, sp, #16
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f000 f879 	bl	8003fb8 <_printf_i>
 8003ec6:	e7e4      	b.n	8003e92 <_vfiprintf_r+0x1e6>
 8003ec8:	08004744 	.word	0x08004744
 8003ecc:	0800474e 	.word	0x0800474e
 8003ed0:	00000000 	.word	0x00000000
 8003ed4:	08003c87 	.word	0x08003c87
 8003ed8:	0800474a 	.word	0x0800474a

08003edc <_printf_common>:
 8003edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	4616      	mov	r6, r2
 8003ee2:	4698      	mov	r8, r3
 8003ee4:	688a      	ldr	r2, [r1, #8]
 8003ee6:	690b      	ldr	r3, [r1, #16]
 8003ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bfb8      	it	lt
 8003ef0:	4613      	movlt	r3, r2
 8003ef2:	6033      	str	r3, [r6, #0]
 8003ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ef8:	4607      	mov	r7, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	b10a      	cbz	r2, 8003f02 <_printf_common+0x26>
 8003efe:	3301      	adds	r3, #1
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	0699      	lsls	r1, r3, #26
 8003f06:	bf42      	ittt	mi
 8003f08:	6833      	ldrmi	r3, [r6, #0]
 8003f0a:	3302      	addmi	r3, #2
 8003f0c:	6033      	strmi	r3, [r6, #0]
 8003f0e:	6825      	ldr	r5, [r4, #0]
 8003f10:	f015 0506 	ands.w	r5, r5, #6
 8003f14:	d106      	bne.n	8003f24 <_printf_common+0x48>
 8003f16:	f104 0a19 	add.w	sl, r4, #25
 8003f1a:	68e3      	ldr	r3, [r4, #12]
 8003f1c:	6832      	ldr	r2, [r6, #0]
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	42ab      	cmp	r3, r5
 8003f22:	dc26      	bgt.n	8003f72 <_printf_common+0x96>
 8003f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	3b00      	subs	r3, #0
 8003f2c:	bf18      	it	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	0692      	lsls	r2, r2, #26
 8003f32:	d42b      	bmi.n	8003f8c <_printf_common+0xb0>
 8003f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f38:	4641      	mov	r1, r8
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	47c8      	blx	r9
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d01e      	beq.n	8003f80 <_printf_common+0xa4>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	f003 0306 	and.w	r3, r3, #6
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	bf02      	ittt	eq
 8003f4e:	68e5      	ldreq	r5, [r4, #12]
 8003f50:	6833      	ldreq	r3, [r6, #0]
 8003f52:	1aed      	subeq	r5, r5, r3
 8003f54:	68a3      	ldr	r3, [r4, #8]
 8003f56:	bf0c      	ite	eq
 8003f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f5c:	2500      	movne	r5, #0
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bfc4      	itt	gt
 8003f62:	1a9b      	subgt	r3, r3, r2
 8003f64:	18ed      	addgt	r5, r5, r3
 8003f66:	2600      	movs	r6, #0
 8003f68:	341a      	adds	r4, #26
 8003f6a:	42b5      	cmp	r5, r6
 8003f6c:	d11a      	bne.n	8003fa4 <_printf_common+0xc8>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e008      	b.n	8003f84 <_printf_common+0xa8>
 8003f72:	2301      	movs	r3, #1
 8003f74:	4652      	mov	r2, sl
 8003f76:	4641      	mov	r1, r8
 8003f78:	4638      	mov	r0, r7
 8003f7a:	47c8      	blx	r9
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d103      	bne.n	8003f88 <_printf_common+0xac>
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f88:	3501      	adds	r5, #1
 8003f8a:	e7c6      	b.n	8003f1a <_printf_common+0x3e>
 8003f8c:	18e1      	adds	r1, r4, r3
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	2030      	movs	r0, #48	@ 0x30
 8003f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f96:	4422      	add	r2, r4
 8003f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	e7c7      	b.n	8003f34 <_printf_common+0x58>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	4641      	mov	r1, r8
 8003faa:	4638      	mov	r0, r7
 8003fac:	47c8      	blx	r9
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d0e6      	beq.n	8003f80 <_printf_common+0xa4>
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7d9      	b.n	8003f6a <_printf_common+0x8e>
	...

08003fb8 <_printf_i>:
 8003fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	7e0f      	ldrb	r7, [r1, #24]
 8003fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fc0:	2f78      	cmp	r7, #120	@ 0x78
 8003fc2:	4691      	mov	r9, r2
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	469a      	mov	sl, r3
 8003fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fce:	d807      	bhi.n	8003fe0 <_printf_i+0x28>
 8003fd0:	2f62      	cmp	r7, #98	@ 0x62
 8003fd2:	d80a      	bhi.n	8003fea <_printf_i+0x32>
 8003fd4:	2f00      	cmp	r7, #0
 8003fd6:	f000 80d2 	beq.w	800417e <_printf_i+0x1c6>
 8003fda:	2f58      	cmp	r7, #88	@ 0x58
 8003fdc:	f000 80b9 	beq.w	8004152 <_printf_i+0x19a>
 8003fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fe8:	e03a      	b.n	8004060 <_printf_i+0xa8>
 8003fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fee:	2b15      	cmp	r3, #21
 8003ff0:	d8f6      	bhi.n	8003fe0 <_printf_i+0x28>
 8003ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ff8 <_printf_i+0x40>)
 8003ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ff8:	08004051 	.word	0x08004051
 8003ffc:	08004065 	.word	0x08004065
 8004000:	08003fe1 	.word	0x08003fe1
 8004004:	08003fe1 	.word	0x08003fe1
 8004008:	08003fe1 	.word	0x08003fe1
 800400c:	08003fe1 	.word	0x08003fe1
 8004010:	08004065 	.word	0x08004065
 8004014:	08003fe1 	.word	0x08003fe1
 8004018:	08003fe1 	.word	0x08003fe1
 800401c:	08003fe1 	.word	0x08003fe1
 8004020:	08003fe1 	.word	0x08003fe1
 8004024:	08004165 	.word	0x08004165
 8004028:	0800408f 	.word	0x0800408f
 800402c:	0800411f 	.word	0x0800411f
 8004030:	08003fe1 	.word	0x08003fe1
 8004034:	08003fe1 	.word	0x08003fe1
 8004038:	08004187 	.word	0x08004187
 800403c:	08003fe1 	.word	0x08003fe1
 8004040:	0800408f 	.word	0x0800408f
 8004044:	08003fe1 	.word	0x08003fe1
 8004048:	08003fe1 	.word	0x08003fe1
 800404c:	08004127 	.word	0x08004127
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6032      	str	r2, [r6, #0]
 8004058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800405c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004060:	2301      	movs	r3, #1
 8004062:	e09d      	b.n	80041a0 <_printf_i+0x1e8>
 8004064:	6833      	ldr	r3, [r6, #0]
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	1d19      	adds	r1, r3, #4
 800406a:	6031      	str	r1, [r6, #0]
 800406c:	0606      	lsls	r6, r0, #24
 800406e:	d501      	bpl.n	8004074 <_printf_i+0xbc>
 8004070:	681d      	ldr	r5, [r3, #0]
 8004072:	e003      	b.n	800407c <_printf_i+0xc4>
 8004074:	0645      	lsls	r5, r0, #25
 8004076:	d5fb      	bpl.n	8004070 <_printf_i+0xb8>
 8004078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800407c:	2d00      	cmp	r5, #0
 800407e:	da03      	bge.n	8004088 <_printf_i+0xd0>
 8004080:	232d      	movs	r3, #45	@ 0x2d
 8004082:	426d      	negs	r5, r5
 8004084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004088:	4859      	ldr	r0, [pc, #356]	@ (80041f0 <_printf_i+0x238>)
 800408a:	230a      	movs	r3, #10
 800408c:	e011      	b.n	80040b2 <_printf_i+0xfa>
 800408e:	6821      	ldr	r1, [r4, #0]
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	0608      	lsls	r0, r1, #24
 8004094:	f853 5b04 	ldr.w	r5, [r3], #4
 8004098:	d402      	bmi.n	80040a0 <_printf_i+0xe8>
 800409a:	0649      	lsls	r1, r1, #25
 800409c:	bf48      	it	mi
 800409e:	b2ad      	uxthmi	r5, r5
 80040a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040a2:	4853      	ldr	r0, [pc, #332]	@ (80041f0 <_printf_i+0x238>)
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	bf14      	ite	ne
 80040a8:	230a      	movne	r3, #10
 80040aa:	2308      	moveq	r3, #8
 80040ac:	2100      	movs	r1, #0
 80040ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040b2:	6866      	ldr	r6, [r4, #4]
 80040b4:	60a6      	str	r6, [r4, #8]
 80040b6:	2e00      	cmp	r6, #0
 80040b8:	bfa2      	ittt	ge
 80040ba:	6821      	ldrge	r1, [r4, #0]
 80040bc:	f021 0104 	bicge.w	r1, r1, #4
 80040c0:	6021      	strge	r1, [r4, #0]
 80040c2:	b90d      	cbnz	r5, 80040c8 <_printf_i+0x110>
 80040c4:	2e00      	cmp	r6, #0
 80040c6:	d04b      	beq.n	8004160 <_printf_i+0x1a8>
 80040c8:	4616      	mov	r6, r2
 80040ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ce:	fb03 5711 	mls	r7, r3, r1, r5
 80040d2:	5dc7      	ldrb	r7, [r0, r7]
 80040d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040d8:	462f      	mov	r7, r5
 80040da:	42bb      	cmp	r3, r7
 80040dc:	460d      	mov	r5, r1
 80040de:	d9f4      	bls.n	80040ca <_printf_i+0x112>
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d10b      	bne.n	80040fc <_printf_i+0x144>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07df      	lsls	r7, r3, #31
 80040e8:	d508      	bpl.n	80040fc <_printf_i+0x144>
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	6861      	ldr	r1, [r4, #4]
 80040ee:	4299      	cmp	r1, r3
 80040f0:	bfde      	ittt	le
 80040f2:	2330      	movle	r3, #48	@ 0x30
 80040f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040f8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80040fc:	1b92      	subs	r2, r2, r6
 80040fe:	6122      	str	r2, [r4, #16]
 8004100:	f8cd a000 	str.w	sl, [sp]
 8004104:	464b      	mov	r3, r9
 8004106:	aa03      	add	r2, sp, #12
 8004108:	4621      	mov	r1, r4
 800410a:	4640      	mov	r0, r8
 800410c:	f7ff fee6 	bl	8003edc <_printf_common>
 8004110:	3001      	adds	r0, #1
 8004112:	d14a      	bne.n	80041aa <_printf_i+0x1f2>
 8004114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004118:	b004      	add	sp, #16
 800411a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	f043 0320 	orr.w	r3, r3, #32
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	4833      	ldr	r0, [pc, #204]	@ (80041f4 <_printf_i+0x23c>)
 8004128:	2778      	movs	r7, #120	@ 0x78
 800412a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	6831      	ldr	r1, [r6, #0]
 8004132:	061f      	lsls	r7, r3, #24
 8004134:	f851 5b04 	ldr.w	r5, [r1], #4
 8004138:	d402      	bmi.n	8004140 <_printf_i+0x188>
 800413a:	065f      	lsls	r7, r3, #25
 800413c:	bf48      	it	mi
 800413e:	b2ad      	uxthmi	r5, r5
 8004140:	6031      	str	r1, [r6, #0]
 8004142:	07d9      	lsls	r1, r3, #31
 8004144:	bf44      	itt	mi
 8004146:	f043 0320 	orrmi.w	r3, r3, #32
 800414a:	6023      	strmi	r3, [r4, #0]
 800414c:	b11d      	cbz	r5, 8004156 <_printf_i+0x19e>
 800414e:	2310      	movs	r3, #16
 8004150:	e7ac      	b.n	80040ac <_printf_i+0xf4>
 8004152:	4827      	ldr	r0, [pc, #156]	@ (80041f0 <_printf_i+0x238>)
 8004154:	e7e9      	b.n	800412a <_printf_i+0x172>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	f023 0320 	bic.w	r3, r3, #32
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	e7f6      	b.n	800414e <_printf_i+0x196>
 8004160:	4616      	mov	r6, r2
 8004162:	e7bd      	b.n	80040e0 <_printf_i+0x128>
 8004164:	6833      	ldr	r3, [r6, #0]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	6961      	ldr	r1, [r4, #20]
 800416a:	1d18      	adds	r0, r3, #4
 800416c:	6030      	str	r0, [r6, #0]
 800416e:	062e      	lsls	r6, r5, #24
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	d501      	bpl.n	8004178 <_printf_i+0x1c0>
 8004174:	6019      	str	r1, [r3, #0]
 8004176:	e002      	b.n	800417e <_printf_i+0x1c6>
 8004178:	0668      	lsls	r0, r5, #25
 800417a:	d5fb      	bpl.n	8004174 <_printf_i+0x1bc>
 800417c:	8019      	strh	r1, [r3, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	6123      	str	r3, [r4, #16]
 8004182:	4616      	mov	r6, r2
 8004184:	e7bc      	b.n	8004100 <_printf_i+0x148>
 8004186:	6833      	ldr	r3, [r6, #0]
 8004188:	1d1a      	adds	r2, r3, #4
 800418a:	6032      	str	r2, [r6, #0]
 800418c:	681e      	ldr	r6, [r3, #0]
 800418e:	6862      	ldr	r2, [r4, #4]
 8004190:	2100      	movs	r1, #0
 8004192:	4630      	mov	r0, r6
 8004194:	f7fc f81c 	bl	80001d0 <memchr>
 8004198:	b108      	cbz	r0, 800419e <_printf_i+0x1e6>
 800419a:	1b80      	subs	r0, r0, r6
 800419c:	6060      	str	r0, [r4, #4]
 800419e:	6863      	ldr	r3, [r4, #4]
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	2300      	movs	r3, #0
 80041a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a8:	e7aa      	b.n	8004100 <_printf_i+0x148>
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	4632      	mov	r2, r6
 80041ae:	4649      	mov	r1, r9
 80041b0:	4640      	mov	r0, r8
 80041b2:	47d0      	blx	sl
 80041b4:	3001      	adds	r0, #1
 80041b6:	d0ad      	beq.n	8004114 <_printf_i+0x15c>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	079b      	lsls	r3, r3, #30
 80041bc:	d413      	bmi.n	80041e6 <_printf_i+0x22e>
 80041be:	68e0      	ldr	r0, [r4, #12]
 80041c0:	9b03      	ldr	r3, [sp, #12]
 80041c2:	4298      	cmp	r0, r3
 80041c4:	bfb8      	it	lt
 80041c6:	4618      	movlt	r0, r3
 80041c8:	e7a6      	b.n	8004118 <_printf_i+0x160>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4632      	mov	r2, r6
 80041ce:	4649      	mov	r1, r9
 80041d0:	4640      	mov	r0, r8
 80041d2:	47d0      	blx	sl
 80041d4:	3001      	adds	r0, #1
 80041d6:	d09d      	beq.n	8004114 <_printf_i+0x15c>
 80041d8:	3501      	adds	r5, #1
 80041da:	68e3      	ldr	r3, [r4, #12]
 80041dc:	9903      	ldr	r1, [sp, #12]
 80041de:	1a5b      	subs	r3, r3, r1
 80041e0:	42ab      	cmp	r3, r5
 80041e2:	dcf2      	bgt.n	80041ca <_printf_i+0x212>
 80041e4:	e7eb      	b.n	80041be <_printf_i+0x206>
 80041e6:	2500      	movs	r5, #0
 80041e8:	f104 0619 	add.w	r6, r4, #25
 80041ec:	e7f5      	b.n	80041da <_printf_i+0x222>
 80041ee:	bf00      	nop
 80041f0:	08004755 	.word	0x08004755
 80041f4:	08004766 	.word	0x08004766

080041f8 <__sflush_r>:
 80041f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004200:	0716      	lsls	r6, r2, #28
 8004202:	4605      	mov	r5, r0
 8004204:	460c      	mov	r4, r1
 8004206:	d454      	bmi.n	80042b2 <__sflush_r+0xba>
 8004208:	684b      	ldr	r3, [r1, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	dc02      	bgt.n	8004214 <__sflush_r+0x1c>
 800420e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	dd48      	ble.n	80042a6 <__sflush_r+0xae>
 8004214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004216:	2e00      	cmp	r6, #0
 8004218:	d045      	beq.n	80042a6 <__sflush_r+0xae>
 800421a:	2300      	movs	r3, #0
 800421c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004220:	682f      	ldr	r7, [r5, #0]
 8004222:	6a21      	ldr	r1, [r4, #32]
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	d030      	beq.n	800428a <__sflush_r+0x92>
 8004228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	0759      	lsls	r1, r3, #29
 800422e:	d505      	bpl.n	800423c <__sflush_r+0x44>
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004236:	b10b      	cbz	r3, 800423c <__sflush_r+0x44>
 8004238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004240:	6a21      	ldr	r1, [r4, #32]
 8004242:	4628      	mov	r0, r5
 8004244:	47b0      	blx	r6
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	d106      	bne.n	800425a <__sflush_r+0x62>
 800424c:	6829      	ldr	r1, [r5, #0]
 800424e:	291d      	cmp	r1, #29
 8004250:	d82b      	bhi.n	80042aa <__sflush_r+0xb2>
 8004252:	4a2a      	ldr	r2, [pc, #168]	@ (80042fc <__sflush_r+0x104>)
 8004254:	410a      	asrs	r2, r1
 8004256:	07d6      	lsls	r6, r2, #31
 8004258:	d427      	bmi.n	80042aa <__sflush_r+0xb2>
 800425a:	2200      	movs	r2, #0
 800425c:	6062      	str	r2, [r4, #4]
 800425e:	04d9      	lsls	r1, r3, #19
 8004260:	6922      	ldr	r2, [r4, #16]
 8004262:	6022      	str	r2, [r4, #0]
 8004264:	d504      	bpl.n	8004270 <__sflush_r+0x78>
 8004266:	1c42      	adds	r2, r0, #1
 8004268:	d101      	bne.n	800426e <__sflush_r+0x76>
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	b903      	cbnz	r3, 8004270 <__sflush_r+0x78>
 800426e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004272:	602f      	str	r7, [r5, #0]
 8004274:	b1b9      	cbz	r1, 80042a6 <__sflush_r+0xae>
 8004276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800427a:	4299      	cmp	r1, r3
 800427c:	d002      	beq.n	8004284 <__sflush_r+0x8c>
 800427e:	4628      	mov	r0, r5
 8004280:	f7ff fca0 	bl	8003bc4 <_free_r>
 8004284:	2300      	movs	r3, #0
 8004286:	6363      	str	r3, [r4, #52]	@ 0x34
 8004288:	e00d      	b.n	80042a6 <__sflush_r+0xae>
 800428a:	2301      	movs	r3, #1
 800428c:	4628      	mov	r0, r5
 800428e:	47b0      	blx	r6
 8004290:	4602      	mov	r2, r0
 8004292:	1c50      	adds	r0, r2, #1
 8004294:	d1c9      	bne.n	800422a <__sflush_r+0x32>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0c6      	beq.n	800422a <__sflush_r+0x32>
 800429c:	2b1d      	cmp	r3, #29
 800429e:	d001      	beq.n	80042a4 <__sflush_r+0xac>
 80042a0:	2b16      	cmp	r3, #22
 80042a2:	d11e      	bne.n	80042e2 <__sflush_r+0xea>
 80042a4:	602f      	str	r7, [r5, #0]
 80042a6:	2000      	movs	r0, #0
 80042a8:	e022      	b.n	80042f0 <__sflush_r+0xf8>
 80042aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ae:	b21b      	sxth	r3, r3
 80042b0:	e01b      	b.n	80042ea <__sflush_r+0xf2>
 80042b2:	690f      	ldr	r7, [r1, #16]
 80042b4:	2f00      	cmp	r7, #0
 80042b6:	d0f6      	beq.n	80042a6 <__sflush_r+0xae>
 80042b8:	0793      	lsls	r3, r2, #30
 80042ba:	680e      	ldr	r6, [r1, #0]
 80042bc:	bf08      	it	eq
 80042be:	694b      	ldreq	r3, [r1, #20]
 80042c0:	600f      	str	r7, [r1, #0]
 80042c2:	bf18      	it	ne
 80042c4:	2300      	movne	r3, #0
 80042c6:	eba6 0807 	sub.w	r8, r6, r7
 80042ca:	608b      	str	r3, [r1, #8]
 80042cc:	f1b8 0f00 	cmp.w	r8, #0
 80042d0:	dde9      	ble.n	80042a6 <__sflush_r+0xae>
 80042d2:	6a21      	ldr	r1, [r4, #32]
 80042d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042d6:	4643      	mov	r3, r8
 80042d8:	463a      	mov	r2, r7
 80042da:	4628      	mov	r0, r5
 80042dc:	47b0      	blx	r6
 80042de:	2800      	cmp	r0, #0
 80042e0:	dc08      	bgt.n	80042f4 <__sflush_r+0xfc>
 80042e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f4:	4407      	add	r7, r0
 80042f6:	eba8 0800 	sub.w	r8, r8, r0
 80042fa:	e7e7      	b.n	80042cc <__sflush_r+0xd4>
 80042fc:	dfbffffe 	.word	0xdfbffffe

08004300 <_fflush_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	4605      	mov	r5, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b913      	cbnz	r3, 8004310 <_fflush_r+0x10>
 800430a:	2500      	movs	r5, #0
 800430c:	4628      	mov	r0, r5
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	b118      	cbz	r0, 800431a <_fflush_r+0x1a>
 8004312:	6a03      	ldr	r3, [r0, #32]
 8004314:	b90b      	cbnz	r3, 800431a <_fflush_r+0x1a>
 8004316:	f7ff fbb9 	bl	8003a8c <__sinit>
 800431a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f3      	beq.n	800430a <_fflush_r+0xa>
 8004322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004324:	07d0      	lsls	r0, r2, #31
 8004326:	d404      	bmi.n	8004332 <_fflush_r+0x32>
 8004328:	0599      	lsls	r1, r3, #22
 800432a:	d402      	bmi.n	8004332 <_fflush_r+0x32>
 800432c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800432e:	f7ff fc38 	bl	8003ba2 <__retarget_lock_acquire_recursive>
 8004332:	4628      	mov	r0, r5
 8004334:	4621      	mov	r1, r4
 8004336:	f7ff ff5f 	bl	80041f8 <__sflush_r>
 800433a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800433c:	07da      	lsls	r2, r3, #31
 800433e:	4605      	mov	r5, r0
 8004340:	d4e4      	bmi.n	800430c <_fflush_r+0xc>
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	059b      	lsls	r3, r3, #22
 8004346:	d4e1      	bmi.n	800430c <_fflush_r+0xc>
 8004348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800434a:	f7ff fc2b 	bl	8003ba4 <__retarget_lock_release_recursive>
 800434e:	e7dd      	b.n	800430c <_fflush_r+0xc>

08004350 <__sread>:
 8004350:	b510      	push	{r4, lr}
 8004352:	460c      	mov	r4, r1
 8004354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004358:	f000 f978 	bl	800464c <_read_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	bfab      	itete	ge
 8004360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004362:	89a3      	ldrhlt	r3, [r4, #12]
 8004364:	181b      	addge	r3, r3, r0
 8004366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800436a:	bfac      	ite	ge
 800436c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800436e:	81a3      	strhlt	r3, [r4, #12]
 8004370:	bd10      	pop	{r4, pc}

08004372 <__swrite>:
 8004372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004376:	461f      	mov	r7, r3
 8004378:	898b      	ldrh	r3, [r1, #12]
 800437a:	05db      	lsls	r3, r3, #23
 800437c:	4605      	mov	r5, r0
 800437e:	460c      	mov	r4, r1
 8004380:	4616      	mov	r6, r2
 8004382:	d505      	bpl.n	8004390 <__swrite+0x1e>
 8004384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004388:	2302      	movs	r3, #2
 800438a:	2200      	movs	r2, #0
 800438c:	f000 f94c 	bl	8004628 <_lseek_r>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800439a:	81a3      	strh	r3, [r4, #12]
 800439c:	4632      	mov	r2, r6
 800439e:	463b      	mov	r3, r7
 80043a0:	4628      	mov	r0, r5
 80043a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a6:	f000 b963 	b.w	8004670 <_write_r>

080043aa <__sseek>:
 80043aa:	b510      	push	{r4, lr}
 80043ac:	460c      	mov	r4, r1
 80043ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b2:	f000 f939 	bl	8004628 <_lseek_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	bf15      	itete	ne
 80043bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043c6:	81a3      	strheq	r3, [r4, #12]
 80043c8:	bf18      	it	ne
 80043ca:	81a3      	strhne	r3, [r4, #12]
 80043cc:	bd10      	pop	{r4, pc}

080043ce <__sclose>:
 80043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d2:	f000 b8f7 	b.w	80045c4 <_close_r>

080043d6 <__swbuf_r>:
 80043d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d8:	460e      	mov	r6, r1
 80043da:	4614      	mov	r4, r2
 80043dc:	4605      	mov	r5, r0
 80043de:	b118      	cbz	r0, 80043e8 <__swbuf_r+0x12>
 80043e0:	6a03      	ldr	r3, [r0, #32]
 80043e2:	b90b      	cbnz	r3, 80043e8 <__swbuf_r+0x12>
 80043e4:	f7ff fb52 	bl	8003a8c <__sinit>
 80043e8:	69a3      	ldr	r3, [r4, #24]
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	071a      	lsls	r2, r3, #28
 80043f0:	d501      	bpl.n	80043f6 <__swbuf_r+0x20>
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	b943      	cbnz	r3, 8004408 <__swbuf_r+0x32>
 80043f6:	4621      	mov	r1, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	f000 f82b 	bl	8004454 <__swsetup_r>
 80043fe:	b118      	cbz	r0, 8004408 <__swbuf_r+0x32>
 8004400:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004404:	4638      	mov	r0, r7
 8004406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	6922      	ldr	r2, [r4, #16]
 800440c:	1a98      	subs	r0, r3, r2
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	b2f6      	uxtb	r6, r6
 8004412:	4283      	cmp	r3, r0
 8004414:	4637      	mov	r7, r6
 8004416:	dc05      	bgt.n	8004424 <__swbuf_r+0x4e>
 8004418:	4621      	mov	r1, r4
 800441a:	4628      	mov	r0, r5
 800441c:	f7ff ff70 	bl	8004300 <_fflush_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	d1ed      	bne.n	8004400 <__swbuf_r+0x2a>
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	6022      	str	r2, [r4, #0]
 8004430:	701e      	strb	r6, [r3, #0]
 8004432:	6962      	ldr	r2, [r4, #20]
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	429a      	cmp	r2, r3
 8004438:	d004      	beq.n	8004444 <__swbuf_r+0x6e>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	07db      	lsls	r3, r3, #31
 800443e:	d5e1      	bpl.n	8004404 <__swbuf_r+0x2e>
 8004440:	2e0a      	cmp	r6, #10
 8004442:	d1df      	bne.n	8004404 <__swbuf_r+0x2e>
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f7ff ff5a 	bl	8004300 <_fflush_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	d0d9      	beq.n	8004404 <__swbuf_r+0x2e>
 8004450:	e7d6      	b.n	8004400 <__swbuf_r+0x2a>
	...

08004454 <__swsetup_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4b29      	ldr	r3, [pc, #164]	@ (80044fc <__swsetup_r+0xa8>)
 8004458:	4605      	mov	r5, r0
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	460c      	mov	r4, r1
 800445e:	b118      	cbz	r0, 8004468 <__swsetup_r+0x14>
 8004460:	6a03      	ldr	r3, [r0, #32]
 8004462:	b90b      	cbnz	r3, 8004468 <__swsetup_r+0x14>
 8004464:	f7ff fb12 	bl	8003a8c <__sinit>
 8004468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446c:	0719      	lsls	r1, r3, #28
 800446e:	d422      	bmi.n	80044b6 <__swsetup_r+0x62>
 8004470:	06da      	lsls	r2, r3, #27
 8004472:	d407      	bmi.n	8004484 <__swsetup_r+0x30>
 8004474:	2209      	movs	r2, #9
 8004476:	602a      	str	r2, [r5, #0]
 8004478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800447c:	81a3      	strh	r3, [r4, #12]
 800447e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004482:	e033      	b.n	80044ec <__swsetup_r+0x98>
 8004484:	0758      	lsls	r0, r3, #29
 8004486:	d512      	bpl.n	80044ae <__swsetup_r+0x5a>
 8004488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800448a:	b141      	cbz	r1, 800449e <__swsetup_r+0x4a>
 800448c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004490:	4299      	cmp	r1, r3
 8004492:	d002      	beq.n	800449a <__swsetup_r+0x46>
 8004494:	4628      	mov	r0, r5
 8004496:	f7ff fb95 	bl	8003bc4 <_free_r>
 800449a:	2300      	movs	r3, #0
 800449c:	6363      	str	r3, [r4, #52]	@ 0x34
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	2300      	movs	r3, #0
 80044a8:	6063      	str	r3, [r4, #4]
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	f043 0308 	orr.w	r3, r3, #8
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	b94b      	cbnz	r3, 80044ce <__swsetup_r+0x7a>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c4:	d003      	beq.n	80044ce <__swsetup_r+0x7a>
 80044c6:	4621      	mov	r1, r4
 80044c8:	4628      	mov	r0, r5
 80044ca:	f000 f83f 	bl	800454c <__smakebuf_r>
 80044ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d2:	f013 0201 	ands.w	r2, r3, #1
 80044d6:	d00a      	beq.n	80044ee <__swsetup_r+0x9a>
 80044d8:	2200      	movs	r2, #0
 80044da:	60a2      	str	r2, [r4, #8]
 80044dc:	6962      	ldr	r2, [r4, #20]
 80044de:	4252      	negs	r2, r2
 80044e0:	61a2      	str	r2, [r4, #24]
 80044e2:	6922      	ldr	r2, [r4, #16]
 80044e4:	b942      	cbnz	r2, 80044f8 <__swsetup_r+0xa4>
 80044e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80044ea:	d1c5      	bne.n	8004478 <__swsetup_r+0x24>
 80044ec:	bd38      	pop	{r3, r4, r5, pc}
 80044ee:	0799      	lsls	r1, r3, #30
 80044f0:	bf58      	it	pl
 80044f2:	6962      	ldrpl	r2, [r4, #20]
 80044f4:	60a2      	str	r2, [r4, #8]
 80044f6:	e7f4      	b.n	80044e2 <__swsetup_r+0x8e>
 80044f8:	2000      	movs	r0, #0
 80044fa:	e7f7      	b.n	80044ec <__swsetup_r+0x98>
 80044fc:	20000158 	.word	0x20000158

08004500 <__swhatbuf_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	460c      	mov	r4, r1
 8004504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004508:	2900      	cmp	r1, #0
 800450a:	b096      	sub	sp, #88	@ 0x58
 800450c:	4615      	mov	r5, r2
 800450e:	461e      	mov	r6, r3
 8004510:	da0d      	bge.n	800452e <__swhatbuf_r+0x2e>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	bf14      	ite	ne
 800451e:	2340      	movne	r3, #64	@ 0x40
 8004520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004524:	2000      	movs	r0, #0
 8004526:	6031      	str	r1, [r6, #0]
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	b016      	add	sp, #88	@ 0x58
 800452c:	bd70      	pop	{r4, r5, r6, pc}
 800452e:	466a      	mov	r2, sp
 8004530:	f000 f858 	bl	80045e4 <_fstat_r>
 8004534:	2800      	cmp	r0, #0
 8004536:	dbec      	blt.n	8004512 <__swhatbuf_r+0x12>
 8004538:	9901      	ldr	r1, [sp, #4]
 800453a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800453e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004542:	4259      	negs	r1, r3
 8004544:	4159      	adcs	r1, r3
 8004546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800454a:	e7eb      	b.n	8004524 <__swhatbuf_r+0x24>

0800454c <__smakebuf_r>:
 800454c:	898b      	ldrh	r3, [r1, #12]
 800454e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004550:	079d      	lsls	r5, r3, #30
 8004552:	4606      	mov	r6, r0
 8004554:	460c      	mov	r4, r1
 8004556:	d507      	bpl.n	8004568 <__smakebuf_r+0x1c>
 8004558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	2301      	movs	r3, #1
 8004562:	6163      	str	r3, [r4, #20]
 8004564:	b003      	add	sp, #12
 8004566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004568:	ab01      	add	r3, sp, #4
 800456a:	466a      	mov	r2, sp
 800456c:	f7ff ffc8 	bl	8004500 <__swhatbuf_r>
 8004570:	9f00      	ldr	r7, [sp, #0]
 8004572:	4605      	mov	r5, r0
 8004574:	4639      	mov	r1, r7
 8004576:	4630      	mov	r0, r6
 8004578:	f7ff f970 	bl	800385c <_malloc_r>
 800457c:	b948      	cbnz	r0, 8004592 <__smakebuf_r+0x46>
 800457e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004582:	059a      	lsls	r2, r3, #22
 8004584:	d4ee      	bmi.n	8004564 <__smakebuf_r+0x18>
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	f043 0302 	orr.w	r3, r3, #2
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	e7e2      	b.n	8004558 <__smakebuf_r+0xc>
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	6020      	str	r0, [r4, #0]
 8004596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459a:	81a3      	strh	r3, [r4, #12]
 800459c:	9b01      	ldr	r3, [sp, #4]
 800459e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045a2:	b15b      	cbz	r3, 80045bc <__smakebuf_r+0x70>
 80045a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 f82d 	bl	8004608 <_isatty_r>
 80045ae:	b128      	cbz	r0, 80045bc <__smakebuf_r+0x70>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	431d      	orrs	r5, r3
 80045c0:	81a5      	strh	r5, [r4, #12]
 80045c2:	e7cf      	b.n	8004564 <__smakebuf_r+0x18>

080045c4 <_close_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d06      	ldr	r5, [pc, #24]	@ (80045e0 <_close_r+0x1c>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fd f87c 	bl	80016cc <_close>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_close_r+0x1a>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_close_r+0x1a>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	200004a4 	.word	0x200004a4

080045e4 <_fstat_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d07      	ldr	r5, [pc, #28]	@ (8004604 <_fstat_r+0x20>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	602b      	str	r3, [r5, #0]
 80045f2:	f7fd f877 	bl	80016e4 <_fstat>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	d102      	bne.n	8004600 <_fstat_r+0x1c>
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	b103      	cbz	r3, 8004600 <_fstat_r+0x1c>
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	bd38      	pop	{r3, r4, r5, pc}
 8004602:	bf00      	nop
 8004604:	200004a4 	.word	0x200004a4

08004608 <_isatty_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	@ (8004624 <_isatty_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fd f876 	bl	8001704 <_isatty>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_isatty_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_isatty_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	200004a4 	.word	0x200004a4

08004628 <_lseek_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d07      	ldr	r5, [pc, #28]	@ (8004648 <_lseek_r+0x20>)
 800462c:	4604      	mov	r4, r0
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	2200      	movs	r2, #0
 8004634:	602a      	str	r2, [r5, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f7fd f86f 	bl	800171a <_lseek>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_lseek_r+0x1e>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_lseek_r+0x1e>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	200004a4 	.word	0x200004a4

0800464c <_read_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	4d07      	ldr	r5, [pc, #28]	@ (800466c <_read_r+0x20>)
 8004650:	4604      	mov	r4, r0
 8004652:	4608      	mov	r0, r1
 8004654:	4611      	mov	r1, r2
 8004656:	2200      	movs	r2, #0
 8004658:	602a      	str	r2, [r5, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	f7fc ffec 	bl	8001638 <_read>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <_read_r+0x1e>
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	b103      	cbz	r3, 800466a <_read_r+0x1e>
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	200004a4 	.word	0x200004a4

08004670 <_write_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d07      	ldr	r5, [pc, #28]	@ (8004690 <_write_r+0x20>)
 8004674:	4604      	mov	r4, r0
 8004676:	4608      	mov	r0, r1
 8004678:	4611      	mov	r1, r2
 800467a:	2200      	movs	r2, #0
 800467c:	602a      	str	r2, [r5, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	f7fc fcc8 	bl	8001014 <_write>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_write_r+0x1e>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_write_r+0x1e>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	200004a4 	.word	0x200004a4

08004694 <_init>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	bf00      	nop
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr

080046a0 <_fini>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr
