
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e4  080043e4  000061b0  2**0
                  CONTENTS
  4 .ARM          00000008  080043e4  080043e4  000053e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043ec  080043ec  000061b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ec  080043ec  000053ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f0  080043f0  000053f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  080043f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001b0  080045a4  000061b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080045a4  000064ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b31c  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f4  00000000  00000000  000114fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000136f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a6  00000000  00000000  00014148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027451  00000000  00000000  000148ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6fb  00000000  00000000  0003bd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1140  00000000  00000000  0004743a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013857a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d14  00000000  00000000  001385c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0013b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800430c 	.word	0x0800430c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	0800430c 	.word	0x0800430c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lsm6dsl_init>:
 *      Author: cheng
 */

#include "lsm6dsl.h"

void lsm6dsl_init() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
//	i2c_init();  // ensure that i2c is initialized

	// CTRL1_XL = 0x60
	uint8_t ctrl1_xl_data[2] = {CTRL1_XL, 0x60};
 8000286:	f246 0310 	movw	r3, #24592	@ 0x6010
 800028a:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(IMU_ADDR, 0, ctrl1_xl_data, 2);
 800028c:	1d3a      	adds	r2, r7, #4
 800028e:	2302      	movs	r3, #2
 8000290:	2100      	movs	r1, #0
 8000292:	206a      	movs	r0, #106	@ 0x6a
 8000294:	f000 fd40 	bl	8000d18 <i2c_transaction>

	// INT1_CTRL = 0x01
	uint8_t int1_ctrl_data[2] = {INT1_CTRL, 0x01};
 8000298:	f240 130d 	movw	r3, #269	@ 0x10d
 800029c:	803b      	strh	r3, [r7, #0]
	i2c_transaction(IMU_ADDR, 0, int1_ctrl_data, 2);
 800029e:	463a      	mov	r2, r7
 80002a0:	2302      	movs	r3, #2
 80002a2:	2100      	movs	r1, #0
 80002a4:	206a      	movs	r0, #106	@ 0x6a
 80002a6:	f000 fd37 	bl	8000d18 <i2c_transaction>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b086      	sub	sp, #24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
	uint8_t data[7] = {OUTX_L_XL};
 80002be:	2328      	movs	r3, #40	@ 0x28
 80002c0:	613b      	str	r3, [r7, #16]
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2100      	movs	r1, #0
 80002c8:	460a      	mov	r2, r1
 80002ca:	801a      	strh	r2, [r3, #0]
 80002cc:	460a      	mov	r2, r1
 80002ce:	709a      	strb	r2, [r3, #2]

	i2c_transaction(IMU_ADDR, 1, data, 7);
 80002d0:	f107 0210 	add.w	r2, r7, #16
 80002d4:	2307      	movs	r3, #7
 80002d6:	2101      	movs	r1, #1
 80002d8:	206a      	movs	r0, #106	@ 0x6a
 80002da:	f000 fd1d 	bl	8000d18 <i2c_transaction>

	*x = data[2] << 8 | data[1];
 80002de:	7cbb      	ldrb	r3, [r7, #18]
 80002e0:	021b      	lsls	r3, r3, #8
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	7c7b      	ldrb	r3, [r7, #17]
 80002e6:	b21b      	sxth	r3, r3
 80002e8:	4313      	orrs	r3, r2
 80002ea:	b21a      	sxth	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	801a      	strh	r2, [r3, #0]
	*y = data[4] << 8 | data[3];
 80002f0:	7d3b      	ldrb	r3, [r7, #20]
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	7cfb      	ldrb	r3, [r7, #19]
 80002f8:	b21b      	sxth	r3, r3
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	801a      	strh	r2, [r3, #0]
	*z = data[6] << 8 | data[5];
 8000302:	7dbb      	ldrb	r3, [r7, #22]
 8000304:	021b      	lsls	r3, r3, #8
 8000306:	b21a      	sxth	r2, r3
 8000308:	7d7b      	ldrb	r3, [r7, #21]
 800030a:	b21b      	sxth	r3, r3
 800030c:	4313      	orrs	r3, r2
 800030e:	b21a      	sxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	801a      	strh	r2, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000322:	2006      	movs	r0, #6
 8000324:	f003 fb2e 	bl	8003984 <malloc>
 8000328:	4603      	mov	r3, r0
 800032a:	461a      	mov	r2, r3
 800032c:	4b70      	ldr	r3, [pc, #448]	@ (80004f0 <ble_init+0x1d4>)
 800032e:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000330:	bf00      	nop
 8000332:	4b70      	ldr	r3, [pc, #448]	@ (80004f4 <ble_init+0x1d8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0fb      	beq.n	8000332 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800033a:	4b6d      	ldr	r3, [pc, #436]	@ (80004f0 <ble_init+0x1d4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2106      	movs	r1, #6
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f905 	bl	8000550 <fetchBleEvent>
 8000346:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <ble_init+0x56>
		res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 800034e:	4b68      	ldr	r3, [pc, #416]	@ (80004f0 <ble_init+0x1d4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2206      	movs	r2, #6
 8000354:	4968      	ldr	r1, [pc, #416]	@ (80004f8 <ble_init+0x1dc>)
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f984 	bl	8000664 <checkEventResp>
 800035c:	6078      	str	r0, [r7, #4]
		if(res==BLE_OK){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d106      	bne.n	8000372 <ble_init+0x56>
			stackInitCompleteFlag|=0x01;
 8000364:	4b65      	ldr	r3, [pc, #404]	@ (80004fc <ble_init+0x1e0>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	b29a      	uxth	r2, r3
 800036e:	4b63      	ldr	r3, [pc, #396]	@ (80004fc <ble_init+0x1e0>)
 8000370:	801a      	strh	r2, [r3, #0]
		}
	}
	HAL_Delay(10);
 8000372:	200a      	movs	r0, #10
 8000374:	f001 fb8c 	bl	8001a90 <HAL_Delay>
	free(rxEvent);
 8000378:	4b5d      	ldr	r3, [pc, #372]	@ (80004f0 <ble_init+0x1d4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f003 fb09 	bl	8003994 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000382:	2300      	movs	r3, #0
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2307      	movs	r3, #7
 8000388:	4a5d      	ldr	r2, [pc, #372]	@ (8000500 <ble_init+0x1e4>)
 800038a:	2104      	movs	r1, #4
 800038c:	485d      	ldr	r0, [pc, #372]	@ (8000504 <ble_init+0x1e8>)
 800038e:	f000 fa9f 	bl	80008d0 <BLE_command>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d106      	bne.n	80003a6 <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 8000398:	4b58      	ldr	r3, [pc, #352]	@ (80004fc <ble_init+0x1e0>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b56      	ldr	r3, [pc, #344]	@ (80004fc <ble_init+0x1e0>)
 80003a4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003a6:	4b52      	ldr	r3, [pc, #328]	@ (80004f0 <ble_init+0x1d4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 faf2 	bl	8003994 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 80003b0:	2303      	movs	r3, #3
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2307      	movs	r3, #7
 80003b6:	4a54      	ldr	r2, [pc, #336]	@ (8000508 <ble_init+0x1ec>)
 80003b8:	2107      	movs	r1, #7
 80003ba:	4854      	ldr	r0, [pc, #336]	@ (800050c <ble_init+0x1f0>)
 80003bc:	f000 fa88 	bl	80008d0 <BLE_command>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 80003c6:	4b4d      	ldr	r3, [pc, #308]	@ (80004fc <ble_init+0x1e0>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	4b4a      	ldr	r3, [pc, #296]	@ (80004fc <ble_init+0x1e0>)
 80003d2:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 80003d4:	4b46      	ldr	r3, [pc, #280]	@ (80004f0 <ble_init+0x1d4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3307      	adds	r3, #7
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	4b4c      	ldr	r3, [pc, #304]	@ (8000510 <ble_init+0x1f4>)
 80003e0:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 80003e2:	4b43      	ldr	r3, [pc, #268]	@ (80004f0 <ble_init+0x1d4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3309      	adds	r3, #9
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b49      	ldr	r3, [pc, #292]	@ (8000514 <ble_init+0x1f8>)
 80003ee:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 80003f0:	4b3f      	ldr	r3, [pc, #252]	@ (80004f0 <ble_init+0x1d4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	330b      	adds	r3, #11
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	4b47      	ldr	r3, [pc, #284]	@ (8000518 <ble_init+0x1fc>)
 80003fc:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003fe:	4b3c      	ldr	r3, [pc, #240]	@ (80004f0 <ble_init+0x1d4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fac6 	bl	8003994 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000408:	4b44      	ldr	r3, [pc, #272]	@ (800051c <ble_init+0x200>)
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2307      	movs	r3, #7
 800040e:	2200      	movs	r2, #0
 8000410:	4940      	ldr	r1, [pc, #256]	@ (8000514 <ble_init+0x1f8>)
 8000412:	483f      	ldr	r0, [pc, #252]	@ (8000510 <ble_init+0x1f4>)
 8000414:	f000 fb22 	bl	8000a5c <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000418:	4b38      	ldr	r3, [pc, #224]	@ (80004fc <ble_init+0x1e0>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	f043 0308 	orr.w	r3, r3, #8
 8000420:	b29a      	uxth	r2, r3
 8000422:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <ble_init+0x1e0>)
 8000424:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 8000426:	4b32      	ldr	r3, [pc, #200]	@ (80004f0 <ble_init+0x1d4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f003 fab2 	bl	8003994 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000430:	2300      	movs	r3, #0
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2307      	movs	r3, #7
 8000436:	4a3a      	ldr	r2, [pc, #232]	@ (8000520 <ble_init+0x204>)
 8000438:	2110      	movs	r1, #16
 800043a:	483a      	ldr	r0, [pc, #232]	@ (8000524 <ble_init+0x208>)
 800043c:	f000 fa48 	bl	80008d0 <BLE_command>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 8000446:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <ble_init+0x1e0>)
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	b29a      	uxth	r2, r3
 8000450:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <ble_init+0x1e0>)
 8000452:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000454:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <ble_init+0x1d4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f003 fa9b 	bl	8003994 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800045e:	2300      	movs	r3, #0
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2307      	movs	r3, #7
 8000464:	4a30      	ldr	r2, [pc, #192]	@ (8000528 <ble_init+0x20c>)
 8000466:	2106      	movs	r1, #6
 8000468:	4830      	ldr	r0, [pc, #192]	@ (800052c <ble_init+0x210>)
 800046a:	f000 fa31 	bl	80008d0 <BLE_command>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d106      	bne.n	8000482 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <ble_init+0x1e0>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	b29a      	uxth	r2, r3
 800047e:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <ble_init+0x1e0>)
 8000480:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000482:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <ble_init+0x1d4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f003 fa84 	bl	8003994 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 800048c:	2300      	movs	r3, #0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2307      	movs	r3, #7
 8000492:	4a27      	ldr	r2, [pc, #156]	@ (8000530 <ble_init+0x214>)
 8000494:	2124      	movs	r1, #36	@ 0x24
 8000496:	4827      	ldr	r0, [pc, #156]	@ (8000534 <ble_init+0x218>)
 8000498:	f000 fa1a 	bl	80008d0 <BLE_command>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d106      	bne.n	80004b0 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <ble_init+0x1e0>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <ble_init+0x1e0>)
 80004ae:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <ble_init+0x1d4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 fa6d 	bl	8003994 <free>

	//This will start the advertisment,
	setConnectable();
 80004ba:	f000 f989 	bl	80007d0 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 80004be:	2207      	movs	r2, #7
 80004c0:	491d      	ldr	r1, [pc, #116]	@ (8000538 <ble_init+0x21c>)
 80004c2:	481e      	ldr	r0, [pc, #120]	@ (800053c <ble_init+0x220>)
 80004c4:	f000 fa50 	bl	8000968 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 80004c8:	2310      	movs	r3, #16
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2314      	movs	r3, #20
 80004ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000538 <ble_init+0x21c>)
 80004d0:	491b      	ldr	r1, [pc, #108]	@ (8000540 <ble_init+0x224>)
 80004d2:	481c      	ldr	r0, [pc, #112]	@ (8000544 <ble_init+0x228>)
 80004d4:	f000 fa80 	bl	80009d8 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 80004d8:	2304      	movs	r3, #4
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2314      	movs	r3, #20
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <ble_init+0x21c>)
 80004e0:	4919      	ldr	r1, [pc, #100]	@ (8000548 <ble_init+0x22c>)
 80004e2:	481a      	ldr	r0, [pc, #104]	@ (800054c <ble_init+0x230>)
 80004e4:	f000 fa78 	bl	80009d8 <addCharacteristic>

	if(stackInitCompleteFlag==255){
		//turn on led blue if everything was fine
		//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 80004e8:	bf00      	nop
}
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200002e4 	.word	0x200002e4
 80004f4:	200002e8 	.word	0x200002e8
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200002e2 	.word	0x200002e2
 8000500:	2000000c 	.word	0x2000000c
 8000504:	20000008 	.word	0x20000008
 8000508:	2000001c 	.word	0x2000001c
 800050c:	20000014 	.word	0x20000014
 8000510:	200001cc 	.word	0x200001cc
 8000514:	200001d0 	.word	0x200001d0
 8000518:	200001d4 	.word	0x200001d4
 800051c:	20000114 	.word	0x20000114
 8000520:	20000034 	.word	0x20000034
 8000524:	20000024 	.word	0x20000024
 8000528:	20000044 	.word	0x20000044
 800052c:	2000003c 	.word	0x2000003c
 8000530:	20000070 	.word	0x20000070
 8000534:	2000004c 	.word	0x2000004c
 8000538:	200002d8 	.word	0x200002d8
 800053c:	2000011c 	.word	0x2000011c
 8000540:	200002e0 	.word	0x200002e0
 8000544:	2000013c 	.word	0x2000013c
 8000548:	200002dc 	.word	0x200002dc
 800054c:	2000012c 	.word	0x2000012c

08000550 <fetchBleEvent>:
	if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	}
	free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	@ 0x30
 8000554:	af02      	add	r7, sp, #8
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]

	uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 800055a:	4a3d      	ldr	r2, [pc, #244]	@ (8000650 <fetchBleEvent+0x100>)
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000564:	6018      	str	r0, [r3, #0]
 8000566:	3304      	adds	r3, #4
 8000568:	7019      	strb	r1, [r3, #0]
	uint8_t slave_header[5];

	//Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
	if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	4839      	ldr	r0, [pc, #228]	@ (8000654 <fetchBleEvent+0x104>)
 800056e:	f001 fd7f 	bl	8002070 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d065      	beq.n	8000644 <fetchBleEvent+0xf4>

		HAL_Delay(5);
 8000578:	2005      	movs	r0, #5
 800057a:	f001 fa89 	bl	8001a90 <HAL_Delay>
		//PIN_CS of SPI2 LOW
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4834      	ldr	r0, [pc, #208]	@ (8000658 <fetchBleEvent+0x108>)
 8000586:	f001 fd8b 	bl	80020a0 <HAL_GPIO_WritePin>

		//SPI2 in this case, it could change according to the board
		//we send a byte containing a request of reading followed by 4 dummy bytes
		HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800058a:	f107 0210 	add.w	r2, r7, #16
 800058e:	f107 0118 	add.w	r1, r7, #24
 8000592:	2301      	movs	r3, #1
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2305      	movs	r3, #5
 8000598:	4830      	ldr	r0, [pc, #192]	@ (800065c <fetchBleEvent+0x10c>)
 800059a:	f002 fe6d 	bl	8003278 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a4:	482c      	ldr	r0, [pc, #176]	@ (8000658 <fetchBleEvent+0x108>)
 80005a6:	f001 fd7b 	bl	80020a0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 fa70 	bl	8001a90 <HAL_Delay>
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	4828      	ldr	r0, [pc, #160]	@ (8000658 <fetchBleEvent+0x108>)
 80005b8:	f001 fd72 	bl	80020a0 <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80005bc:	f107 0210 	add.w	r2, r7, #16
 80005c0:	f107 0118 	add.w	r1, r7, #24
 80005c4:	2301      	movs	r3, #1
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2305      	movs	r3, #5
 80005ca:	4824      	ldr	r0, [pc, #144]	@ (800065c <fetchBleEvent+0x10c>)
 80005cc:	f002 fe54 	bl	8003278 <HAL_SPI_TransmitReceive>

		//let's get the size of data available
		int dataSize;
		dataSize=(slave_header[3]|slave_header[4]<<8);
 80005d0:	7cfb      	ldrb	r3, [r7, #19]
 80005d2:	461a      	mov	r2, r3
 80005d4:	7d3b      	ldrb	r3, [r7, #20]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	4313      	orrs	r3, r2
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
		int i;
		char dummy=0xff;
 80005dc:	23ff      	movs	r3, #255	@ 0xff
 80005de:	73fb      	strb	r3, [r7, #15]

		if(dataSize>size){
 80005e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dd01      	ble.n	80005ec <fetchBleEvent+0x9c>
			dataSize=size;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		if(dataSize>0){
 80005ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	dd1f      	ble.n	8000632 <fetchBleEvent+0xe2>
			//let's fill the get the bytes availables and insert them into the container variable
			for(i=0;i<dataSize;i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
 80005f6:	e00d      	b.n	8000614 <fetchBleEvent+0xc4>
				HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	441a      	add	r2, r3
 80005fe:	f107 010f 	add.w	r1, r7, #15
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4814      	ldr	r0, [pc, #80]	@ (800065c <fetchBleEvent+0x10c>)
 800060a:	f002 fe35 	bl	8003278 <HAL_SPI_TransmitReceive>
			for(i=0;i<dataSize;i++){
 800060e:	6a3b      	ldr	r3, [r7, #32]
 8000610:	3301      	adds	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	6a3a      	ldr	r2, [r7, #32]
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	429a      	cmp	r2, r3
 800061a:	dbed      	blt.n	80005f8 <fetchBleEvent+0xa8>

			}
			HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <fetchBleEvent+0x108>)
 8000624:	f001 fd3c 	bl	80020a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
			return -1;
		}

		//let's stop the SPI2
		dataAvailable=0;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <fetchBleEvent+0x110>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
		return BLE_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	e00a      	b.n	8000648 <fetchBleEvent+0xf8>
			HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <fetchBleEvent+0x108>)
 800063a:	f001 fd31 	bl	80020a0 <HAL_GPIO_WritePin>
			return -1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000642:	e001      	b.n	8000648 <fetchBleEvent+0xf8>
	}else{
		return -2;
 8000644:	f06f 0301 	mvn.w	r3, #1
	}
}
 8000648:	4618      	mov	r0, r3
 800064a:	3728      	adds	r7, #40	@ 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08004324 	.word	0x08004324
 8000654:	48001000 	.word	0x48001000
 8000658:	48000c00 	.word	0x48000c00
 800065c:	200002ec 	.word	0x200002ec
 8000660:	200002e8 	.word	0x200002e8

08000664 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	int j=0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00f      	b.n	800069a <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	440b      	add	r3, r1
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	429a      	cmp	r2, r3
 800068c:	d002      	beq.n	8000694 <checkEventResp+0x30>
			return -1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000692:	e007      	b.n	80006a4 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbeb      	blt.n	800067a <checkEventResp+0x16>
		}
	}

	return BLE_OK;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	371c      	adds	r7, #28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]

	uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80006ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000738 <sendCommand+0x88>)
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	7019      	strb	r1, [r3, #0]
	uint8_t slave_header[5];

	int result;

	do{
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d0:	481a      	ldr	r0, [pc, #104]	@ (800073c <sendCommand+0x8c>)
 80006d2:	f001 fce5 	bl	80020a0 <HAL_GPIO_WritePin>

		//wait until it is possible to write
		//while(!dataAvailable);
		HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2305      	movs	r3, #5
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <sendCommand+0x90>)
 80006e6:	f002 fdc7 	bl	8003278 <HAL_SPI_TransmitReceive>
		int bufferSize=(slave_header[2]<<8|slave_header[1]);
 80006ea:	7abb      	ldrb	r3, [r7, #10]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	7a7a      	ldrb	r2, [r7, #9]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	61bb      	str	r3, [r7, #24]
		if(bufferSize>=size){
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	db09      	blt.n	8000710 <sendCommand+0x60>
			HAL_SPI_Transmit(&hspi3,command,size,1);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	2301      	movs	r3, #1
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <sendCommand+0x90>)
 8000706:	f002 fc42 	bl	8002f8e <HAL_SPI_Transmit>
			result=0;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	e002      	b.n	8000716 <sendCommand+0x66>
		}else{
			result=-1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000714:	61fb      	str	r3, [r7, #28]
		}
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	4807      	ldr	r0, [pc, #28]	@ (800073c <sendCommand+0x8c>)
 800071e:	f001 fcbf 	bl	80020a0 <HAL_GPIO_WritePin>
		dataAvailable=0;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <sendCommand+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1cd      	bne.n	80006ca <sendCommand+0x1a>

}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	0800432c 	.word	0x0800432c
 800073c:	48000c00 	.word	0x48000c00
 8000740:	200002ec 	.word	0x200002ec
 8000744:	200002e8 	.word	0x200002e8

08000748 <catchBLE>:

void catchBLE(uint8_t * byte1, uint8_t * byte2){
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	int result=fetchBleEvent(buffer,127);
 8000752:	217f      	movs	r1, #127	@ 0x7f
 8000754:	4819      	ldr	r0, [pc, #100]	@ (80007bc <catchBLE+0x74>)
 8000756:	f7ff fefb 	bl	8000550 <fetchBleEvent>
 800075a:	60f8      	str	r0, [r7, #12]
	if(result==BLE_OK){
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d128      	bne.n	80007b4 <catchBLE+0x6c>
		if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000762:	2203      	movs	r2, #3
 8000764:	4916      	ldr	r1, [pc, #88]	@ (80007c0 <catchBLE+0x78>)
 8000766:	4815      	ldr	r0, [pc, #84]	@ (80007bc <catchBLE+0x74>)
 8000768:	f7ff ff7c 	bl	8000664 <checkEventResp>
			//setConnectable();
		}
		if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 800076c:	2205      	movs	r2, #5
 800076e:	4915      	ldr	r1, [pc, #84]	@ (80007c4 <catchBLE+0x7c>)
 8000770:	4812      	ldr	r0, [pc, #72]	@ (80007bc <catchBLE+0x74>)
 8000772:	f7ff ff77 	bl	8000664 <checkEventResp>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d109      	bne.n	8000790 <catchBLE+0x48>
			// Little Endian Format
			*(connectionHandler) = buffer[5];
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <catchBLE+0x74>)
 800077e:	795b      	ldrb	r3, [r3, #5]
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <catchBLE+0x80>)
 8000784:	801a      	strh	r2, [r3, #0]
			*(connectionHandler + 1) = buffer[6];
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <catchBLE+0x74>)
 8000788:	799b      	ldrb	r3, [r3, #6]
 800078a:	b21a      	sxth	r2, r3
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <catchBLE+0x80>)
 800078e:	805a      	strh	r2, [r3, #2]
		}
		if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 8000790:	2205      	movs	r2, #5
 8000792:	490e      	ldr	r1, [pc, #56]	@ (80007cc <catchBLE+0x84>)
 8000794:	4809      	ldr	r0, [pc, #36]	@ (80007bc <catchBLE+0x74>)
 8000796:	f7ff ff65 	bl	8000664 <checkEventResp>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d109      	bne.n	80007b4 <catchBLE+0x6c>
			*(connectionHandler) = buffer[5];
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <catchBLE+0x74>)
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <catchBLE+0x80>)
 80007a8:	801a      	strh	r2, [r3, #0]
			*(connectionHandler + 1) = buffer[6];
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <catchBLE+0x74>)
 80007ac:	799b      	ldrb	r3, [r3, #6]
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <catchBLE+0x80>)
 80007b2:	805a      	strh	r2, [r3, #2]
		}
	}else{
		//something bad is happening if I am here
	}
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200001d8 	.word	0x200001d8
 80007c0:	200000ec 	.word	0x200000ec
 80007c4:	200000f8 	.word	0x200000f8
 80007c8:	2000014c 	.word	0x2000014c
 80007cc:	20000100 	.word	0x20000100

080007d0 <setConnectable>:

void setConnectable(){
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
	uint8_t* rxEvent;
	//Start advertising
	uint8_t *localname;
	int res;
	localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80007d6:	200c      	movs	r0, #12
 80007d8:	f003 f8d4 	bl	8003984 <malloc>
 80007dc:	4603      	mov	r3, r0
 80007de:	60fb      	str	r3, [r7, #12]
	memcpy(localname,deviceName,sizeof(deviceName));
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4a36      	ldr	r2, [pc, #216]	@ (80008bc <setConnectable+0xec>)
 80007e4:	6810      	ldr	r0, [r2, #0]
 80007e6:	6018      	str	r0, [r3, #0]
 80007e8:	8891      	ldrh	r1, [r2, #4]
 80007ea:	7992      	ldrb	r2, [r2, #6]
 80007ec:	8099      	strh	r1, [r3, #4]
 80007ee:	719a      	strb	r2, [r3, #6]
	localname[sizeof(deviceName)+1]=0x00;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3308      	adds	r3, #8
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+2]=0x00;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3309      	adds	r3, #9
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+3]=0x00;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	330a      	adds	r3, #10
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+4]=0x00;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	330b      	adds	r3, #11
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)]=0x00;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3307      	adds	r3, #7
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]


	ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <setConnectable+0xf0>)
 800081a:	2208      	movs	r2, #8
 800081c:	72da      	strb	r2, [r3, #11]
	ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <setConnectable+0xf0>)
 8000820:	2215      	movs	r2, #21
 8000822:	70da      	strb	r2, [r3, #3]

	uint8_t *discoverableCommand;
	discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000824:	2019      	movs	r0, #25
 8000826:	f003 f8ad 	bl	8003984 <malloc>
 800082a:	4603      	mov	r3, r0
 800082c:	60bb      	str	r3, [r7, #8]
	memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4a23      	ldr	r2, [pc, #140]	@ (80008c0 <setConnectable+0xf0>)
 8000832:	461c      	mov	r4, r3
 8000834:	4613      	mov	r3, r2
 8000836:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000838:	6020      	str	r0, [r4, #0]
 800083a:	6061      	str	r1, [r4, #4]
 800083c:	60a2      	str	r2, [r4, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	7323      	strb	r3, [r4, #12]
	memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330d      	adds	r3, #13
 8000846:	220c      	movs	r2, #12
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 f9d0 	bl	8003bf0 <memcpy>

	sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000850:	2119      	movs	r1, #25
 8000852:	68b8      	ldr	r0, [r7, #8]
 8000854:	f7ff ff2c 	bl	80006b0 <sendCommand>
	rxEvent=(uint8_t*)malloc(7);
 8000858:	2007      	movs	r0, #7
 800085a:	f003 f893 	bl	8003984 <malloc>
 800085e:	4603      	mov	r3, r0
 8000860:	607b      	str	r3, [r7, #4]
	while(!dataAvailable);
 8000862:	bf00      	nop
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <setConnectable+0xf4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0fb      	beq.n	8000864 <setConnectable+0x94>
	res=fetchBleEvent(rxEvent,7);
 800086c:	2107      	movs	r1, #7
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fe6e 	bl	8000550 <fetchBleEvent>
 8000874:	6038      	str	r0, [r7, #0]
	if(res==BLE_OK){
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10f      	bne.n	800089c <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 800087c:	2207      	movs	r2, #7
 800087e:	4912      	ldr	r1, [pc, #72]	@ (80008c8 <setConnectable+0xf8>)
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff feef 	bl	8000664 <checkEventResp>
 8000886:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d106      	bne.n	800089c <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <setConnectable+0xfc>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <setConnectable+0xfc>)
 800089a:	801a      	strh	r2, [r3, #0]
		}
	}

	free(rxEvent);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f003 f879 	bl	8003994 <free>
	free(discoverableCommand);
 80008a2:	68b8      	ldr	r0, [r7, #8]
 80008a4:	f003 f876 	bl	8003994 <free>
	free(localname);
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f003 f873 	bl	8003994 <free>
	HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f001 f8ee 	bl	8001a90 <HAL_Delay>
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	20000114 	.word	0x20000114
 80008c0:	20000078 	.word	0x20000078
 80008c4:	200002e8 	.word	0x200002e8
 80008c8:	20000088 	.word	0x20000088
 80008cc:	200002e2 	.word	0x200002e2

080008d0 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
	int response;

	sendCommand(command,size);
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fee5 	bl	80006b0 <sendCommand>
	rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	005a      	lsls	r2, r3, #1
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f848 	bl	8003984 <malloc>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <BLE_command+0x90>)
 80008fa:	601a      	str	r2, [r3, #0]

	long contatore=0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
	while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000900:	e007      	b.n	8000912 <BLE_command+0x42>
		contatore++;
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	3301      	adds	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
		if(contatore>30000){
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800090e:	4293      	cmp	r3, r2
 8000910:	dc07      	bgt.n	8000922 <BLE_command+0x52>
	while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000912:	2140      	movs	r1, #64	@ 0x40
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <BLE_command+0x94>)
 8000916:	f001 fbab 	bl	8002070 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f0      	beq.n	8000902 <BLE_command+0x32>
 8000920:	e000      	b.n	8000924 <BLE_command+0x54>
			break;
 8000922:	bf00      	nop
		}
	}


	response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <BLE_command+0x90>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	005a      	lsls	r2, r3, #1
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4619      	mov	r1, r3
 8000932:	f7ff fe0d 	bl	8000550 <fetchBleEvent>
 8000936:	6178      	str	r0, [r7, #20]
	if(response==BLE_OK){
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d107      	bne.n	800094e <BLE_command+0x7e>
		response=checkEventResp(rxEvent,result,sizeRes);
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <BLE_command+0x90>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe8c 	bl	8000664 <checkEventResp>
 800094c:	6178      	str	r0, [r7, #20]
	}
	HAL_Delay(10);
 800094e:	200a      	movs	r0, #10
 8000950:	f001 f89e 	bl	8001a90 <HAL_Delay>


	return response;
 8000954:	697b      	ldr	r3, [r7, #20]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200002e4 	.word	0x200002e4
 8000964:	48001000 	.word	0x48001000

08000968 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <addService+0x60>)
 8000976:	2210      	movs	r2, #16
 8000978:	68f9      	ldr	r1, [r7, #12]
 800097a:	4618      	mov	r0, r3
 800097c:	f003 f938 	bl	8003bf0 <memcpy>
	ADD_PRIMARY_SERVICE[22]=attributes;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <addService+0x64>)
 8000986:	759a      	strb	r2, [r3, #22]
	if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000988:	2301      	movs	r3, #1
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2307      	movs	r3, #7
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <addService+0x68>)
 8000990:	2117      	movs	r1, #23
 8000992:	480e      	ldr	r0, [pc, #56]	@ (80009cc <addService+0x64>)
 8000994:	f7ff ff9c 	bl	80008d0 <BLE_command>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10a      	bne.n	80009b4 <addService+0x4c>
		handle[0]=rxEvent[7];
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <addService+0x6c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	79da      	ldrb	r2, [r3, #7]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	701a      	strb	r2, [r3, #0]
		handle[1]=rxEvent[8];
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <addService+0x6c>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3301      	adds	r3, #1
 80009b0:	7a12      	ldrb	r2, [r2, #8]
 80009b2:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <addService+0x6c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 ffeb 	bl	8003994 <free>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000095 	.word	0x20000095
 80009cc:	20000090 	.word	0x20000090
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	200002e4 	.word	0x200002e4

080009d8 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	70fb      	strb	r3, [r7, #3]
	memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <addCharacteristic+0x74>)
 80009e8:	2210      	movs	r2, #16
 80009ea:	68f9      	ldr	r1, [r7, #12]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 f8ff 	bl	8003bf0 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <addCharacteristic+0x78>)
 80009f8:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	785a      	ldrb	r2, [r3, #1]
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <addCharacteristic+0x78>)
 8000a00:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <addCharacteristic+0x78>)
 8000a04:	78fb      	ldrb	r3, [r7, #3]
 8000a06:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000a08:	4a11      	ldr	r2, [pc, #68]	@ (8000a50 <addCharacteristic+0x78>)
 8000a0a:	7e3b      	ldrb	r3, [r7, #24]
 8000a0c:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000a0e:	2301      	movs	r3, #1
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2307      	movs	r3, #7
 8000a14:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <addCharacteristic+0x7c>)
 8000a16:	211e      	movs	r1, #30
 8000a18:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <addCharacteristic+0x78>)
 8000a1a:	f7ff ff59 	bl	80008d0 <BLE_command>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10a      	bne.n	8000a3a <addCharacteristic+0x62>
		handleChar[0]=rxEvent[7];
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <addCharacteristic+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	79da      	ldrb	r2, [r3, #7]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	701a      	strb	r2, [r3, #0]
		handleChar[1]=rxEvent[8];
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <addCharacteristic+0x80>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	7a12      	ldrb	r2, [r2, #8]
 8000a38:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <addCharacteristic+0x80>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 ffa8 	bl	8003994 <free>
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000b7 	.word	0x200000b7
 8000a50:	200000b0 	.word	0x200000b0
 8000a54:	200000d0 	.word	0x200000d0
 8000a58:	200002e4 	.word	0x200002e4

08000a5c <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3306      	adds	r3, #6
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <updateCharValue+0x9c>)
 8000a74:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <updateCharValue+0x9c>)
 8000a7c:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	785a      	ldrb	r2, [r3, #1]
 8000a82:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <updateCharValue+0x9c>)
 8000a84:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <updateCharValue+0x9c>)
 8000a8c:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	785a      	ldrb	r2, [r3, #1]
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <updateCharValue+0x9c>)
 8000a94:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <updateCharValue+0x9c>)
 8000a9c:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <updateCharValue+0x9c>)
 8000aa4:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	330a      	adds	r3, #10
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 ff6a 	bl	8003984 <malloc>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	4910      	ldr	r1, [pc, #64]	@ (8000af8 <updateCharValue+0x9c>)
 8000ab8:	6978      	ldr	r0, [r7, #20]
 8000aba:	f003 f899 	bl	8003bf0 <memcpy>
	memcpy(commandComplete+10,data,size);
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	330a      	adds	r3, #10
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	6a39      	ldr	r1, [r7, #32]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f892 	bl	8003bf0 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f103 010a 	add.w	r1, r3, #10
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <updateCharValue+0xa0>)
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff fef8 	bl	80008d0 <BLE_command>

	free(commandComplete);
 8000ae0:	6978      	ldr	r0, [r7, #20]
 8000ae2:	f002 ff57 	bl	8003994 <free>
	free(rxEvent);
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <updateCharValue+0xa4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 ff52 	bl	8003994 <free>
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	200000d0 	.word	0x200000d0
 8000b00:	200002e4 	.word	0x200002e4

08000b04 <disconnectBLE>:

/** 
 * @brief Disconnects the peripheral from the central
 */
void disconnectBLE(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
	if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <disconnectBLE+0x98>)
 8000b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b14:	d105      	bne.n	8000b22 <disconnectBLE+0x1e>
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <disconnectBLE+0x98>)
 8000b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b20:	d037      	beq.n	8000b92 <disconnectBLE+0x8e>
		// should not be -1
		return;
	}
	uint8_t command[7];
	memcpy(command, DISCONNECT, 4);
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <disconnectBLE+0x9c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	607b      	str	r3, [r7, #4]
	command[4] = connectionHandler[0];
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <disconnectBLE+0x98>)
 8000b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	723b      	strb	r3, [r7, #8]
	command[5] = connectionHandler[1];
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <disconnectBLE+0x98>)
 8000b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	727b      	strb	r3, [r7, #9]
	command[6] = 0x13;
 8000b3c:	2313      	movs	r3, #19
 8000b3e:	72bb      	strb	r3, [r7, #10]
	if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000b40:	1d38      	adds	r0, r7, #4
 8000b42:	2300      	movs	r3, #0
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2307      	movs	r3, #7
 8000b48:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <disconnectBLE+0xa0>)
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	f7ff fec0 	bl	80008d0 <BLE_command>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11e      	bne.n	8000b94 <disconnectBLE+0x90>
		int result=fetchBleEvent(buffer,127);
 8000b56:	217f      	movs	r1, #127	@ 0x7f
 8000b58:	4813      	ldr	r0, [pc, #76]	@ (8000ba8 <disconnectBLE+0xa4>)
 8000b5a:	f7ff fcf9 	bl	8000550 <fetchBleEvent>
 8000b5e:	60f8      	str	r0, [r7, #12]
		if(result==BLE_OK){
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10f      	bne.n	8000b86 <disconnectBLE+0x82>
			if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000b66:	2204      	movs	r2, #4
 8000b68:	4910      	ldr	r1, [pc, #64]	@ (8000bac <disconnectBLE+0xa8>)
 8000b6a:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <disconnectBLE+0xa4>)
 8000b6c:	f7ff fd7a 	bl	8000664 <checkEventResp>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d107      	bne.n	8000b86 <disconnectBLE+0x82>
				//setConnectable();
				connectionHandler[0] = -1;
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <disconnectBLE+0x98>)
 8000b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7c:	801a      	strh	r2, [r3, #0]
				connectionHandler[1] = -1;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <disconnectBLE+0x98>)
 8000b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b84:	805a      	strh	r2, [r3, #2]
			}
		}
		free(rxEvent);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <disconnectBLE+0xac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 ff02 	bl	8003994 <free>
 8000b90:	e000      	b.n	8000b94 <disconnectBLE+0x90>
		return;
 8000b92:	bf00      	nop
	}
}
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000014c 	.word	0x2000014c
 8000ba0:	200000e8 	.word	0x200000e8
 8000ba4:	200000f0 	.word	0x200000f0
 8000ba8:	200001d8 	.word	0x200001d8
 8000bac:	200000ec 	.word	0x200000ec
 8000bb0:	200002e4 	.word	0x200002e4

08000bb4 <setDiscoverability>:
/**
 * DO NOT CHANGE FUNCTION definition
 * @brief Sets the discoverability of the peripheral
 * @param mode 0 => Non Discoverable, 1 => Discoverable
 * */
void setDiscoverability(uint8_t mode){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if (mode == 1){
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <setDiscoverability+0x16>
		setConnectable();
 8000bc4:	f7ff fe04 	bl	80007d0 <setConnectable>
		free(rxEvent);
	}
	else{
		// Do nothing
	}
}
 8000bc8:	e00f      	b.n	8000bea <setDiscoverability+0x36>
	else if (mode == 0){
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10c      	bne.n	8000bea <setDiscoverability+0x36>
		if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <setDiscoverability+0x40>)
 8000bd8:	2103      	movs	r1, #3
 8000bda:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <setDiscoverability+0x44>)
 8000bdc:	f7ff fe78 	bl	80008d0 <BLE_command>
		free(rxEvent);
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <setDiscoverability+0x48>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fed5 	bl	8003994 <free>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000010c 	.word	0x2000010c
 8000bf8:	20000108 	.word	0x20000108
 8000bfc:	200002e4 	.word	0x200002e4

08000c00 <i2c_init>:
#include <stm32l475xx.h>

void i2c_init() {
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000c04:	4b41      	ldr	r3, [pc, #260]	@ (8000d0c <i2c_init+0x10c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d177      	bne.n	8000d00 <i2c_init+0x100>

    // Enable GPIOB and I2C2 clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <i2c_init+0x110>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	4a3e      	ldr	r2, [pc, #248]	@ (8000d10 <i2c_init+0x110>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d10 <i2c_init+0x110>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c20:	4a3b      	ldr	r2, [pc, #236]	@ (8000d10 <i2c_init+0x110>)
 8000c22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c26:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PB10 (SCL) and PB11 (SDA) as alternate function
    GPIOB->MODER &= ~GPIO_MODER_MODE10 & ~GPIO_MODER_MODE11; // Clear mode bits
 8000c28:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <i2c_init+0x114>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a39      	ldr	r2, [pc, #228]	@ (8000d14 <i2c_init+0x114>)
 8000c2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000c32:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1;  // Set alternate function mode
 8000c34:	4b37      	ldr	r3, [pc, #220]	@ (8000d14 <i2c_init+0x114>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a36      	ldr	r2, [pc, #216]	@ (8000d14 <i2c_init+0x114>)
 8000c3a:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000c3e:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11;  // Open-drain mode (needed for I2C)
 8000c40:	4b34      	ldr	r3, [pc, #208]	@ (8000d14 <i2c_init+0x114>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <i2c_init+0x114>)
 8000c46:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000c4a:	6053      	str	r3, [r2, #4]

    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);  // Clear pull-up/down register
 8000c4c:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <i2c_init+0x114>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a30      	ldr	r2, [pc, #192]	@ (8000d14 <i2c_init+0x114>)
 8000c52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000c56:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);  // Pull-up (default 1 from floating)
 8000c58:	4b2e      	ldr	r3, [pc, #184]	@ (8000d14 <i2c_init+0x114>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d14 <i2c_init+0x114>)
 8000c5e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000c62:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <i2c_init+0x114>)
 8000c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c68:	4a2a      	ldr	r2, [pc, #168]	@ (8000d14 <i2c_init+0x114>)
 8000c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000c6e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL11_2;
 8000c70:	4b28      	ldr	r3, [pc, #160]	@ (8000d14 <i2c_init+0x114>)
 8000c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c74:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <i2c_init+0x114>)
 8000c76:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000c7a:	6253      	str	r3, [r2, #36]	@ 0x24

    // Reset I2C2
    I2C2->CR1 &= ~I2C_CR1_PE;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <i2c_init+0x10c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a22      	ldr	r2, [pc, #136]	@ (8000d0c <i2c_init+0x10c>)
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_SWRST;
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <i2c_init+0x10c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d0c <i2c_init+0x10c>)
 8000c8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c92:	6013      	str	r3, [r2, #0]
    I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <i2c_init+0x10c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <i2c_init+0x10c>)
 8000c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000c9e:	6013      	str	r3, [r2, #0]

    // SYSCLK is 4 MHz
    // PCLK1 will be 4 MHz if we configure no divides between SYSCLK and HCLK and b/t HCLK and PCLK1

    // configure HCLK and PCLK1 to have no divides
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1);
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <i2c_init+0x110>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d10 <i2c_init+0x110>)
 8000ca6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8000caa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV1;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <i2c_init+0x110>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <i2c_init+0x110>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	6093      	str	r3, [r2, #8]
    // tFilter = 260 ns (analog filter only)
    // tI2CCLK = 1 / PCLK1 = 1 / 4 MHz = 250 ns
    // PRESC = 0 (keep at 250 ns)
    // SCLL = (tLow - tFilter) / tI2CCLK = round((20 us - 260 ns) / 250 ns) = 79
    // SCLH = tHigh / tI2CCLK = 20 us / 250 ns = 80
    I2C2->TIMINGR &= 0;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <i2c_init+0x10c>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <i2c_init+0x10c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_PRESC_Pos;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <i2c_init+0x10c>)
 8000cc0:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <i2c_init+0x10c>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 79 << I2C_TIMINGR_SCLL_Pos;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <i2c_init+0x10c>)
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <i2c_init+0x10c>)
 8000ccc:	f043 034f 	orr.w	r3, r3, #79	@ 0x4f
 8000cd0:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 80 << I2C_TIMINGR_SCLH_Pos;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <i2c_init+0x10c>)
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <i2c_init+0x10c>)
 8000cd8:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000cdc:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_SDADEL_Pos;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <i2c_init+0x10c>)
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <i2c_init+0x10c>)
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 2 << I2C_TIMINGR_SCLDEL_Pos;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <i2c_init+0x10c>)
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <i2c_init+0x10c>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	6113      	str	r3, [r2, #16]

    // Enable I2C2
    I2C2->CR1 |= I2C_CR1_PE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <i2c_init+0x10c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <i2c_init+0x10c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e000      	b.n	8000d02 <i2c_init+0x102>
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000d00:	bf00      	nop
}
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40005800 	.word	0x40005800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400

08000d18 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	603a      	str	r2, [r7, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	460b      	mov	r3, r1
 8000d28:	71bb      	strb	r3, [r7, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	717b      	strb	r3, [r7, #5]
    uint32_t timeout = 1000000;  // Simple timeout mechanism
 8000d2e:	4b79      	ldr	r3, [pc, #484]	@ (8000f14 <i2c_transaction+0x1fc>)
 8000d30:	60fb      	str	r3, [r7, #12]

    // Ensure the bus is free
    while ((I2C2->ISR & I2C_ISR_BUSY) && --timeout);
 8000d32:	bf00      	nop
 8000d34:	4b78      	ldr	r3, [pc, #480]	@ (8000f18 <i2c_transaction+0x200>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <i2c_transaction+0x34>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f3      	bne.n	8000d34 <i2c_transaction+0x1c>
    if (!timeout) return 1;  // Timeout error
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <i2c_transaction+0x3e>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0d7      	b.n	8000f06 <i2c_transaction+0x1ee>

    if (dir) {  // read
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8087 	beq.w	8000e6c <i2c_transaction+0x154>
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a6d      	ldr	r2, [pc, #436]	@ (8000f18 <i2c_transaction+0x200>)
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000d66:	4b6c      	ldr	r3, [pc, #432]	@ (8000f18 <i2c_transaction+0x200>)
 8000d68:	4a6b      	ldr	r2, [pc, #428]	@ (8000f18 <i2c_transaction+0x200>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 1 << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8000f18 <i2c_transaction+0x200>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a69      	ldr	r2, [pc, #420]	@ (8000f18 <i2c_transaction+0x200>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d78:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000d7a:	4b67      	ldr	r3, [pc, #412]	@ (8000f18 <i2c_transaction+0x200>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a66      	ldr	r2, [pc, #408]	@ (8000f18 <i2c_transaction+0x200>)
 8000d80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d84:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	72fb      	strb	r3, [r7, #11]
 8000d8a:	e06a      	b.n	8000e62 <i2c_transaction+0x14a>
	    	timeout = 1000000;
 8000d8c:	4b61      	ldr	r3, [pc, #388]	@ (8000f14 <i2c_transaction+0x1fc>)
 8000d8e:	60fb      	str	r3, [r7, #12]

    	    if (i == 0) {
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d149      	bne.n	8000e2a <i2c_transaction+0x112>
    	    	while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000d96:	bf00      	nop
 8000d98:	4b5f      	ldr	r3, [pc, #380]	@ (8000f18 <i2c_transaction+0x200>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <i2c_transaction+0x98>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f3      	bne.n	8000d98 <i2c_transaction+0x80>
    	        if (!timeout) return 2;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <i2c_transaction+0xa2>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e0a5      	b.n	8000f06 <i2c_transaction+0x1ee>
    	        I2C2->TXDR = data[i];
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b55      	ldr	r3, [pc, #340]	@ (8000f18 <i2c_transaction+0x200>)
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28

    	        while (!(I2C2->ISR & I2C_ISR_TC) && --timeout);
 8000dc6:	bf00      	nop
 8000dc8:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <i2c_transaction+0x200>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <i2c_transaction+0xc8>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f3      	bne.n	8000dc8 <i2c_transaction+0xb0>
    	       	if (!timeout) return 2;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <i2c_transaction+0xd2>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e08d      	b.n	8000f06 <i2c_transaction+0x1ee>

    	        I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4a4a      	ldr	r2, [pc, #296]	@ (8000f18 <i2c_transaction+0x200>)
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_RD_WRN;  // transfer direction. 0 for write, 1 for read
 8000df2:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <i2c_transaction+0x200>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4a48      	ldr	r2, [pc, #288]	@ (8000f18 <i2c_transaction+0x200>)
 8000df8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfc:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= (len - 1) << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000dfe:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <i2c_transaction+0x200>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	797a      	ldrb	r2, [r7, #5]
 8000e04:	3a01      	subs	r2, #1
 8000e06:	0412      	lsls	r2, r2, #16
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4a43      	ldr	r2, [pc, #268]	@ (8000f18 <i2c_transaction+0x200>)
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_AUTOEND;  // auto transmit STOP after # of bytes
 8000e10:	4b41      	ldr	r3, [pc, #260]	@ (8000f18 <i2c_transaction+0x200>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4a40      	ldr	r2, [pc, #256]	@ (8000f18 <i2c_transaction+0x200>)
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e1a:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f18 <i2c_transaction+0x200>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a3d      	ldr	r2, [pc, #244]	@ (8000f18 <i2c_transaction+0x200>)
 8000e22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e26:	6053      	str	r3, [r2, #4]

    	       	continue;
 8000e28:	e018      	b.n	8000e5c <i2c_transaction+0x144>
    	    }

    	    while (!(I2C2->ISR & I2C_ISR_RXNE) && --timeout);
 8000e2a:	bf00      	nop
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f18 <i2c_transaction+0x200>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d105      	bne.n	8000e44 <i2c_transaction+0x12c>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f3      	bne.n	8000e2c <i2c_transaction+0x114>
    	    if (!timeout) return 3;  // Timeout error
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <i2c_transaction+0x136>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e05b      	b.n	8000f06 <i2c_transaction+0x1ee>
    	    data[i] = I2C2->RXDR;
 8000e4e:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <i2c_transaction+0x200>)
 8000e50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	b2ca      	uxtb	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
	    for (uint8_t i = 0; i < len; i++) {
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	72fb      	strb	r3, [r7, #11]
 8000e62:	7afa      	ldrb	r2, [r7, #11]
 8000e64:	797b      	ldrb	r3, [r7, #5]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d390      	bcc.n	8000d8c <i2c_transaction+0x74>
 8000e6a:	e03e      	b.n	8000eea <i2c_transaction+0x1d2>
	    }
    } else {  // write
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000f18 <i2c_transaction+0x200>)
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <i2c_transaction+0x200>)
 8000e76:	4a28      	ldr	r2, [pc, #160]	@ (8000f18 <i2c_transaction+0x200>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= len << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <i2c_transaction+0x200>)
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	4924      	ldr	r1, [pc, #144]	@ (8000f18 <i2c_transaction+0x200>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	604b      	str	r3, [r1, #4]
    	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <i2c_transaction+0x200>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <i2c_transaction+0x200>)
 8000e90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e94:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <i2c_transaction+0x200>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <i2c_transaction+0x200>)
 8000e9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ea0:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	72bb      	strb	r3, [r7, #10]
 8000ea6:	e01c      	b.n	8000ee2 <i2c_transaction+0x1ca>
	    	timeout = 1000000;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <i2c_transaction+0x1fc>)
 8000eaa:	60fb      	str	r3, [r7, #12]

            while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000eac:	bf00      	nop
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <i2c_transaction+0x200>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d105      	bne.n	8000ec6 <i2c_transaction+0x1ae>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f3      	bne.n	8000eae <i2c_transaction+0x196>
   	        if (!timeout) return 2;  // Timeout error
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <i2c_transaction+0x1b8>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e01a      	b.n	8000f06 <i2c_transaction+0x1ee>
    	    I2C2->TXDR = data[i];
 8000ed0:	7abb      	ldrb	r3, [r7, #10]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <i2c_transaction+0x200>)
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
	    for (uint8_t i = 0; i < len; i++) {
 8000edc:	7abb      	ldrb	r3, [r7, #10]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	72bb      	strb	r3, [r7, #10]
 8000ee2:	7aba      	ldrb	r2, [r7, #10]
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3de      	bcc.n	8000ea8 <i2c_transaction+0x190>
	    }
    }

    while (!(I2C2->ISR & I2C_ISR_STOPF));  // Wait for STOP condition
 8000eea:	bf00      	nop
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <i2c_transaction+0x200>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f9      	beq.n	8000eec <i2c_transaction+0x1d4>
    I2C2->ICR |= I2C_ICR_STOPCF;  // Clear STOP flag
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <i2c_transaction+0x200>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <i2c_transaction+0x200>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	61d3      	str	r3, [r2, #28]

    return 0;  // Success
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	000f4240 	.word	0x000f4240
 8000f18:	40005800 	.word	0x40005800

08000f1c <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <leds_init+0xc4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe0 <leds_init+0xc4>)
 8000f26:	f043 0303 	orr.w	r3, r3, #3
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Configure PA5 and PB14 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000f2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f36:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000f3a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <leds_init+0xc8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a24      	ldr	r2, [pc, #144]	@ (8000fe4 <leds_init+0xc8>)
 8000f52:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000f56:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <leds_init+0xc8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <leds_init+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000f64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f6e:	f023 0320 	bic.w	r3, r3, #32
 8000f72:	6053      	str	r3, [r2, #4]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <leds_init+0xc8>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe4 <leds_init+0xc8>)
 8000f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f7e:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000f80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f8e:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD14;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <leds_init+0xc8>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <leds_init+0xc8>)
 8000f96:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000f9a:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000f9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fa6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000faa:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <leds_init+0xc8>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe4 <leds_init+0xc8>)
 8000fb2:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000fb6:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000fb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fc2:	f023 0320 	bic.w	r3, r3, #32
 8000fc6:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <leds_init+0xc8>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <leds_init+0xc8>)
 8000fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fd2:	6153      	str	r3, [r2, #20]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <leds_set>:

void leds_set(uint8_t led)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d847      	bhi.n	8001088 <leds_set+0xa0>
 8000ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <leds_set+0x18>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001011 	.word	0x08001011
 8001004:	0800102f 	.word	0x0800102f
 8001008:	0800104d 	.word	0x0800104d
 800100c:	0800106b 	.word	0x0800106b
        case 0:
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001010:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800101a:	f023 0320 	bic.w	r3, r3, #32
 800101e:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <leds_set+0xac>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <leds_set+0xac>)
 8001026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800102a:	6153      	str	r3, [r2, #20]
            break;
 800102c:	e02c      	b.n	8001088 <leds_set+0xa0>
        case 1:
            //LED 2 is turned on
            GPIOA->ODR |= GPIO_ODR_OD5;
 800102e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <leds_set+0xac>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <leds_set+0xac>)
 8001044:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001048:	6153      	str	r3, [r2, #20]
            break;
 800104a:	e01d      	b.n	8001088 <leds_set+0xa0>
        case 2:
        	//LED 1 is turned on
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 800104c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001056:	f023 0320 	bic.w	r3, r3, #32
 800105a:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <leds_set+0xac>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	4a0c      	ldr	r2, [pc, #48]	@ (8001094 <leds_set+0xac>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001066:	6153      	str	r3, [r2, #20]
            break;
 8001068:	e00e      	b.n	8001088 <leds_set+0xa0>
        case 3:
        	//Both LEDs are on
            GPIOA->ODR |= GPIO_ODR_OD5;
 800106a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <leds_set+0xac>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <leds_set+0xac>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6153      	str	r3, [r2, #20]
            break;
 8001086:	bf00      	nop

    }
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	48000400 	.word	0x48000400

08001098 <sendMissingAlert>:
volatile int counter = 0;
volatile int arr_counter = 0;  // Counter for which part of the array we are displaying
volatile uint8_t minute_counter = 0; // counter for how many minutes have gone by
int bool = 1;

void sendMissingAlert(int seconds) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
	char message[50];  // Buffer for the formatted string
	snprintf(message, sizeof(message), "PrivTag has been missing for %d seconds", seconds);
 80010a0:	f107 0008 	add.w	r0, r7, #8
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <sendMissingAlert+0x70>)
 80010a8:	2132      	movs	r1, #50	@ 0x32
 80010aa:	f002 fd1d 	bl	8003ae8 <sniprintf>

	int message_len = strlen(message);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f88c 	bl	80001d0 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
	int offset = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	647b      	str	r3, [r7, #68]	@ 0x44

	while (offset < message_len) {
 80010c0:	e018      	b.n	80010f4 <sendMissingAlert+0x5c>
		int chunk_size = (message_len - offset > BLE_MAX_PACKET_SIZE) ? BLE_MAX_PACKET_SIZE : (message_len - offset);
 80010c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b14      	cmp	r3, #20
 80010ca:	bfa8      	it	ge
 80010cc:	2314      	movge	r3, #20
 80010ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Send each chunk as a standalone notification
		updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, chunk_size, (uint8_t*)&message[offset]);
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010d6:	4413      	add	r3, r2
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010dc:	2200      	movs	r2, #0
 80010de:	490b      	ldr	r1, [pc, #44]	@ (800110c <sendMissingAlert+0x74>)
 80010e0:	480b      	ldr	r0, [pc, #44]	@ (8001110 <sendMissingAlert+0x78>)
 80010e2:	f7ff fcbb 	bl	8000a5c <updateCharValue>

		offset += chunk_size;
 80010e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010ea:	4413      	add	r3, r2
 80010ec:	647b      	str	r3, [r7, #68]	@ 0x44
		HAL_Delay(50);  // Small delay to allow BLE module to process
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f000 fcce 	bl	8001a90 <HAL_Delay>
	while (offset < message_len) {
 80010f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbe2      	blt.n	80010c2 <sendMissingAlert+0x2a>
	}
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3748      	adds	r7, #72	@ 0x48
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08004334 	.word	0x08004334
 800110c:	200002e0 	.word	0x200002e0
 8001110:	200002d8 	.word	0x200002d8

08001114 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

	if (TIM2->SR & TIM_SR_UIF) {  // check if interrupt status reg != 0
 8001118:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01a      	beq.n	800115c <TIM2_IRQHandler+0x48>
		TIM2->SR &= ~TIM_SR_UIF;  // turn it off
 8001126:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6113      	str	r3, [r2, #16]

		arr_counter = (arr_counter + 1) % ARR_LENGTH;  // increment counter
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <TIM2_IRQHandler+0x4c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	425a      	negs	r2, r3
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	f002 020f 	and.w	r2, r2, #15
 8001146:	bf58      	it	pl
 8001148:	4253      	negpl	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <TIM2_IRQHandler+0x4c>)
 800114c:	6013      	str	r3, [r2, #0]

		counter += 1;
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <TIM2_IRQHandler+0x50>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <TIM2_IRQHandler+0x50>)
 8001156:	6013      	str	r3, [r2, #0]
		SystemClock_Config();
 8001158:	f000 f944 	bl	80013e4 <SystemClock_Config>
	}
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000354 	.word	0x20000354
 8001164:	20000350 	.word	0x20000350

08001168 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b090      	sub	sp, #64	@ 0x40
 800116c:	af00      	add	r7, sp, #0
int main(void)
 800116e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001172:	623b      	str	r3, [r7, #32]
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001174:	f000 fc17 	bl	80019a6 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001178:	f000 f934 	bl	80013e4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800117c:	f000 f9b6 	bl	80014ec <MX_GPIO_Init>
	MX_SPI3_Init();
 8001180:	f000 f976 	bl	8001470 <MX_SPI3_Init>

	//RESET BLE MODULE
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118e:	f000 ff87 	bl	80020a0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001192:	200a      	movs	r0, #10
 8001194:	f000 fc7c 	bl	8001a90 <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a2:	f000 ff7d 	bl	80020a0 <HAL_GPIO_WritePin>

	ble_init();
 80011a6:	f7ff f8b9 	bl	800031c <ble_init>
	//Old code
	leds_init();
 80011aa:	f7ff feb7 	bl	8000f1c <leds_init>
	timer_init(TIM2);
 80011ae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011b2:	f000 fb87 	bl	80018c4 <timer_init>
	timer_set_ms(TIM2, 1000);
 80011b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011ba:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011be:	f000 fbb7 	bl	8001930 <timer_set_ms>
	HAL_Delay(500);
 80011c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c6:	f000 fc63 	bl	8001a90 <HAL_Delay>
	i2c_init();
 80011ca:	f7ff fd19 	bl	8000c00 <i2c_init>
	lsm6dsl_init();
 80011ce:	f7ff f857 	bl	8000280 <lsm6dsl_init>

	RCC->APB1ENR1 &= ~RCC_APB1ENR1_USART2EN;
 80011d2:	4b7b      	ldr	r3, [pc, #492]	@ (80013c0 <main+0x258>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	4a7a      	ldr	r2, [pc, #488]	@ (80013c0 <main+0x258>)
 80011d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80011dc:	6593      	str	r3, [r2, #88]	@ 0x58

	int16_t x, y, z;
	int16_t last_x = 0, last_y = 0, last_z = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80011e2:	2300      	movs	r3, #0
 80011e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80011e6:	2300      	movs	r3, #0
 80011e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
	int stable_counter = 0;  // Count how many iterations values remain within threshold
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	@ 0x34
	const int STABLE_THRESHOLD = 160;
 80011ee:	23a0      	movs	r3, #160	@ 0xa0
 80011f0:	633b      	str	r3, [r7, #48]	@ 0x30
			ITM_SendChar(*ptr++);
		}
		return len;
	}
	//Old code end
	HAL_Delay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f000 fc4c 	bl	8001a90 <HAL_Delay>

	uint8_t nonDiscoverable = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	disconnectBLE();
 80011fe:	f7ff fc81 	bl	8000b04 <disconnectBLE>
	while (1)
	{
		//Old code
		lsm6dsl_read_xyz(&x, &y, &z);
 8001202:	f107 021a 	add.w	r2, r7, #26
 8001206:	f107 011c 	add.w	r1, r7, #28
 800120a:	f107 031e 	add.w	r3, r7, #30
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f84f 	bl	80002b2 <lsm6dsl_read_xyz>

		// Convert values to match the scale
		int16_t x_scaled = x / 16;
 8001214:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001218:	2b00      	cmp	r3, #0
 800121a:	da00      	bge.n	800121e <main+0xb6>
 800121c:	330f      	adds	r3, #15
 800121e:	111b      	asrs	r3, r3, #4
 8001220:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		int16_t y_scaled = y / 16;
 8001222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da00      	bge.n	800122c <main+0xc4>
 800122a:	330f      	adds	r3, #15
 800122c:	111b      	asrs	r3, r3, #4
 800122e:	857b      	strh	r3, [r7, #42]	@ 0x2a
		int16_t z_scaled = z / 16;
 8001230:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001234:	2b00      	cmp	r3, #0
 8001236:	da00      	bge.n	800123a <main+0xd2>
 8001238:	330f      	adds	r3, #15
 800123a:	111b      	asrs	r3, r3, #4
 800123c:	853b      	strh	r3, [r7, #40]	@ 0x28

		// Check if the change is within the stable threshold
		if (abs(x_scaled - last_x) <= STABLE_THRESHOLD && abs(y_scaled - last_y) <= STABLE_THRESHOLD && abs(z_scaled - last_z) <= STABLE_THRESHOLD)
 800123e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001242:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	bfb8      	it	lt
 800124c:	425b      	neglt	r3, r3
 800124e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001250:	429a      	cmp	r2, r3
 8001252:	db65      	blt.n	8001320 <main+0x1b8>
 8001254:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001258:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	bfb8      	it	lt
 8001262:	425b      	neglt	r3, r3
 8001264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001266:	429a      	cmp	r2, r3
 8001268:	db5a      	blt.n	8001320 <main+0x1b8>
 800126a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 800126e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	bfb8      	it	lt
 8001278:	425b      	neglt	r3, r3
 800127a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800127c:	429a      	cmp	r2, r3
 800127e:	db4f      	blt.n	8001320 <main+0x1b8>
		{
			stable_counter++;
 8001280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001282:	3301      	adds	r3, #1
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34
			if (counter >= MINUTE_COUNT && bool && counter%10==0)
 8001286:	4b4f      	ldr	r3, [pc, #316]	@ (80013c4 <main+0x25c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b09      	cmp	r3, #9
 800128c:	dd2e      	ble.n	80012ec <main+0x184>
 800128e:	4b4e      	ldr	r3, [pc, #312]	@ (80013c8 <main+0x260>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d02a      	beq.n	80012ec <main+0x184>
 8001296:	4b4b      	ldr	r3, [pc, #300]	@ (80013c4 <main+0x25c>)
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	4b4c      	ldr	r3, [pc, #304]	@ (80013cc <main+0x264>)
 800129c:	fb83 2301 	smull	r2, r3, r3, r1
 80012a0:	109a      	asrs	r2, r3, #2
 80012a2:	17cb      	asrs	r3, r1, #31
 80012a4:	1ad2      	subs	r2, r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	1aca      	subs	r2, r1, r3
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	d11b      	bne.n	80012ec <main+0x184>
			{
				setDiscoverability(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fc7d 	bl	8000bb4 <setDiscoverability>
				leds_set(2);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f7ff fe94 	bl	8000fe8 <leds_set>
				unsigned char test_str[] = "youlostit BLE test";
 80012c0:	4b43      	ldr	r3, [pc, #268]	@ (80013d0 <main+0x268>)
 80012c2:	1d3c      	adds	r4, r7, #4
 80012c4:	461d      	mov	r5, r3
 80012c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ca:	682b      	ldr	r3, [r5, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	8022      	strh	r2, [r4, #0]
 80012d0:	3402      	adds	r4, #2
 80012d2:	0c1b      	lsrs	r3, r3, #16
 80012d4:	7023      	strb	r3, [r4, #0]
				//updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);

				bool = 0;
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <main+0x260>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
				int missing_seconds = counter;
 80012dc:	4b39      	ldr	r3, [pc, #228]	@ (80013c4 <main+0x25c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
				sendMissingAlert(missing_seconds);
 80012e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012e4:	f7ff fed8 	bl	8001098 <sendMissingAlert>
			{
 80012e8:	bf00      	nop
			if (counter >= MINUTE_COUNT && bool && counter%10==0)
 80012ea:	e028      	b.n	800133e <main+0x1d6>

			}
			else if(counter >= MINUTE_COUNT && !bool && counter%200!=0)
 80012ec:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <main+0x25c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b09      	cmp	r3, #9
 80012f2:	dd24      	ble.n	800133e <main+0x1d6>
 80012f4:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <main+0x260>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d120      	bne.n	800133e <main+0x1d6>
 80012fc:	4b31      	ldr	r3, [pc, #196]	@ (80013c4 <main+0x25c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <main+0x26c>)
 8001302:	fb83 1302 	smull	r1, r3, r3, r2
 8001306:	1199      	asrs	r1, r3, #6
 8001308:	17d3      	asrs	r3, r2, #31
 800130a:	1acb      	subs	r3, r1, r3
 800130c:	21c8      	movs	r1, #200	@ 0xc8
 800130e:	fb01 f303 	mul.w	r3, r1, r3
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d012      	beq.n	800133e <main+0x1d6>
			{
				bool = 1;
 8001318:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <main+0x260>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
			if (counter >= MINUTE_COUNT && bool && counter%10==0)
 800131e:	e00e      	b.n	800133e <main+0x1d6>

			}
		}
		else
		{
			disconnectBLE();
 8001320:	f7ff fbf0 	bl	8000b04 <disconnectBLE>
			leds_set(0);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fe5f 	bl	8000fe8 <leds_set>
			arr_counter = 0;
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <main+0x270>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
			minute_counter = 0;
 8001330:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <main+0x274>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
			counter = 0; // Reset the counter when the thing moves
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <main+0x25c>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e000      	b.n	8001340 <main+0x1d8>
			if (counter >= MINUTE_COUNT && bool && counter%10==0)
 800133e:	bf00      	nop
		}

		// Updating the compares
		last_x = x_scaled;
 8001340:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001342:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		last_y = y_scaled;
 8001344:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001346:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		last_z = z_scaled;
 8001348:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800134a:	877b      	strh	r3, [r7, #58]	@ 0x3a

		//Old code end

		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800134c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001350:	2b00      	cmp	r3, #0
 8001352:	d108      	bne.n	8001366 <main+0x1fe>
 8001354:	2140      	movs	r1, #64	@ 0x40
 8001356:	4822      	ldr	r0, [pc, #136]	@ (80013e0 <main+0x278>)
 8001358:	f000 fe8a 	bl	8002070 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <main+0x1fe>
			catchBLE();
 8001362:	f7ff f9f1 	bl	8000748 <catchBLE>
		/*
		 * Turn off interrupts
		 *
		 */

		RCC->APB1ENR1 &= ~(RCC_APB1ENR1_USART2EN   // UART
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <main+0x258>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	4a15      	ldr	r2, [pc, #84]	@ (80013c0 <main+0x258>)
 800136c:	f423 1308 	bic.w	r3, r3, #2228224	@ 0x220000
 8001370:	6593      	str	r3, [r2, #88]	@ 0x58
				| RCC_APB1ENR1_I2C1EN); // I2C
		RCC->APB2ENR &= ~RCC_APB2ENR_SPI1EN;        // SPI
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <main+0x258>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <main+0x258>)
 8001378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800137c:	6613      	str	r3, [r2, #96]	@ 0x60
		RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <main+0x258>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <main+0x258>)
 8001384:	f023 0303 	bic.w	r3, r3, #3
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
		//HAL_SuspendTick();  // Stop SysTick timer to save power
		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 800138a:	2101      	movs	r1, #1
 800138c:	2000      	movs	r0, #0
 800138e:	f000 fec2 	bl	8002116 <HAL_PWR_EnterSTOPMode>
		// Wait for interrupt, only uncomment if low power is needed
		__asm volatile ("wfi");
 8001392:	bf30      	wfi
		HAL_ResumeTick();   // Resume SysTick when waking up
 8001394:	f000 fba0 	bl	8001ad8 <HAL_ResumeTick>
		RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <main+0x258>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <main+0x258>)
 800139e:	f043 0303 	orr.w	r3, r3, #3
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
		RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN   // UART
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <main+0x258>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <main+0x258>)
 80013aa:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 80013ae:	6593      	str	r3, [r2, #88]	@ 0x58
				| RCC_APB1ENR1_I2C1EN); // I2C
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;        // SPI
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <main+0x258>)
 80013b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b4:	4a02      	ldr	r2, [pc, #8]	@ (80013c0 <main+0x258>)
 80013b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013ba:	6613      	str	r3, [r2, #96]	@ 0x60
	{
 80013bc:	e721      	b.n	8001202 <main+0x9a>
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	20000350 	.word	0x20000350
 80013c8:	20000150 	.word	0x20000150
 80013cc:	66666667 	.word	0x66666667
 80013d0:	0800435c 	.word	0x0800435c
 80013d4:	51eb851f 	.word	0x51eb851f
 80013d8:	20000354 	.word	0x20000354
 80013dc:	20000358 	.word	0x20000358
 80013e0:	48001000 	.word	0x48001000

080013e4 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @attention This changes the System clock frequency, make sure you reflect that change in your timer
 * @retval None
 */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b096      	sub	sp, #88	@ 0x58
 80013e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2244      	movs	r2, #68	@ 0x44
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fbb8 	bl	8003b68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001406:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800140a:	f000 fea9 	bl	8002160 <HAL_PWREx_ControlVoltageScaling>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001414:	f000 f902 	bl	800161c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001418:	2310      	movs	r3, #16
 800141a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
	// This lines changes system clock frequency
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001424:	2370      	movs	r3, #112	@ 0x70
 8001426:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4618      	mov	r0, r3
 8001432:	f000 ff41 	bl	80022b8 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 800143c:	f000 f8ee 	bl	800161c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fb09 	bl	8002a70 <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001464:	f000 f8da 	bl	800161c <Error_Handler>
	}
}
 8001468:	bf00      	nop
 800146a:	3758      	adds	r7, #88	@ 0x58
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_SPI3_Init+0x74>)
 8001476:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <MX_SPI3_Init+0x78>)
 8001478:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_SPI3_Init+0x74>)
 800147c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001480:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_SPI3_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_SPI3_Init+0x74>)
 800148a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800148e:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_SPI3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_SPI3_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_SPI3_Init+0x74>)
 800149e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a2:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014be:	2207      	movs	r2, #7
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014ca:	2208      	movs	r2, #8
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_SPI3_Init+0x74>)
 80014d0:	f001 fcba 	bl	8002e48 <HAL_SPI_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_SPI3_Init+0x6e>
	{
		Error_Handler();
 80014da:	f000 f89f 	bl	800161c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002ec 	.word	0x200002ec
 80014e8:	40003c00 	.word	0x40003c00

080014ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	4b43      	ldr	r3, [pc, #268]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a42      	ldr	r2, [pc, #264]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b40      	ldr	r3, [pc, #256]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b3d      	ldr	r3, [pc, #244]	@ (8001610 <MX_GPIO_Init+0x124>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a3c      	ldr	r2, [pc, #240]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b37      	ldr	r3, [pc, #220]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a36      	ldr	r2, [pc, #216]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <MX_GPIO_Init+0x124>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a30      	ldr	r2, [pc, #192]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a2a      	ldr	r2, [pc, #168]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <MX_GPIO_Init+0x124>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2120      	movs	r1, #32
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f000 fd8d 	bl	80020a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800158c:	4821      	ldr	r0, [pc, #132]	@ (8001614 <MX_GPIO_Init+0x128>)
 800158e:	f000 fd87 	bl	80020a0 <HAL_GPIO_WritePin>


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159c:	f000 fd80 	bl	80020a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLE_INT_Pin */
	GPIO_InitStruct.Pin = BLE_INT_Pin;
 80015a0:	2340      	movs	r3, #64	@ 0x40
 80015a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4818      	ldr	r0, [pc, #96]	@ (8001618 <MX_GPIO_Init+0x12c>)
 80015b6:	f000 fbb1 	bl	8001d1c <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
	GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80015ba:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80015be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d6:	f000 fba1 	bl	8001d1c <HAL_GPIO_Init>

	/*Configure GPIO pin : BLE_CS_Pin */
	GPIO_InitStruct.Pin = BLE_CS_Pin;
 80015da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4808      	ldr	r0, [pc, #32]	@ (8001614 <MX_GPIO_Init+0x128>)
 80015f4:	f000 fb92 	bl	8001d1c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2017      	movs	r0, #23
 80015fe:	f000 fb56 	bl	8001cae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001602:	2017      	movs	r0, #23
 8001604:	f000 fb6f 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	@ 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	48000c00 	.word	0x48000c00
 8001618:	48001000 	.word	0x48001000

0800161c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <Error_Handler+0x8>

08001628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_MspInit+0x44>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001632:	4a0e      	ldr	r2, [pc, #56]	@ (800166c <HAL_MspInit+0x44>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6613      	str	r3, [r2, #96]	@ 0x60
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_MspInit+0x44>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_MspInit+0x44>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <HAL_MspInit+0x44>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001650:	6593      	str	r3, [r2, #88]	@ 0x58
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a17      	ldr	r2, [pc, #92]	@ (80016ec <HAL_SPI_MspInit+0x7c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d128      	bne.n	80016e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_SPI_MspInit+0x80>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	4a16      	ldr	r2, [pc, #88]	@ (80016f0 <HAL_SPI_MspInit+0x80>)
 8001698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169c:	6593      	str	r3, [r2, #88]	@ 0x58
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_SPI_MspInit+0x80>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_SPI_MspInit+0x80>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <HAL_SPI_MspInit+0x80>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_SPI_MspInit+0x80>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80016c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016d4:	2306      	movs	r3, #6
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <HAL_SPI_MspInit+0x84>)
 80016e0:	f000 fb1c 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	@ 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40003c00 	.word	0x40003c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000800 	.word	0x48000800

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f97f 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <EXTI9_5_IRQHandler+0x14>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001762:	2040      	movs	r0, #64	@ 0x40
 8001764:	f000 fcb4 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002e8 	.word	0x200002e8

08001770 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <_sbrk+0x50>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x16>
		heap_end = &end;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <_sbrk+0x50>)
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <_sbrk+0x54>)
 8001784:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <_sbrk+0x50>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <_sbrk+0x50>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	466a      	mov	r2, sp
 8001796:	4293      	cmp	r3, r2
 8001798:	d907      	bls.n	80017aa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800179a:	f002 f9fd 	bl	8003b98 <__errno>
 800179e:	4603      	mov	r3, r0
 80017a0:	220c      	movs	r2, #12
 80017a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017a8:	e006      	b.n	80017b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <_sbrk+0x50>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a03      	ldr	r2, [pc, #12]	@ (80017c0 <_sbrk+0x50>)
 80017b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000035c 	.word	0x2000035c
 80017c4:	200004b0 	.word	0x200004b0

080017c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <SystemInit+0x64>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d2:	4a16      	ldr	r2, [pc, #88]	@ (800182c <SystemInit+0x64>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <SystemInit+0x68>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <SystemInit+0x68>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <SystemInit+0x68>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <SystemInit+0x68>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001830 <SystemInit+0x68>)
 80017f4:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80017f8:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80017fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <SystemInit+0x68>)
 8001800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001804:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <SystemInit+0x68>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a09      	ldr	r2, [pc, #36]	@ (8001830 <SystemInit+0x68>)
 800180c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001810:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <SystemInit+0x68>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <SystemInit+0x64>)
 800181a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800181e:	609a      	str	r2, [r3, #8]
#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	40021000 	.word	0x40021000

08001834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4907      	ldr	r1, [pc, #28]	@ (800186c <__NVIC_EnableIRQ+0x38>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	@ (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	@ (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <timer_init>:
#include "timer.h"
#include <stm32l475xx.h>


void timer_init(TIM_TypeDef* timer)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 0201 	bic.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	601a      	str	r2, [r3, #0]
	timer->CNT = 0;//making the timer counter 0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
	timer->SR = 0;//making the interrupt flag 0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; //adding the clock for TIM2
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <timer_init+0x68>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	4a10      	ldr	r2, [pc, #64]	@ (800192c <timer_init+0x68>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6593      	str	r3, [r2, #88]	@ 0x58
	timer->PSC = 8000-1; // Making the clock frequency 1ms
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
	timer->ARR = 49; // Setting the timer interrupt to 50ms
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2231      	movs	r2, #49	@ 0x31
 80018fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer->DIER|=TIM_DIER_UIE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 800190a:	201c      	movs	r0, #28
 800190c:	f7ff ff92 	bl	8001834 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 0);
 8001910:	2100      	movs	r1, #0
 8001912:	201c      	movs	r0, #28
 8001914:	f7ff ffac 	bl	8001870 <__NVIC_SetPriority>
	timer->CR1|= TIM_CR1_CEN; //Starting the timer
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f043 0201 	orr.w	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000

08001930 <timer_set_ms>:
{
	timer->CNT = 0; // Reseting the timer to zero
}

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
	timer->ARR = period_ms-1; // Setting the timer interrupt to whatever is passed in
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	3b01      	subs	r3, #1
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800198c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001958:	f7ff ff36 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <LoopForever+0x6>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	@ (8001994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <LoopForever+0xe>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	@ (80019a0 <LoopForever+0x16>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f002 f90f 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001986:	f7ff fbef 	bl	8001168 <main>

0800198a <LoopForever>:

LoopForever:
    b LoopForever
 800198a:	e7fe      	b.n	800198a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800198c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001998:	080043f4 	.word	0x080043f4
  ldr r2, =_sbss
 800199c:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80019a0:	200004ac 	.word	0x200004ac

080019a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>

080019a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f971 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f80e 	bl	80019d8 <HAL_InitTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	e001      	b.n	80019cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019c8:	f7ff fe2e 	bl	8001628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <HAL_InitTick+0x6c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d023      	beq.n	8001a34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_InitTick+0x70>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_InitTick+0x6c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f97d 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10f      	bne.n	8001a2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d809      	bhi.n	8001a28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a1c:	f000 f947 	bl	8001cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_InitTick+0x74>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e004      	b.n	8001a38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	e001      	b.n	8001a38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000015c 	.word	0x2000015c
 8001a48:	20000154 	.word	0x20000154
 8001a4c:	20000158 	.word	0x20000158

08001a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	2000015c 	.word	0x2000015c
 8001a74:	20000360 	.word	0x20000360

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000360 	.word	0x20000360

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000015c 	.word	0x2000015c

08001ad8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_ResumeTick+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_ResumeTick+0x1c>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <__NVIC_SetPriorityGrouping>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e17f      	b.n	800202c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8171 	beq.w	8002026 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d005      	beq.n	8001d5c <HAL_GPIO_Init+0x40>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d118      	bne.n	8001dfc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80ac 	beq.w	8002026 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	4b5f      	ldr	r3, [pc, #380]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eda:	4b5c      	ldr	r3, [pc, #368]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee6:	4a5a      	ldr	r2, [pc, #360]	@ (8002050 <HAL_GPIO_Init+0x334>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f10:	d025      	beq.n	8001f5e <HAL_GPIO_Init+0x242>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	@ (8002054 <HAL_GPIO_Init+0x338>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <HAL_GPIO_Init+0x23e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002058 <HAL_GPIO_Init+0x33c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x23a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	@ (800205c <HAL_GPIO_Init+0x340>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x236>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002060 <HAL_GPIO_Init+0x344>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x232>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	@ (8002064 <HAL_GPIO_Init+0x348>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <HAL_GPIO_Init+0x34c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e00c      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e00a      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f70:	4937      	ldr	r1, [pc, #220]	@ (8002050 <HAL_GPIO_Init+0x334>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fa2:	4a32      	ldr	r2, [pc, #200]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fcc:	4a27      	ldr	r2, [pc, #156]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002020:	4a12      	ldr	r2, [pc, #72]	@ (800206c <HAL_GPIO_Init+0x350>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae78 	bne.w	8001d2c <HAL_GPIO_Init+0x10>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	48000400 	.word	0x48000400
 8002058:	48000800 	.word	0x48000800
 800205c:	48000c00 	.word	0x48000c00
 8002060:	48001000 	.word	0x48001000
 8002064:	48001400 	.word	0x48001400
 8002068:	48001800 	.word	0x48001800
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f806 	bl	8002100 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002128:	d104      	bne.n	8002134 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f897 	bl	8002260 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002132:	e003      	b.n	800213c <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f868 	bl	800220c <HAL_PWREx_EnterSTOP0Mode>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HAL_PWREx_GetVoltageRange+0x18>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40007000 	.word	0x40007000

08002160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800216e:	d130      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800217c:	d038      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002186:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2232      	movs	r2, #50	@ 0x32
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a4:	e002      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b8:	d102      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f2      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021cc:	d110      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e00f      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021de:	d007      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021e8:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000
 8002204:	20000154 	.word	0x20000154
 8002208:	431bde83 	.word	0x431bde83

0800220c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800221c:	f023 0307 	bic.w	r3, r3, #7
 8002220:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002234:	bf30      	wfi
 8002236:	e002      	b.n	800223e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002238:	bf40      	sev
    __WFE();
 800223a:	bf20      	wfe
    __WFE();
 800223c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	4a06      	ldr	r2, [pc, #24]	@ (800225c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6113      	str	r3, [r2, #16]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0307 	bic.w	r3, r3, #7
 8002272:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800227a:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800228c:	bf30      	wfi
 800228e:	e002      	b.n	8002296 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002290:	bf40      	sev
    __WFE();
 8002292:	bf20      	wfe
    __WFE();
 8002294:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002296:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	6113      	str	r3, [r2, #16]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40007000 	.word	0x40007000
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e3ca      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	4b97      	ldr	r3, [pc, #604]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d4:	4b94      	ldr	r3, [pc, #592]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80e4 	beq.w	80024b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_RCC_OscConfig+0x4a>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	f040 808b 	bne.w	8002410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	f040 8087 	bne.w	8002410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002302:	4b89      	ldr	r3, [pc, #548]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x62>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e3a2      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	4b82      	ldr	r3, [pc, #520]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_RCC_OscConfig+0x7c>
 800232a:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002332:	e005      	b.n	8002340 <HAL_RCC_OscConfig+0x88>
 8002334:	4b7c      	ldr	r3, [pc, #496]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002340:	4293      	cmp	r3, r2
 8002342:	d223      	bcs.n	800238c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fd1d 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e383      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002358:	4b73      	ldr	r3, [pc, #460]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a72      	ldr	r2, [pc, #456]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800235e:	f043 0308 	orr.w	r3, r3, #8
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b70      	ldr	r3, [pc, #448]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	496d      	ldr	r1, [pc, #436]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002376:	4b6c      	ldr	r3, [pc, #432]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	4968      	ldr	r1, [pc, #416]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
 800238a:	e025      	b.n	80023d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238c:	4b66      	ldr	r3, [pc, #408]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4960      	ldr	r1, [pc, #384]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	495b      	ldr	r1, [pc, #364]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fcdd 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e343      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023d8:	f000 fc4a 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b52      	ldr	r3, [pc, #328]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	4950      	ldr	r1, [pc, #320]	@ (800252c <HAL_RCC_OscConfig+0x274>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002530 <HAL_RCC_OscConfig+0x278>)
 80023f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002534 <HAL_RCC_OscConfig+0x27c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff faeb 	bl	80019d8 <HAL_InitTick>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d052      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	e327      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d032      	beq.n	800247e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002418:	4b43      	ldr	r3, [pc, #268]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a42      	ldr	r2, [pc, #264]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002424:	f7ff fb28 	bl	8001a78 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800242c:	f7ff fb24 	bl	8001a78 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e310      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243e:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800244a:	4b37      	ldr	r3, [pc, #220]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a36      	ldr	r2, [pc, #216]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002450:	f043 0308 	orr.w	r3, r3, #8
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4931      	ldr	r1, [pc, #196]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002468:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	492c      	ldr	r1, [pc, #176]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
 800247c:	e01a      	b.n	80024b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800247e:	4b2a      	ldr	r3, [pc, #168]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a29      	ldr	r2, [pc, #164]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800248a:	f7ff faf5 	bl	8001a78 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002492:	f7ff faf1 	bl	8001a78 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e2dd      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a4:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x1da>
 80024b0:	e000      	b.n	80024b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d074      	beq.n	80025aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x21a>
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d10e      	bne.n	80024ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d064      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2f0>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d160      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e2ba      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x24a>
 80024f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e026      	b.n	8002550 <HAL_RCC_OscConfig+0x298>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800250a:	d115      	bne.n	8002538 <HAL_RCC_OscConfig+0x280>
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a05      	ldr	r2, [pc, #20]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 8002512:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a02      	ldr	r2, [pc, #8]	@ (8002528 <HAL_RCC_OscConfig+0x270>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x298>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	08004370 	.word	0x08004370
 8002530:	20000154 	.word	0x20000154
 8002534:	20000158 	.word	0x20000158
 8002538:	4ba0      	ldr	r3, [pc, #640]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a9f      	ldr	r2, [pc, #636]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b9d      	ldr	r3, [pc, #628]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a9c      	ldr	r2, [pc, #624]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fa8e 	bl	8001a78 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fa8a 	bl	8001a78 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	@ 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e276      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002572:	4b92      	ldr	r3, [pc, #584]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x2a8>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff fa7a 	bl	8001a78 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fa76 	bl	8001a78 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e262      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	4b88      	ldr	r3, [pc, #544]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x2d0>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d060      	beq.n	8002678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_OscConfig+0x310>
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d116      	bne.n	80025f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c8:	4b7c      	ldr	r3, [pc, #496]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_OscConfig+0x328>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e23f      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b76      	ldr	r3, [pc, #472]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	4973      	ldr	r1, [pc, #460]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f4:	e040      	b.n	8002678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d023      	beq.n	8002646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fe:	4b6f      	ldr	r3, [pc, #444]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6e      	ldr	r2, [pc, #440]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7ff fa35 	bl	8001a78 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002612:	f7ff fa31 	bl	8001a78 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e21d      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	4b65      	ldr	r3, [pc, #404]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b62      	ldr	r3, [pc, #392]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	495f      	ldr	r1, [pc, #380]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
 8002644:	e018      	b.n	8002678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b5d      	ldr	r3, [pc, #372]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a5c      	ldr	r2, [pc, #368]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800264c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7ff fa11 	bl	8001a78 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7ff fa0d 	bl	8001a78 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1f9      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266c:	4b53      	ldr	r3, [pc, #332]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d03c      	beq.n	80026fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01c      	beq.n	80026c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268c:	4b4b      	ldr	r3, [pc, #300]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002692:	4a4a      	ldr	r2, [pc, #296]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7ff f9ec 	bl	8001a78 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7ff f9e8 	bl	8001a78 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1d4      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80026b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <HAL_RCC_OscConfig+0x3ec>
 80026c4:	e01b      	b.n	80026fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80026c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026cc:	4a3b      	ldr	r2, [pc, #236]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7ff f9cf 	bl	8001a78 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026de:	f7ff f9cb 	bl	8001a78 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e1b7      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f0:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80026f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ef      	bne.n	80026de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80a6 	beq.w	8002858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270c:	2300      	movs	r3, #0
 800270e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002710:	4b2a      	ldr	r3, [pc, #168]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	@ 0x58
 8002728:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002734:	2301      	movs	r3, #1
 8002736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002738:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <HAL_RCC_OscConfig+0x508>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d118      	bne.n	8002776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002744:	4b1e      	ldr	r3, [pc, #120]	@ (80027c0 <HAL_RCC_OscConfig+0x508>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <HAL_RCC_OscConfig+0x508>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002750:	f7ff f992 	bl	8001a78 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7ff f98e 	bl	8001a78 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e17a      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <HAL_RCC_OscConfig+0x508>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d108      	bne.n	8002790 <HAL_RCC_OscConfig+0x4d8>
 800277e:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002784:	4a0d      	ldr	r2, [pc, #52]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800278e:	e029      	b.n	80027e4 <HAL_RCC_OscConfig+0x52c>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d115      	bne.n	80027c4 <HAL_RCC_OscConfig+0x50c>
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279e:	4a07      	ldr	r2, [pc, #28]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a8:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	4a03      	ldr	r2, [pc, #12]	@ (80027bc <HAL_RCC_OscConfig+0x504>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b8:	e014      	b.n	80027e4 <HAL_RCC_OscConfig+0x52c>
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
 80027c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ca:	4a9b      	ldr	r2, [pc, #620]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d4:	4b98      	ldr	r3, [pc, #608]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027da:	4a97      	ldr	r2, [pc, #604]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d016      	beq.n	800281a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7ff f944 	bl	8001a78 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7ff f940 	bl	8001a78 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e12a      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ed      	beq.n	80027f4 <HAL_RCC_OscConfig+0x53c>
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7ff f92d 	bl	8001a78 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7ff f929 	bl	8001a78 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e113      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002838:	4b7f      	ldr	r3, [pc, #508]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ed      	bne.n	8002822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d105      	bne.n	8002858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002850:	4a79      	ldr	r2, [pc, #484]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002856:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80fe 	beq.w	8002a5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	2b02      	cmp	r3, #2
 8002868:	f040 80d0 	bne.w	8002a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800286c:	4b72      	ldr	r3, [pc, #456]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	429a      	cmp	r2, r3
 800287e:	d130      	bne.n	80028e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	3b01      	subs	r3, #1
 800288c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d127      	bne.n	80028e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11f      	bne.n	80028e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028ac:	2a07      	cmp	r2, #7
 80028ae:	bf14      	ite	ne
 80028b0:	2201      	movne	r2, #1
 80028b2:	2200      	moveq	r2, #0
 80028b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d113      	bne.n	80028e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	3b01      	subs	r3, #1
 80028dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d06e      	beq.n	80029c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d069      	beq.n	80029bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028f4:	4b50      	ldr	r3, [pc, #320]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0ad      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002904:	4b4c      	ldr	r3, [pc, #304]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4b      	ldr	r2, [pc, #300]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002910:	f7ff f8b2 	bl	8001a78 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7ff f8ae 	bl	8001a78 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e09a      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002936:	4b40      	ldr	r3, [pc, #256]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b40      	ldr	r3, [pc, #256]	@ (8002a3c <HAL_RCC_OscConfig+0x784>)
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002946:	3a01      	subs	r2, #1
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	4311      	orrs	r1, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002950:	0212      	lsls	r2, r2, #8
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002958:	0852      	lsrs	r2, r2, #1
 800295a:	3a01      	subs	r2, #1
 800295c:	0552      	lsls	r2, r2, #21
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002964:	0852      	lsrs	r2, r2, #1
 8002966:	3a01      	subs	r2, #1
 8002968:	0652      	lsls	r2, r2, #25
 800296a:	4311      	orrs	r1, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002970:	0912      	lsrs	r2, r2, #4
 8002972:	0452      	lsls	r2, r2, #17
 8002974:	430a      	orrs	r2, r1
 8002976:	4930      	ldr	r1, [pc, #192]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800297c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2d      	ldr	r2, [pc, #180]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002988:	4b2b      	ldr	r3, [pc, #172]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002994:	f7ff f870 	bl	8001a78 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7ff f86c 	bl	8001a78 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e058      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	4b22      	ldr	r3, [pc, #136]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ba:	e050      	b.n	8002a5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e04f      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d148      	bne.n	8002a5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a16      	ldr	r2, [pc, #88]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 80029de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029e4:	f7ff f848 	bl	8001a78 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7ff f844 	bl	8001a78 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e030      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x734>
 8002a0a:	e028      	b.n	8002a5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d023      	beq.n	8002a5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a08      	ldr	r2, [pc, #32]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 8002a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7ff f82b 	bl	8001a78 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a24:	e00c      	b.n	8002a40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7ff f827 	bl	8001a78 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d905      	bls.n	8002a40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e013      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_OscConfig+0x7b0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ec      	bne.n	8002a26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_RCC_OscConfig+0x7b0>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4905      	ldr	r1, [pc, #20]	@ (8002a68 <HAL_RCC_OscConfig+0x7b0>)
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCC_OscConfig+0x7b4>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
 8002a58:	e001      	b.n	8002a5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	feeefffc 	.word	0xfeeefffc

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0e7      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b75      	ldr	r3, [pc, #468]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d910      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b72      	ldr	r3, [pc, #456]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 0207 	bic.w	r2, r3, #7
 8002a9a:	4970      	ldr	r1, [pc, #448]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cf      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b66      	ldr	r3, [pc, #408]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d908      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b63      	ldr	r3, [pc, #396]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4960      	ldr	r1, [pc, #384]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04c      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0a6      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0e:	4b54      	ldr	r3, [pc, #336]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d115      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e09a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b26:	4b4e      	ldr	r3, [pc, #312]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e08e      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b36:	4b4a      	ldr	r3, [pc, #296]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e086      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4b46      	ldr	r3, [pc, #280]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4943      	ldr	r1, [pc, #268]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b58:	f7fe ff8e 	bl	8001a78 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7fe ff8a 	bl	8001a78 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e06e      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b3a      	ldr	r3, [pc, #232]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b31      	ldr	r3, [pc, #196]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d208      	bcs.n	8002bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	492b      	ldr	r1, [pc, #172]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb6:	4b29      	ldr	r3, [pc, #164]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d210      	bcs.n	8002be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc4:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 0207 	bic.w	r2, r3, #7
 8002bcc:	4923      	ldr	r1, [pc, #140]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd4:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <HAL_RCC_ClockConfig+0x1ec>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e036      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4918      	ldr	r1, [pc, #96]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4910      	ldr	r1, [pc, #64]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c24:	f000 f824 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	490b      	ldr	r1, [pc, #44]	@ (8002c64 <HAL_RCC_ClockConfig+0x1f4>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_RCC_ClockConfig+0x1fc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fec5 	bl	80019d8 <HAL_InitTick>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c52:	7afb      	ldrb	r3, [r7, #11]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08004370 	.word	0x08004370
 8002c68:	20000154 	.word	0x20000154
 8002c6c:	20000158 	.word	0x20000158

08002c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d121      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d11e      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ca4:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cb0:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e005      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d102      	bne.n	8002cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ce8:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e004      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf4:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d134      	bne.n	8002d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d003      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0xac>
 8002d14:	e005      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d18:	617b      	str	r3, [r7, #20]
      break;
 8002d1a:	e005      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d1e:	617b      	str	r3, [r7, #20]
      break;
 8002d20:	e002      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	617b      	str	r3, [r7, #20]
      break;
 8002d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	3301      	adds	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	fb03 f202 	mul.w	r2, r3, r2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	0e5b      	lsrs	r3, r3, #25
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d68:	69bb      	ldr	r3, [r7, #24]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	@ 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08004380 	.word	0x08004380
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	007a1200 	.word	0x007a1200

08002d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d94:	4b2a      	ldr	r3, [pc, #168]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da0:	f7ff f9d0 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002da4:	6178      	str	r0, [r7, #20]
 8002da6:	e014      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	4a24      	ldr	r2, [pc, #144]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db4:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f9c0 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd8:	d10b      	bne.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	@ 0x80
 8002dde:	d919      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002de4:	d902      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de6:	2302      	movs	r3, #2
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	e013      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e010      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	@ 0x80
 8002df6:	d902      	bls.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002df8:	2303      	movs	r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e00a      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b80      	cmp	r3, #128	@ 0x80
 8002e02:	d102      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e04:	2302      	movs	r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e004      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b70      	cmp	r3, #112	@ 0x70
 8002e0e:	d101      	bne.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0207 	bic.w	r2, r3, #7
 8002e1c:	4909      	ldr	r1, [pc, #36]	@ (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e24:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e095      	b.n	8002f86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e6a:	d009      	beq.n	8002e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
 8002e72:	e005      	b.n	8002e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe fbe8 	bl	8001670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ec0:	d902      	bls.n	8002ec8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e002      	b.n	8002ece <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ed6:	d007      	beq.n	8002ee8 <HAL_SPI_Init+0xa0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2a:	ea42 0103 	orr.w	r1, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	f003 0204 	and.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f64:	ea42 0103 	orr.w	r1, r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b088      	sub	sp, #32
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_SPI_Transmit+0x22>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e15f      	b.n	8003270 <HAL_SPI_Transmit+0x2e2>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb8:	f7fe fd5e 	bl	8001a78 <HAL_GetTick>
 8002fbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fd2:	e148      	b.n	8003266 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_SPI_Transmit+0x52>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fe4:	e13f      	b.n	8003266 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003030:	d10f      	bne.n	8003052 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	d007      	beq.n	8003070 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003078:	d94f      	bls.n	800311a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Transmit+0xfa>
 8003082:	8afb      	ldrh	r3, [r7, #22]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d142      	bne.n	800310e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003098:	1c9a      	adds	r2, r3, #2
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ac:	e02f      	b.n	800310e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d112      	bne.n	80030e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030e0:	e015      	b.n	800310e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e2:	f7fe fcc9 	bl	8001a78 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d803      	bhi.n	80030fa <HAL_SPI_Transmit+0x16c>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_Transmit+0x172>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800310c:	e0ab      	b.n	8003266 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ca      	bne.n	80030ae <HAL_SPI_Transmit+0x120>
 8003118:	e080      	b.n	800321c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Transmit+0x19a>
 8003122:	8afb      	ldrh	r3, [r7, #22]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d174      	bne.n	8003212 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d912      	bls.n	8003158 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	1c9a      	adds	r2, r3, #2
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b02      	subs	r3, #2
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003156:	e05c      	b.n	8003212 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	330c      	adds	r3, #12
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800317e:	e048      	b.n	8003212 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d12b      	bne.n	80031e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d912      	bls.n	80031be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b02      	subs	r3, #2
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031bc:	e029      	b.n	8003212 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031e4:	e015      	b.n	8003212 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e6:	f7fe fc47 	bl	8001a78 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d803      	bhi.n	80031fe <HAL_SPI_Transmit+0x270>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031fc:	d102      	bne.n	8003204 <HAL_SPI_Transmit+0x276>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003210:	e029      	b.n	8003266 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1b1      	bne.n	8003180 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	6839      	ldr	r1, [r7, #0]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fb69 	bl	80038f8 <SPI_EndRxTxTransaction>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e003      	b.n	8003266 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800326e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	@ 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003286:	2301      	movs	r3, #1
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_SPI_TransmitReceive+0x26>
 800329a:	2302      	movs	r3, #2
 800329c:	e20a      	b.n	80036b4 <HAL_SPI_TransmitReceive+0x43c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a6:	f7fe fbe7 	bl	8001a78 <HAL_GetTick>
 80032aa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c2:	7efb      	ldrb	r3, [r7, #27]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d00e      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x6e>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ce:	d106      	bne.n	80032de <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <HAL_SPI_TransmitReceive+0x66>
 80032d8:	7efb      	ldrb	r3, [r7, #27]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d003      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032de:	2302      	movs	r3, #2
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032e4:	e1e0      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0x80>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0x80>
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d103      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032fe:	e1d3      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b04      	cmp	r3, #4
 800330a:	d003      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2205      	movs	r2, #5
 8003310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	887a      	ldrh	r2, [r7, #2]
 800333a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003356:	d802      	bhi.n	800335e <HAL_SPI_TransmitReceive+0xe6>
 8003358:	8a3b      	ldrh	r3, [r7, #16]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d908      	bls.n	8003370 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e007      	b.n	8003380 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800337e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	d007      	beq.n	800339e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a6:	f240 8081 	bls.w	80034ac <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x140>
 80033b2:	8a7b      	ldrh	r3, [r7, #18]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d16d      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033dc:	e05a      	b.n	8003494 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d11b      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x1ac>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x1ac>
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d113      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d11c      	bne.n	800346c <HAL_SPI_TransmitReceive+0x1f4>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	b292      	uxth	r2, r2
 800344a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003468:	2301      	movs	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800346c:	f7fe fb04 	bl	8001a78 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003478:	429a      	cmp	r2, r3
 800347a:	d80b      	bhi.n	8003494 <HAL_SPI_TransmitReceive+0x21c>
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003482:	d007      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003492:	e109      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d19f      	bne.n	80033de <HAL_SPI_TransmitReceive+0x166>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d199      	bne.n	80033de <HAL_SPI_TransmitReceive+0x166>
 80034aa:	e0e3      	b.n	8003674 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x244>
 80034b4:	8a7b      	ldrh	r3, [r7, #18]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	f040 80cf 	bne.w	800365a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d912      	bls.n	80034ec <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b02      	subs	r3, #2
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034ea:	e0b6      	b.n	800365a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003512:	e0a2      	b.n	800365a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d134      	bne.n	800358c <HAL_SPI_TransmitReceive+0x314>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02f      	beq.n	800358c <HAL_SPI_TransmitReceive+0x314>
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	2b01      	cmp	r3, #1
 8003530:	d12c      	bne.n	800358c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d912      	bls.n	8003562 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b02      	subs	r3, #2
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003560:	e012      	b.n	8003588 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d148      	bne.n	800362c <HAL_SPI_TransmitReceive+0x3b4>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d042      	beq.n	800362c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d923      	bls.n	80035fa <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	b292      	uxth	r2, r2
 80035be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c4:	1c9a      	adds	r2, r3, #2
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b02      	subs	r3, #2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d81f      	bhi.n	8003628 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e016      	b.n	8003628 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f103 020c 	add.w	r2, r3, #12
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003628:	2301      	movs	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800362c:	f7fe fa24 	bl	8001a78 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003638:	429a      	cmp	r2, r3
 800363a:	d803      	bhi.n	8003644 <HAL_SPI_TransmitReceive+0x3cc>
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003642:	d102      	bne.n	800364a <HAL_SPI_TransmitReceive+0x3d2>
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	2b00      	cmp	r3, #0
 8003648:	d107      	bne.n	800365a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003658:	e026      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f af57 	bne.w	8003514 <HAL_SPI_TransmitReceive+0x29c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	f47f af50 	bne.w	8003514 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f93d 	bl	80038f8 <SPI_EndRxTxTransaction>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369e:	e003      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3728      	adds	r7, #40	@ 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036cc:	f7fe f9d4 	bl	8001a78 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036dc:	f7fe f9cc 	bl	8001a78 <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e2:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	0d1b      	lsrs	r3, r3, #20
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f2:	e054      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036fa:	d050      	beq.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036fc:	f7fe f9bc 	bl	8001a78 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13d      	bne.n	800378e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800372a:	d111      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003734:	d004      	beq.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373e:	d107      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800374e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003758:	d10f      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e017      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3b01      	subs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d19b      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000154 	.word	0x20000154

080037cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	@ 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037de:	f7fe f94b 	bl	8001a78 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80037ee:	f7fe f943 	bl	8001a78 <HAL_GetTick>
 80037f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037fc:	4b3d      	ldr	r3, [pc, #244]	@ (80038f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00da      	lsls	r2, r3, #3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	0d1b      	lsrs	r3, r3, #20
 800380c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003814:	e060      	b.n	80038d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800381c:	d107      	bne.n	800382e <SPI_WaitFifoStateUntilTimeout+0x62>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800382c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003834:	d050      	beq.n	80038d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003836:	f7fe f91f 	bl	8001a78 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003842:	429a      	cmp	r2, r3
 8003844:	d902      	bls.n	800384c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d13d      	bne.n	80038c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800385a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003864:	d111      	bne.n	800388a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386e:	d004      	beq.n	800387a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003878:	d107      	bne.n	800388a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003888:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003892:	d10f      	bne.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e010      	b.n	80038ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d196      	bne.n	8003816 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	@ 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000154 	.word	0x20000154

080038f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff ff5b 	bl	80037cc <SPI_WaitFifoStateUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e027      	b.n	800397c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	@ 0x80
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fec0 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e014      	b.n	800397c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff ff34 	bl	80037cc <SPI_WaitFifoStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e000      	b.n	800397c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <malloc>:
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <malloc+0xc>)
 8003986:	4601      	mov	r1, r0
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f000 b82d 	b.w	80039e8 <_malloc_r>
 800398e:	bf00      	nop
 8003990:	20000160 	.word	0x20000160

08003994 <free>:
 8003994:	4b02      	ldr	r3, [pc, #8]	@ (80039a0 <free+0xc>)
 8003996:	4601      	mov	r1, r0
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f000 b937 	b.w	8003c0c <_free_r>
 800399e:	bf00      	nop
 80039a0:	20000160 	.word	0x20000160

080039a4 <sbrk_aligned>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4e0f      	ldr	r6, [pc, #60]	@ (80039e4 <sbrk_aligned+0x40>)
 80039a8:	460c      	mov	r4, r1
 80039aa:	6831      	ldr	r1, [r6, #0]
 80039ac:	4605      	mov	r5, r0
 80039ae:	b911      	cbnz	r1, 80039b6 <sbrk_aligned+0x12>
 80039b0:	f000 f8e2 	bl	8003b78 <_sbrk_r>
 80039b4:	6030      	str	r0, [r6, #0]
 80039b6:	4621      	mov	r1, r4
 80039b8:	4628      	mov	r0, r5
 80039ba:	f000 f8dd 	bl	8003b78 <_sbrk_r>
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	d103      	bne.n	80039ca <sbrk_aligned+0x26>
 80039c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80039c6:	4620      	mov	r0, r4
 80039c8:	bd70      	pop	{r4, r5, r6, pc}
 80039ca:	1cc4      	adds	r4, r0, #3
 80039cc:	f024 0403 	bic.w	r4, r4, #3
 80039d0:	42a0      	cmp	r0, r4
 80039d2:	d0f8      	beq.n	80039c6 <sbrk_aligned+0x22>
 80039d4:	1a21      	subs	r1, r4, r0
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 f8ce 	bl	8003b78 <_sbrk_r>
 80039dc:	3001      	adds	r0, #1
 80039de:	d1f2      	bne.n	80039c6 <sbrk_aligned+0x22>
 80039e0:	e7ef      	b.n	80039c2 <sbrk_aligned+0x1e>
 80039e2:	bf00      	nop
 80039e4:	20000364 	.word	0x20000364

080039e8 <_malloc_r>:
 80039e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ec:	1ccd      	adds	r5, r1, #3
 80039ee:	f025 0503 	bic.w	r5, r5, #3
 80039f2:	3508      	adds	r5, #8
 80039f4:	2d0c      	cmp	r5, #12
 80039f6:	bf38      	it	cc
 80039f8:	250c      	movcc	r5, #12
 80039fa:	2d00      	cmp	r5, #0
 80039fc:	4606      	mov	r6, r0
 80039fe:	db01      	blt.n	8003a04 <_malloc_r+0x1c>
 8003a00:	42a9      	cmp	r1, r5
 8003a02:	d904      	bls.n	8003a0e <_malloc_r+0x26>
 8003a04:	230c      	movs	r3, #12
 8003a06:	6033      	str	r3, [r6, #0]
 8003a08:	2000      	movs	r0, #0
 8003a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ae4 <_malloc_r+0xfc>
 8003a12:	f000 f89d 	bl	8003b50 <__malloc_lock>
 8003a16:	f8d8 3000 	ldr.w	r3, [r8]
 8003a1a:	461c      	mov	r4, r3
 8003a1c:	bb44      	cbnz	r4, 8003a70 <_malloc_r+0x88>
 8003a1e:	4629      	mov	r1, r5
 8003a20:	4630      	mov	r0, r6
 8003a22:	f7ff ffbf 	bl	80039a4 <sbrk_aligned>
 8003a26:	1c43      	adds	r3, r0, #1
 8003a28:	4604      	mov	r4, r0
 8003a2a:	d158      	bne.n	8003ade <_malloc_r+0xf6>
 8003a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a30:	4627      	mov	r7, r4
 8003a32:	2f00      	cmp	r7, #0
 8003a34:	d143      	bne.n	8003abe <_malloc_r+0xd6>
 8003a36:	2c00      	cmp	r4, #0
 8003a38:	d04b      	beq.n	8003ad2 <_malloc_r+0xea>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	4639      	mov	r1, r7
 8003a3e:	4630      	mov	r0, r6
 8003a40:	eb04 0903 	add.w	r9, r4, r3
 8003a44:	f000 f898 	bl	8003b78 <_sbrk_r>
 8003a48:	4581      	cmp	r9, r0
 8003a4a:	d142      	bne.n	8003ad2 <_malloc_r+0xea>
 8003a4c:	6821      	ldr	r1, [r4, #0]
 8003a4e:	1a6d      	subs	r5, r5, r1
 8003a50:	4629      	mov	r1, r5
 8003a52:	4630      	mov	r0, r6
 8003a54:	f7ff ffa6 	bl	80039a4 <sbrk_aligned>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d03a      	beq.n	8003ad2 <_malloc_r+0xea>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	442b      	add	r3, r5
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	f8d8 3000 	ldr.w	r3, [r8]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	bb62      	cbnz	r2, 8003ac4 <_malloc_r+0xdc>
 8003a6a:	f8c8 7000 	str.w	r7, [r8]
 8003a6e:	e00f      	b.n	8003a90 <_malloc_r+0xa8>
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	1b52      	subs	r2, r2, r5
 8003a74:	d420      	bmi.n	8003ab8 <_malloc_r+0xd0>
 8003a76:	2a0b      	cmp	r2, #11
 8003a78:	d917      	bls.n	8003aaa <_malloc_r+0xc2>
 8003a7a:	1961      	adds	r1, r4, r5
 8003a7c:	42a3      	cmp	r3, r4
 8003a7e:	6025      	str	r5, [r4, #0]
 8003a80:	bf18      	it	ne
 8003a82:	6059      	strne	r1, [r3, #4]
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	bf08      	it	eq
 8003a88:	f8c8 1000 	streq.w	r1, [r8]
 8003a8c:	5162      	str	r2, [r4, r5]
 8003a8e:	604b      	str	r3, [r1, #4]
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f863 	bl	8003b5c <__malloc_unlock>
 8003a96:	f104 000b 	add.w	r0, r4, #11
 8003a9a:	1d23      	adds	r3, r4, #4
 8003a9c:	f020 0007 	bic.w	r0, r0, #7
 8003aa0:	1ac2      	subs	r2, r0, r3
 8003aa2:	bf1c      	itt	ne
 8003aa4:	1a1b      	subne	r3, r3, r0
 8003aa6:	50a3      	strne	r3, [r4, r2]
 8003aa8:	e7af      	b.n	8003a0a <_malloc_r+0x22>
 8003aaa:	6862      	ldr	r2, [r4, #4]
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	bf0c      	ite	eq
 8003ab0:	f8c8 2000 	streq.w	r2, [r8]
 8003ab4:	605a      	strne	r2, [r3, #4]
 8003ab6:	e7eb      	b.n	8003a90 <_malloc_r+0xa8>
 8003ab8:	4623      	mov	r3, r4
 8003aba:	6864      	ldr	r4, [r4, #4]
 8003abc:	e7ae      	b.n	8003a1c <_malloc_r+0x34>
 8003abe:	463c      	mov	r4, r7
 8003ac0:	687f      	ldr	r7, [r7, #4]
 8003ac2:	e7b6      	b.n	8003a32 <_malloc_r+0x4a>
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	d1fb      	bne.n	8003ac4 <_malloc_r+0xdc>
 8003acc:	2300      	movs	r3, #0
 8003ace:	6053      	str	r3, [r2, #4]
 8003ad0:	e7de      	b.n	8003a90 <_malloc_r+0xa8>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	6033      	str	r3, [r6, #0]
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f000 f840 	bl	8003b5c <__malloc_unlock>
 8003adc:	e794      	b.n	8003a08 <_malloc_r+0x20>
 8003ade:	6005      	str	r5, [r0, #0]
 8003ae0:	e7d6      	b.n	8003a90 <_malloc_r+0xa8>
 8003ae2:	bf00      	nop
 8003ae4:	20000368 	.word	0x20000368

08003ae8 <sniprintf>:
 8003ae8:	b40c      	push	{r2, r3}
 8003aea:	b530      	push	{r4, r5, lr}
 8003aec:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <sniprintf+0x64>)
 8003aee:	1e0c      	subs	r4, r1, #0
 8003af0:	681d      	ldr	r5, [r3, #0]
 8003af2:	b09d      	sub	sp, #116	@ 0x74
 8003af4:	da08      	bge.n	8003b08 <sniprintf+0x20>
 8003af6:	238b      	movs	r3, #139	@ 0x8b
 8003af8:	602b      	str	r3, [r5, #0]
 8003afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003afe:	b01d      	add	sp, #116	@ 0x74
 8003b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b04:	b002      	add	sp, #8
 8003b06:	4770      	bx	lr
 8003b08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b10:	bf14      	ite	ne
 8003b12:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003b16:	4623      	moveq	r3, r4
 8003b18:	9304      	str	r3, [sp, #16]
 8003b1a:	9307      	str	r3, [sp, #28]
 8003b1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b20:	9002      	str	r0, [sp, #8]
 8003b22:	9006      	str	r0, [sp, #24]
 8003b24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b2a:	ab21      	add	r3, sp, #132	@ 0x84
 8003b2c:	a902      	add	r1, sp, #8
 8003b2e:	4628      	mov	r0, r5
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	f000 f911 	bl	8003d58 <_svfiprintf_r>
 8003b36:	1c43      	adds	r3, r0, #1
 8003b38:	bfbc      	itt	lt
 8003b3a:	238b      	movlt	r3, #139	@ 0x8b
 8003b3c:	602b      	strlt	r3, [r5, #0]
 8003b3e:	2c00      	cmp	r4, #0
 8003b40:	d0dd      	beq.n	8003afe <sniprintf+0x16>
 8003b42:	9b02      	ldr	r3, [sp, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	e7d9      	b.n	8003afe <sniprintf+0x16>
 8003b4a:	bf00      	nop
 8003b4c:	20000160 	.word	0x20000160

08003b50 <__malloc_lock>:
 8003b50:	4801      	ldr	r0, [pc, #4]	@ (8003b58 <__malloc_lock+0x8>)
 8003b52:	f000 b84b 	b.w	8003bec <__retarget_lock_acquire_recursive>
 8003b56:	bf00      	nop
 8003b58:	200004a4 	.word	0x200004a4

08003b5c <__malloc_unlock>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	@ (8003b64 <__malloc_unlock+0x8>)
 8003b5e:	f000 b846 	b.w	8003bee <__retarget_lock_release_recursive>
 8003b62:	bf00      	nop
 8003b64:	200004a4 	.word	0x200004a4

08003b68 <memset>:
 8003b68:	4402      	add	r2, r0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <memset+0xa>
 8003b70:	4770      	bx	lr
 8003b72:	f803 1b01 	strb.w	r1, [r3], #1
 8003b76:	e7f9      	b.n	8003b6c <memset+0x4>

08003b78 <_sbrk_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4d06      	ldr	r5, [pc, #24]	@ (8003b94 <_sbrk_r+0x1c>)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	f7fd fdf4 	bl	8001770 <_sbrk>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_sbrk_r+0x1a>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_sbrk_r+0x1a>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	200004a8 	.word	0x200004a8

08003b98 <__errno>:
 8003b98:	4b01      	ldr	r3, [pc, #4]	@ (8003ba0 <__errno+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000160 	.word	0x20000160

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1b64      	subs	r4, r4, r5
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2600      	movs	r6, #0
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f000 fba8 	bl	800430c <_init>
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	080043ec 	.word	0x080043ec
 8003be0:	080043ec 	.word	0x080043ec
 8003be4:	080043ec 	.word	0x080043ec
 8003be8:	080043f0 	.word	0x080043f0

08003bec <__retarget_lock_acquire_recursive>:
 8003bec:	4770      	bx	lr

08003bee <__retarget_lock_release_recursive>:
 8003bee:	4770      	bx	lr

08003bf0 <memcpy>:
 8003bf0:	440a      	add	r2, r1
 8003bf2:	4291      	cmp	r1, r2
 8003bf4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003bf8:	d100      	bne.n	8003bfc <memcpy+0xc>
 8003bfa:	4770      	bx	lr
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c06:	4291      	cmp	r1, r2
 8003c08:	d1f9      	bne.n	8003bfe <memcpy+0xe>
 8003c0a:	bd10      	pop	{r4, pc}

08003c0c <_free_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4605      	mov	r5, r0
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d041      	beq.n	8003c98 <_free_r+0x8c>
 8003c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c18:	1f0c      	subs	r4, r1, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfb8      	it	lt
 8003c1e:	18e4      	addlt	r4, r4, r3
 8003c20:	f7ff ff96 	bl	8003b50 <__malloc_lock>
 8003c24:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <_free_r+0x90>)
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	b933      	cbnz	r3, 8003c38 <_free_r+0x2c>
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	6014      	str	r4, [r2, #0]
 8003c2e:	4628      	mov	r0, r5
 8003c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c34:	f7ff bf92 	b.w	8003b5c <__malloc_unlock>
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d908      	bls.n	8003c4e <_free_r+0x42>
 8003c3c:	6820      	ldr	r0, [r4, #0]
 8003c3e:	1821      	adds	r1, r4, r0
 8003c40:	428b      	cmp	r3, r1
 8003c42:	bf01      	itttt	eq
 8003c44:	6819      	ldreq	r1, [r3, #0]
 8003c46:	685b      	ldreq	r3, [r3, #4]
 8003c48:	1809      	addeq	r1, r1, r0
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	e7ed      	b.n	8003c2a <_free_r+0x1e>
 8003c4e:	461a      	mov	r2, r3
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b10b      	cbz	r3, 8003c58 <_free_r+0x4c>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d9fa      	bls.n	8003c4e <_free_r+0x42>
 8003c58:	6811      	ldr	r1, [r2, #0]
 8003c5a:	1850      	adds	r0, r2, r1
 8003c5c:	42a0      	cmp	r0, r4
 8003c5e:	d10b      	bne.n	8003c78 <_free_r+0x6c>
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	4401      	add	r1, r0
 8003c64:	1850      	adds	r0, r2, r1
 8003c66:	4283      	cmp	r3, r0
 8003c68:	6011      	str	r1, [r2, #0]
 8003c6a:	d1e0      	bne.n	8003c2e <_free_r+0x22>
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	4408      	add	r0, r1
 8003c74:	6010      	str	r0, [r2, #0]
 8003c76:	e7da      	b.n	8003c2e <_free_r+0x22>
 8003c78:	d902      	bls.n	8003c80 <_free_r+0x74>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	e7d6      	b.n	8003c2e <_free_r+0x22>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	1821      	adds	r1, r4, r0
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf04      	itt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	bf04      	itt	eq
 8003c90:	1809      	addeq	r1, r1, r0
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	6054      	str	r4, [r2, #4]
 8003c96:	e7ca      	b.n	8003c2e <_free_r+0x22>
 8003c98:	bd38      	pop	{r3, r4, r5, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000368 	.word	0x20000368

08003ca0 <__ssputs_r>:
 8003ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	688e      	ldr	r6, [r1, #8]
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	42be      	cmp	r6, r7
 8003caa:	680b      	ldr	r3, [r1, #0]
 8003cac:	4682      	mov	sl, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4690      	mov	r8, r2
 8003cb2:	d82d      	bhi.n	8003d10 <__ssputs_r+0x70>
 8003cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cbc:	d026      	beq.n	8003d0c <__ssputs_r+0x6c>
 8003cbe:	6965      	ldr	r5, [r4, #20]
 8003cc0:	6909      	ldr	r1, [r1, #16]
 8003cc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cc6:	eba3 0901 	sub.w	r9, r3, r1
 8003cca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cce:	1c7b      	adds	r3, r7, #1
 8003cd0:	444b      	add	r3, r9
 8003cd2:	106d      	asrs	r5, r5, #1
 8003cd4:	429d      	cmp	r5, r3
 8003cd6:	bf38      	it	cc
 8003cd8:	461d      	movcc	r5, r3
 8003cda:	0553      	lsls	r3, r2, #21
 8003cdc:	d527      	bpl.n	8003d2e <__ssputs_r+0x8e>
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f7ff fe82 	bl	80039e8 <_malloc_r>
 8003ce4:	4606      	mov	r6, r0
 8003ce6:	b360      	cbz	r0, 8003d42 <__ssputs_r+0xa2>
 8003ce8:	6921      	ldr	r1, [r4, #16]
 8003cea:	464a      	mov	r2, r9
 8003cec:	f7ff ff80 	bl	8003bf0 <memcpy>
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	6126      	str	r6, [r4, #16]
 8003cfe:	6165      	str	r5, [r4, #20]
 8003d00:	444e      	add	r6, r9
 8003d02:	eba5 0509 	sub.w	r5, r5, r9
 8003d06:	6026      	str	r6, [r4, #0]
 8003d08:	60a5      	str	r5, [r4, #8]
 8003d0a:	463e      	mov	r6, r7
 8003d0c:	42be      	cmp	r6, r7
 8003d0e:	d900      	bls.n	8003d12 <__ssputs_r+0x72>
 8003d10:	463e      	mov	r6, r7
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	4632      	mov	r2, r6
 8003d16:	4641      	mov	r1, r8
 8003d18:	f000 fad6 	bl	80042c8 <memmove>
 8003d1c:	68a3      	ldr	r3, [r4, #8]
 8003d1e:	1b9b      	subs	r3, r3, r6
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	4433      	add	r3, r6
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2e:	462a      	mov	r2, r5
 8003d30:	f000 fa9c 	bl	800426c <_realloc_r>
 8003d34:	4606      	mov	r6, r0
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d1e0      	bne.n	8003cfc <__ssputs_r+0x5c>
 8003d3a:	6921      	ldr	r1, [r4, #16]
 8003d3c:	4650      	mov	r0, sl
 8003d3e:	f7ff ff65 	bl	8003c0c <_free_r>
 8003d42:	230c      	movs	r3, #12
 8003d44:	f8ca 3000 	str.w	r3, [sl]
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d54:	e7e9      	b.n	8003d2a <__ssputs_r+0x8a>
	...

08003d58 <_svfiprintf_r>:
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	4698      	mov	r8, r3
 8003d5e:	898b      	ldrh	r3, [r1, #12]
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	b09d      	sub	sp, #116	@ 0x74
 8003d64:	4607      	mov	r7, r0
 8003d66:	460d      	mov	r5, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	d510      	bpl.n	8003d8e <_svfiprintf_r+0x36>
 8003d6c:	690b      	ldr	r3, [r1, #16]
 8003d6e:	b973      	cbnz	r3, 8003d8e <_svfiprintf_r+0x36>
 8003d70:	2140      	movs	r1, #64	@ 0x40
 8003d72:	f7ff fe39 	bl	80039e8 <_malloc_r>
 8003d76:	6028      	str	r0, [r5, #0]
 8003d78:	6128      	str	r0, [r5, #16]
 8003d7a:	b930      	cbnz	r0, 8003d8a <_svfiprintf_r+0x32>
 8003d7c:	230c      	movs	r3, #12
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d84:	b01d      	add	sp, #116	@ 0x74
 8003d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8a:	2340      	movs	r3, #64	@ 0x40
 8003d8c:	616b      	str	r3, [r5, #20]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d92:	2320      	movs	r3, #32
 8003d94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d9c:	2330      	movs	r3, #48	@ 0x30
 8003d9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f3c <_svfiprintf_r+0x1e4>
 8003da2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003da6:	f04f 0901 	mov.w	r9, #1
 8003daa:	4623      	mov	r3, r4
 8003dac:	469a      	mov	sl, r3
 8003dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db2:	b10a      	cbz	r2, 8003db8 <_svfiprintf_r+0x60>
 8003db4:	2a25      	cmp	r2, #37	@ 0x25
 8003db6:	d1f9      	bne.n	8003dac <_svfiprintf_r+0x54>
 8003db8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dbc:	d00b      	beq.n	8003dd6 <_svfiprintf_r+0x7e>
 8003dbe:	465b      	mov	r3, fp
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	f7ff ff6b 	bl	8003ca0 <__ssputs_r>
 8003dca:	3001      	adds	r0, #1
 8003dcc:	f000 80a7 	beq.w	8003f1e <_svfiprintf_r+0x1c6>
 8003dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dd2:	445a      	add	r2, fp
 8003dd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 809f 	beq.w	8003f1e <_svfiprintf_r+0x1c6>
 8003de0:	2300      	movs	r3, #0
 8003de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dea:	f10a 0a01 	add.w	sl, sl, #1
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	9307      	str	r3, [sp, #28]
 8003df2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003df6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003df8:	4654      	mov	r4, sl
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e00:	484e      	ldr	r0, [pc, #312]	@ (8003f3c <_svfiprintf_r+0x1e4>)
 8003e02:	f7fc f9ed 	bl	80001e0 <memchr>
 8003e06:	9a04      	ldr	r2, [sp, #16]
 8003e08:	b9d8      	cbnz	r0, 8003e42 <_svfiprintf_r+0xea>
 8003e0a:	06d0      	lsls	r0, r2, #27
 8003e0c:	bf44      	itt	mi
 8003e0e:	2320      	movmi	r3, #32
 8003e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e14:	0711      	lsls	r1, r2, #28
 8003e16:	bf44      	itt	mi
 8003e18:	232b      	movmi	r3, #43	@ 0x2b
 8003e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e24:	d015      	beq.n	8003e52 <_svfiprintf_r+0xfa>
 8003e26:	9a07      	ldr	r2, [sp, #28]
 8003e28:	4654      	mov	r4, sl
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f04f 0c0a 	mov.w	ip, #10
 8003e30:	4621      	mov	r1, r4
 8003e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e36:	3b30      	subs	r3, #48	@ 0x30
 8003e38:	2b09      	cmp	r3, #9
 8003e3a:	d94b      	bls.n	8003ed4 <_svfiprintf_r+0x17c>
 8003e3c:	b1b0      	cbz	r0, 8003e6c <_svfiprintf_r+0x114>
 8003e3e:	9207      	str	r2, [sp, #28]
 8003e40:	e014      	b.n	8003e6c <_svfiprintf_r+0x114>
 8003e42:	eba0 0308 	sub.w	r3, r0, r8
 8003e46:	fa09 f303 	lsl.w	r3, r9, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	46a2      	mov	sl, r4
 8003e50:	e7d2      	b.n	8003df8 <_svfiprintf_r+0xa0>
 8003e52:	9b03      	ldr	r3, [sp, #12]
 8003e54:	1d19      	adds	r1, r3, #4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	9103      	str	r1, [sp, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bfbb      	ittet	lt
 8003e5e:	425b      	neglt	r3, r3
 8003e60:	f042 0202 	orrlt.w	r2, r2, #2
 8003e64:	9307      	strge	r3, [sp, #28]
 8003e66:	9307      	strlt	r3, [sp, #28]
 8003e68:	bfb8      	it	lt
 8003e6a:	9204      	strlt	r2, [sp, #16]
 8003e6c:	7823      	ldrb	r3, [r4, #0]
 8003e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e70:	d10a      	bne.n	8003e88 <_svfiprintf_r+0x130>
 8003e72:	7863      	ldrb	r3, [r4, #1]
 8003e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e76:	d132      	bne.n	8003ede <_svfiprintf_r+0x186>
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	1d1a      	adds	r2, r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	9203      	str	r2, [sp, #12]
 8003e80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e84:	3402      	adds	r4, #2
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f4c <_svfiprintf_r+0x1f4>
 8003e8c:	7821      	ldrb	r1, [r4, #0]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	4650      	mov	r0, sl
 8003e92:	f7fc f9a5 	bl	80001e0 <memchr>
 8003e96:	b138      	cbz	r0, 8003ea8 <_svfiprintf_r+0x150>
 8003e98:	9b04      	ldr	r3, [sp, #16]
 8003e9a:	eba0 000a 	sub.w	r0, r0, sl
 8003e9e:	2240      	movs	r2, #64	@ 0x40
 8003ea0:	4082      	lsls	r2, r0
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	3401      	adds	r4, #1
 8003ea6:	9304      	str	r3, [sp, #16]
 8003ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eac:	4824      	ldr	r0, [pc, #144]	@ (8003f40 <_svfiprintf_r+0x1e8>)
 8003eae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003eb2:	2206      	movs	r2, #6
 8003eb4:	f7fc f994 	bl	80001e0 <memchr>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d036      	beq.n	8003f2a <_svfiprintf_r+0x1d2>
 8003ebc:	4b21      	ldr	r3, [pc, #132]	@ (8003f44 <_svfiprintf_r+0x1ec>)
 8003ebe:	bb1b      	cbnz	r3, 8003f08 <_svfiprintf_r+0x1b0>
 8003ec0:	9b03      	ldr	r3, [sp, #12]
 8003ec2:	3307      	adds	r3, #7
 8003ec4:	f023 0307 	bic.w	r3, r3, #7
 8003ec8:	3308      	adds	r3, #8
 8003eca:	9303      	str	r3, [sp, #12]
 8003ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ece:	4433      	add	r3, r6
 8003ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ed2:	e76a      	b.n	8003daa <_svfiprintf_r+0x52>
 8003ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ed8:	460c      	mov	r4, r1
 8003eda:	2001      	movs	r0, #1
 8003edc:	e7a8      	b.n	8003e30 <_svfiprintf_r+0xd8>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	3401      	adds	r4, #1
 8003ee2:	9305      	str	r3, [sp, #20]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f04f 0c0a 	mov.w	ip, #10
 8003eea:	4620      	mov	r0, r4
 8003eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef0:	3a30      	subs	r2, #48	@ 0x30
 8003ef2:	2a09      	cmp	r2, #9
 8003ef4:	d903      	bls.n	8003efe <_svfiprintf_r+0x1a6>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0c6      	beq.n	8003e88 <_svfiprintf_r+0x130>
 8003efa:	9105      	str	r1, [sp, #20]
 8003efc:	e7c4      	b.n	8003e88 <_svfiprintf_r+0x130>
 8003efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f02:	4604      	mov	r4, r0
 8003f04:	2301      	movs	r3, #1
 8003f06:	e7f0      	b.n	8003eea <_svfiprintf_r+0x192>
 8003f08:	ab03      	add	r3, sp, #12
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	462a      	mov	r2, r5
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f48 <_svfiprintf_r+0x1f0>)
 8003f10:	a904      	add	r1, sp, #16
 8003f12:	4638      	mov	r0, r7
 8003f14:	f3af 8000 	nop.w
 8003f18:	1c42      	adds	r2, r0, #1
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	d1d6      	bne.n	8003ecc <_svfiprintf_r+0x174>
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	065b      	lsls	r3, r3, #25
 8003f22:	f53f af2d 	bmi.w	8003d80 <_svfiprintf_r+0x28>
 8003f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f28:	e72c      	b.n	8003d84 <_svfiprintf_r+0x2c>
 8003f2a:	ab03      	add	r3, sp, #12
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	462a      	mov	r2, r5
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <_svfiprintf_r+0x1f0>)
 8003f32:	a904      	add	r1, sp, #16
 8003f34:	4638      	mov	r0, r7
 8003f36:	f000 f879 	bl	800402c <_printf_i>
 8003f3a:	e7ed      	b.n	8003f18 <_svfiprintf_r+0x1c0>
 8003f3c:	080043b0 	.word	0x080043b0
 8003f40:	080043ba 	.word	0x080043ba
 8003f44:	00000000 	.word	0x00000000
 8003f48:	08003ca1 	.word	0x08003ca1
 8003f4c:	080043b6 	.word	0x080043b6

08003f50 <_printf_common>:
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	4616      	mov	r6, r2
 8003f56:	4698      	mov	r8, r3
 8003f58:	688a      	ldr	r2, [r1, #8]
 8003f5a:	690b      	ldr	r3, [r1, #16]
 8003f5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bfb8      	it	lt
 8003f64:	4613      	movlt	r3, r2
 8003f66:	6033      	str	r3, [r6, #0]
 8003f68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f6c:	4607      	mov	r7, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	b10a      	cbz	r2, 8003f76 <_printf_common+0x26>
 8003f72:	3301      	adds	r3, #1
 8003f74:	6033      	str	r3, [r6, #0]
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	0699      	lsls	r1, r3, #26
 8003f7a:	bf42      	ittt	mi
 8003f7c:	6833      	ldrmi	r3, [r6, #0]
 8003f7e:	3302      	addmi	r3, #2
 8003f80:	6033      	strmi	r3, [r6, #0]
 8003f82:	6825      	ldr	r5, [r4, #0]
 8003f84:	f015 0506 	ands.w	r5, r5, #6
 8003f88:	d106      	bne.n	8003f98 <_printf_common+0x48>
 8003f8a:	f104 0a19 	add.w	sl, r4, #25
 8003f8e:	68e3      	ldr	r3, [r4, #12]
 8003f90:	6832      	ldr	r2, [r6, #0]
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	42ab      	cmp	r3, r5
 8003f96:	dc26      	bgt.n	8003fe6 <_printf_common+0x96>
 8003f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f9c:	6822      	ldr	r2, [r4, #0]
 8003f9e:	3b00      	subs	r3, #0
 8003fa0:	bf18      	it	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	0692      	lsls	r2, r2, #26
 8003fa6:	d42b      	bmi.n	8004000 <_printf_common+0xb0>
 8003fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fac:	4641      	mov	r1, r8
 8003fae:	4638      	mov	r0, r7
 8003fb0:	47c8      	blx	r9
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d01e      	beq.n	8003ff4 <_printf_common+0xa4>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	6922      	ldr	r2, [r4, #16]
 8003fba:	f003 0306 	and.w	r3, r3, #6
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	bf02      	ittt	eq
 8003fc2:	68e5      	ldreq	r5, [r4, #12]
 8003fc4:	6833      	ldreq	r3, [r6, #0]
 8003fc6:	1aed      	subeq	r5, r5, r3
 8003fc8:	68a3      	ldr	r3, [r4, #8]
 8003fca:	bf0c      	ite	eq
 8003fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fd0:	2500      	movne	r5, #0
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	bfc4      	itt	gt
 8003fd6:	1a9b      	subgt	r3, r3, r2
 8003fd8:	18ed      	addgt	r5, r5, r3
 8003fda:	2600      	movs	r6, #0
 8003fdc:	341a      	adds	r4, #26
 8003fde:	42b5      	cmp	r5, r6
 8003fe0:	d11a      	bne.n	8004018 <_printf_common+0xc8>
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	e008      	b.n	8003ff8 <_printf_common+0xa8>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	4652      	mov	r2, sl
 8003fea:	4641      	mov	r1, r8
 8003fec:	4638      	mov	r0, r7
 8003fee:	47c8      	blx	r9
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d103      	bne.n	8003ffc <_printf_common+0xac>
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	e7c6      	b.n	8003f8e <_printf_common+0x3e>
 8004000:	18e1      	adds	r1, r4, r3
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	2030      	movs	r0, #48	@ 0x30
 8004006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800400a:	4422      	add	r2, r4
 800400c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004014:	3302      	adds	r3, #2
 8004016:	e7c7      	b.n	8003fa8 <_printf_common+0x58>
 8004018:	2301      	movs	r3, #1
 800401a:	4622      	mov	r2, r4
 800401c:	4641      	mov	r1, r8
 800401e:	4638      	mov	r0, r7
 8004020:	47c8      	blx	r9
 8004022:	3001      	adds	r0, #1
 8004024:	d0e6      	beq.n	8003ff4 <_printf_common+0xa4>
 8004026:	3601      	adds	r6, #1
 8004028:	e7d9      	b.n	8003fde <_printf_common+0x8e>
	...

0800402c <_printf_i>:
 800402c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004030:	7e0f      	ldrb	r7, [r1, #24]
 8004032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004034:	2f78      	cmp	r7, #120	@ 0x78
 8004036:	4691      	mov	r9, r2
 8004038:	4680      	mov	r8, r0
 800403a:	460c      	mov	r4, r1
 800403c:	469a      	mov	sl, r3
 800403e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004042:	d807      	bhi.n	8004054 <_printf_i+0x28>
 8004044:	2f62      	cmp	r7, #98	@ 0x62
 8004046:	d80a      	bhi.n	800405e <_printf_i+0x32>
 8004048:	2f00      	cmp	r7, #0
 800404a:	f000 80d2 	beq.w	80041f2 <_printf_i+0x1c6>
 800404e:	2f58      	cmp	r7, #88	@ 0x58
 8004050:	f000 80b9 	beq.w	80041c6 <_printf_i+0x19a>
 8004054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800405c:	e03a      	b.n	80040d4 <_printf_i+0xa8>
 800405e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004062:	2b15      	cmp	r3, #21
 8004064:	d8f6      	bhi.n	8004054 <_printf_i+0x28>
 8004066:	a101      	add	r1, pc, #4	@ (adr r1, 800406c <_printf_i+0x40>)
 8004068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040d9 	.word	0x080040d9
 8004074:	08004055 	.word	0x08004055
 8004078:	08004055 	.word	0x08004055
 800407c:	08004055 	.word	0x08004055
 8004080:	08004055 	.word	0x08004055
 8004084:	080040d9 	.word	0x080040d9
 8004088:	08004055 	.word	0x08004055
 800408c:	08004055 	.word	0x08004055
 8004090:	08004055 	.word	0x08004055
 8004094:	08004055 	.word	0x08004055
 8004098:	080041d9 	.word	0x080041d9
 800409c:	08004103 	.word	0x08004103
 80040a0:	08004193 	.word	0x08004193
 80040a4:	08004055 	.word	0x08004055
 80040a8:	08004055 	.word	0x08004055
 80040ac:	080041fb 	.word	0x080041fb
 80040b0:	08004055 	.word	0x08004055
 80040b4:	08004103 	.word	0x08004103
 80040b8:	08004055 	.word	0x08004055
 80040bc:	08004055 	.word	0x08004055
 80040c0:	0800419b 	.word	0x0800419b
 80040c4:	6833      	ldr	r3, [r6, #0]
 80040c6:	1d1a      	adds	r2, r3, #4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6032      	str	r2, [r6, #0]
 80040cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040d4:	2301      	movs	r3, #1
 80040d6:	e09d      	b.n	8004214 <_printf_i+0x1e8>
 80040d8:	6833      	ldr	r3, [r6, #0]
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	1d19      	adds	r1, r3, #4
 80040de:	6031      	str	r1, [r6, #0]
 80040e0:	0606      	lsls	r6, r0, #24
 80040e2:	d501      	bpl.n	80040e8 <_printf_i+0xbc>
 80040e4:	681d      	ldr	r5, [r3, #0]
 80040e6:	e003      	b.n	80040f0 <_printf_i+0xc4>
 80040e8:	0645      	lsls	r5, r0, #25
 80040ea:	d5fb      	bpl.n	80040e4 <_printf_i+0xb8>
 80040ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	da03      	bge.n	80040fc <_printf_i+0xd0>
 80040f4:	232d      	movs	r3, #45	@ 0x2d
 80040f6:	426d      	negs	r5, r5
 80040f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040fc:	4859      	ldr	r0, [pc, #356]	@ (8004264 <_printf_i+0x238>)
 80040fe:	230a      	movs	r3, #10
 8004100:	e011      	b.n	8004126 <_printf_i+0xfa>
 8004102:	6821      	ldr	r1, [r4, #0]
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	0608      	lsls	r0, r1, #24
 8004108:	f853 5b04 	ldr.w	r5, [r3], #4
 800410c:	d402      	bmi.n	8004114 <_printf_i+0xe8>
 800410e:	0649      	lsls	r1, r1, #25
 8004110:	bf48      	it	mi
 8004112:	b2ad      	uxthmi	r5, r5
 8004114:	2f6f      	cmp	r7, #111	@ 0x6f
 8004116:	4853      	ldr	r0, [pc, #332]	@ (8004264 <_printf_i+0x238>)
 8004118:	6033      	str	r3, [r6, #0]
 800411a:	bf14      	ite	ne
 800411c:	230a      	movne	r3, #10
 800411e:	2308      	moveq	r3, #8
 8004120:	2100      	movs	r1, #0
 8004122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004126:	6866      	ldr	r6, [r4, #4]
 8004128:	60a6      	str	r6, [r4, #8]
 800412a:	2e00      	cmp	r6, #0
 800412c:	bfa2      	ittt	ge
 800412e:	6821      	ldrge	r1, [r4, #0]
 8004130:	f021 0104 	bicge.w	r1, r1, #4
 8004134:	6021      	strge	r1, [r4, #0]
 8004136:	b90d      	cbnz	r5, 800413c <_printf_i+0x110>
 8004138:	2e00      	cmp	r6, #0
 800413a:	d04b      	beq.n	80041d4 <_printf_i+0x1a8>
 800413c:	4616      	mov	r6, r2
 800413e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004142:	fb03 5711 	mls	r7, r3, r1, r5
 8004146:	5dc7      	ldrb	r7, [r0, r7]
 8004148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800414c:	462f      	mov	r7, r5
 800414e:	42bb      	cmp	r3, r7
 8004150:	460d      	mov	r5, r1
 8004152:	d9f4      	bls.n	800413e <_printf_i+0x112>
 8004154:	2b08      	cmp	r3, #8
 8004156:	d10b      	bne.n	8004170 <_printf_i+0x144>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	07df      	lsls	r7, r3, #31
 800415c:	d508      	bpl.n	8004170 <_printf_i+0x144>
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	6861      	ldr	r1, [r4, #4]
 8004162:	4299      	cmp	r1, r3
 8004164:	bfde      	ittt	le
 8004166:	2330      	movle	r3, #48	@ 0x30
 8004168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800416c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004170:	1b92      	subs	r2, r2, r6
 8004172:	6122      	str	r2, [r4, #16]
 8004174:	f8cd a000 	str.w	sl, [sp]
 8004178:	464b      	mov	r3, r9
 800417a:	aa03      	add	r2, sp, #12
 800417c:	4621      	mov	r1, r4
 800417e:	4640      	mov	r0, r8
 8004180:	f7ff fee6 	bl	8003f50 <_printf_common>
 8004184:	3001      	adds	r0, #1
 8004186:	d14a      	bne.n	800421e <_printf_i+0x1f2>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800418c:	b004      	add	sp, #16
 800418e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f043 0320 	orr.w	r3, r3, #32
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	4833      	ldr	r0, [pc, #204]	@ (8004268 <_printf_i+0x23c>)
 800419c:	2778      	movs	r7, #120	@ 0x78
 800419e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	6831      	ldr	r1, [r6, #0]
 80041a6:	061f      	lsls	r7, r3, #24
 80041a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80041ac:	d402      	bmi.n	80041b4 <_printf_i+0x188>
 80041ae:	065f      	lsls	r7, r3, #25
 80041b0:	bf48      	it	mi
 80041b2:	b2ad      	uxthmi	r5, r5
 80041b4:	6031      	str	r1, [r6, #0]
 80041b6:	07d9      	lsls	r1, r3, #31
 80041b8:	bf44      	itt	mi
 80041ba:	f043 0320 	orrmi.w	r3, r3, #32
 80041be:	6023      	strmi	r3, [r4, #0]
 80041c0:	b11d      	cbz	r5, 80041ca <_printf_i+0x19e>
 80041c2:	2310      	movs	r3, #16
 80041c4:	e7ac      	b.n	8004120 <_printf_i+0xf4>
 80041c6:	4827      	ldr	r0, [pc, #156]	@ (8004264 <_printf_i+0x238>)
 80041c8:	e7e9      	b.n	800419e <_printf_i+0x172>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	f023 0320 	bic.w	r3, r3, #32
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	e7f6      	b.n	80041c2 <_printf_i+0x196>
 80041d4:	4616      	mov	r6, r2
 80041d6:	e7bd      	b.n	8004154 <_printf_i+0x128>
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	6825      	ldr	r5, [r4, #0]
 80041dc:	6961      	ldr	r1, [r4, #20]
 80041de:	1d18      	adds	r0, r3, #4
 80041e0:	6030      	str	r0, [r6, #0]
 80041e2:	062e      	lsls	r6, r5, #24
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	d501      	bpl.n	80041ec <_printf_i+0x1c0>
 80041e8:	6019      	str	r1, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <_printf_i+0x1c6>
 80041ec:	0668      	lsls	r0, r5, #25
 80041ee:	d5fb      	bpl.n	80041e8 <_printf_i+0x1bc>
 80041f0:	8019      	strh	r1, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	6123      	str	r3, [r4, #16]
 80041f6:	4616      	mov	r6, r2
 80041f8:	e7bc      	b.n	8004174 <_printf_i+0x148>
 80041fa:	6833      	ldr	r3, [r6, #0]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	6032      	str	r2, [r6, #0]
 8004200:	681e      	ldr	r6, [r3, #0]
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	2100      	movs	r1, #0
 8004206:	4630      	mov	r0, r6
 8004208:	f7fb ffea 	bl	80001e0 <memchr>
 800420c:	b108      	cbz	r0, 8004212 <_printf_i+0x1e6>
 800420e:	1b80      	subs	r0, r0, r6
 8004210:	6060      	str	r0, [r4, #4]
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	2300      	movs	r3, #0
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800421c:	e7aa      	b.n	8004174 <_printf_i+0x148>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	4632      	mov	r2, r6
 8004222:	4649      	mov	r1, r9
 8004224:	4640      	mov	r0, r8
 8004226:	47d0      	blx	sl
 8004228:	3001      	adds	r0, #1
 800422a:	d0ad      	beq.n	8004188 <_printf_i+0x15c>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	079b      	lsls	r3, r3, #30
 8004230:	d413      	bmi.n	800425a <_printf_i+0x22e>
 8004232:	68e0      	ldr	r0, [r4, #12]
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	4298      	cmp	r0, r3
 8004238:	bfb8      	it	lt
 800423a:	4618      	movlt	r0, r3
 800423c:	e7a6      	b.n	800418c <_printf_i+0x160>
 800423e:	2301      	movs	r3, #1
 8004240:	4632      	mov	r2, r6
 8004242:	4649      	mov	r1, r9
 8004244:	4640      	mov	r0, r8
 8004246:	47d0      	blx	sl
 8004248:	3001      	adds	r0, #1
 800424a:	d09d      	beq.n	8004188 <_printf_i+0x15c>
 800424c:	3501      	adds	r5, #1
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	9903      	ldr	r1, [sp, #12]
 8004252:	1a5b      	subs	r3, r3, r1
 8004254:	42ab      	cmp	r3, r5
 8004256:	dcf2      	bgt.n	800423e <_printf_i+0x212>
 8004258:	e7eb      	b.n	8004232 <_printf_i+0x206>
 800425a:	2500      	movs	r5, #0
 800425c:	f104 0619 	add.w	r6, r4, #25
 8004260:	e7f5      	b.n	800424e <_printf_i+0x222>
 8004262:	bf00      	nop
 8004264:	080043c1 	.word	0x080043c1
 8004268:	080043d2 	.word	0x080043d2

0800426c <_realloc_r>:
 800426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004270:	4680      	mov	r8, r0
 8004272:	4615      	mov	r5, r2
 8004274:	460c      	mov	r4, r1
 8004276:	b921      	cbnz	r1, 8004282 <_realloc_r+0x16>
 8004278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4611      	mov	r1, r2
 800427e:	f7ff bbb3 	b.w	80039e8 <_malloc_r>
 8004282:	b92a      	cbnz	r2, 8004290 <_realloc_r+0x24>
 8004284:	f7ff fcc2 	bl	8003c0c <_free_r>
 8004288:	2400      	movs	r4, #0
 800428a:	4620      	mov	r0, r4
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004290:	f000 f834 	bl	80042fc <_malloc_usable_size_r>
 8004294:	4285      	cmp	r5, r0
 8004296:	4606      	mov	r6, r0
 8004298:	d802      	bhi.n	80042a0 <_realloc_r+0x34>
 800429a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800429e:	d8f4      	bhi.n	800428a <_realloc_r+0x1e>
 80042a0:	4629      	mov	r1, r5
 80042a2:	4640      	mov	r0, r8
 80042a4:	f7ff fba0 	bl	80039e8 <_malloc_r>
 80042a8:	4607      	mov	r7, r0
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d0ec      	beq.n	8004288 <_realloc_r+0x1c>
 80042ae:	42b5      	cmp	r5, r6
 80042b0:	462a      	mov	r2, r5
 80042b2:	4621      	mov	r1, r4
 80042b4:	bf28      	it	cs
 80042b6:	4632      	movcs	r2, r6
 80042b8:	f7ff fc9a 	bl	8003bf0 <memcpy>
 80042bc:	4621      	mov	r1, r4
 80042be:	4640      	mov	r0, r8
 80042c0:	f7ff fca4 	bl	8003c0c <_free_r>
 80042c4:	463c      	mov	r4, r7
 80042c6:	e7e0      	b.n	800428a <_realloc_r+0x1e>

080042c8 <memmove>:
 80042c8:	4288      	cmp	r0, r1
 80042ca:	b510      	push	{r4, lr}
 80042cc:	eb01 0402 	add.w	r4, r1, r2
 80042d0:	d902      	bls.n	80042d8 <memmove+0x10>
 80042d2:	4284      	cmp	r4, r0
 80042d4:	4623      	mov	r3, r4
 80042d6:	d807      	bhi.n	80042e8 <memmove+0x20>
 80042d8:	1e43      	subs	r3, r0, #1
 80042da:	42a1      	cmp	r1, r4
 80042dc:	d008      	beq.n	80042f0 <memmove+0x28>
 80042de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042e6:	e7f8      	b.n	80042da <memmove+0x12>
 80042e8:	4402      	add	r2, r0
 80042ea:	4601      	mov	r1, r0
 80042ec:	428a      	cmp	r2, r1
 80042ee:	d100      	bne.n	80042f2 <memmove+0x2a>
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042fa:	e7f7      	b.n	80042ec <memmove+0x24>

080042fc <_malloc_usable_size_r>:
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f18      	subs	r0, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfbc      	itt	lt
 8004306:	580b      	ldrlt	r3, [r1, r0]
 8004308:	18c0      	addlt	r0, r0, r3
 800430a:	4770      	bx	lr

0800430c <_init>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr

08004318 <_fini>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr
