
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004354  08004354  00005354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  000061b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004408  08004408  000061b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08004410  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001b0  080045c0  000061b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080045c0  000064a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b23d  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ca  00000000  00000000  0001141d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000135e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a7  00000000  00000000  00014040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274a7  00000000  00000000  000147e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b71e  00000000  00000000  0003bc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f11f9  00000000  00000000  000473ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001385a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d14  00000000  00000000  001385e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0013b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800433c 	.word	0x0800433c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	0800433c 	.word	0x0800433c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lsm6dsl_init>:
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	f246 0310 	movw	r3, #24592	@ 0x6010
 800028a:	80bb      	strh	r3, [r7, #4]
 800028c:	1d3a      	adds	r2, r7, #4
 800028e:	2302      	movs	r3, #2
 8000290:	2100      	movs	r1, #0
 8000292:	206a      	movs	r0, #106	@ 0x6a
 8000294:	f000 fd40 	bl	8000d18 <i2c_transaction>
 8000298:	f240 130d 	movw	r3, #269	@ 0x10d
 800029c:	803b      	strh	r3, [r7, #0]
 800029e:	463a      	mov	r2, r7
 80002a0:	2302      	movs	r3, #2
 80002a2:	2100      	movs	r1, #0
 80002a4:	206a      	movs	r0, #106	@ 0x6a
 80002a6:	f000 fd37 	bl	8000d18 <i2c_transaction>
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <lsm6dsl_read_xyz>:
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b086      	sub	sp, #24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
 80002be:	2328      	movs	r3, #40	@ 0x28
 80002c0:	613b      	str	r3, [r7, #16]
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2100      	movs	r1, #0
 80002c8:	460a      	mov	r2, r1
 80002ca:	801a      	strh	r2, [r3, #0]
 80002cc:	460a      	mov	r2, r1
 80002ce:	709a      	strb	r2, [r3, #2]
 80002d0:	f107 0210 	add.w	r2, r7, #16
 80002d4:	2307      	movs	r3, #7
 80002d6:	2101      	movs	r1, #1
 80002d8:	206a      	movs	r0, #106	@ 0x6a
 80002da:	f000 fd1d 	bl	8000d18 <i2c_transaction>
 80002de:	7cbb      	ldrb	r3, [r7, #18]
 80002e0:	021b      	lsls	r3, r3, #8
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	7c7b      	ldrb	r3, [r7, #17]
 80002e6:	b21b      	sxth	r3, r3
 80002e8:	4313      	orrs	r3, r2
 80002ea:	b21a      	sxth	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	801a      	strh	r2, [r3, #0]
 80002f0:	7d3b      	ldrb	r3, [r7, #20]
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	7cfb      	ldrb	r3, [r7, #19]
 80002f8:	b21b      	sxth	r3, r3
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	801a      	strh	r2, [r3, #0]
 8000302:	7dbb      	ldrb	r3, [r7, #22]
 8000304:	021b      	lsls	r3, r3, #8
 8000306:	b21a      	sxth	r2, r3
 8000308:	7d7b      	ldrb	r3, [r7, #21]
 800030a:	b21b      	sxth	r3, r3
 800030c:	4313      	orrs	r3, r2
 800030e:	b21a      	sxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	801a      	strh	r2, [r3, #0]
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000322:	2006      	movs	r0, #6
 8000324:	f003 fb46 	bl	80039b4 <malloc>
 8000328:	4603      	mov	r3, r0
 800032a:	461a      	mov	r2, r3
 800032c:	4b70      	ldr	r3, [pc, #448]	@ (80004f0 <ble_init+0x1d4>)
 800032e:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000330:	bf00      	nop
 8000332:	4b70      	ldr	r3, [pc, #448]	@ (80004f4 <ble_init+0x1d8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0fb      	beq.n	8000332 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800033a:	4b6d      	ldr	r3, [pc, #436]	@ (80004f0 <ble_init+0x1d4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2106      	movs	r1, #6
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f905 	bl	8000550 <fetchBleEvent>
 8000346:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <ble_init+0x56>
		res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 800034e:	4b68      	ldr	r3, [pc, #416]	@ (80004f0 <ble_init+0x1d4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2206      	movs	r2, #6
 8000354:	4968      	ldr	r1, [pc, #416]	@ (80004f8 <ble_init+0x1dc>)
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f984 	bl	8000664 <checkEventResp>
 800035c:	6078      	str	r0, [r7, #4]
		if(res==BLE_OK){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d106      	bne.n	8000372 <ble_init+0x56>
			stackInitCompleteFlag|=0x01;
 8000364:	4b65      	ldr	r3, [pc, #404]	@ (80004fc <ble_init+0x1e0>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	b29a      	uxth	r2, r3
 800036e:	4b63      	ldr	r3, [pc, #396]	@ (80004fc <ble_init+0x1e0>)
 8000370:	801a      	strh	r2, [r3, #0]
		}
	}
	HAL_Delay(10);
 8000372:	200a      	movs	r0, #10
 8000374:	f001 fb94 	bl	8001aa0 <HAL_Delay>
	free(rxEvent);
 8000378:	4b5d      	ldr	r3, [pc, #372]	@ (80004f0 <ble_init+0x1d4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f003 fb21 	bl	80039c4 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000382:	2300      	movs	r3, #0
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2307      	movs	r3, #7
 8000388:	4a5d      	ldr	r2, [pc, #372]	@ (8000500 <ble_init+0x1e4>)
 800038a:	2104      	movs	r1, #4
 800038c:	485d      	ldr	r0, [pc, #372]	@ (8000504 <ble_init+0x1e8>)
 800038e:	f000 fa9f 	bl	80008d0 <BLE_command>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d106      	bne.n	80003a6 <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 8000398:	4b58      	ldr	r3, [pc, #352]	@ (80004fc <ble_init+0x1e0>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b56      	ldr	r3, [pc, #344]	@ (80004fc <ble_init+0x1e0>)
 80003a4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003a6:	4b52      	ldr	r3, [pc, #328]	@ (80004f0 <ble_init+0x1d4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fb0a 	bl	80039c4 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 80003b0:	2303      	movs	r3, #3
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2307      	movs	r3, #7
 80003b6:	4a54      	ldr	r2, [pc, #336]	@ (8000508 <ble_init+0x1ec>)
 80003b8:	2107      	movs	r1, #7
 80003ba:	4854      	ldr	r0, [pc, #336]	@ (800050c <ble_init+0x1f0>)
 80003bc:	f000 fa88 	bl	80008d0 <BLE_command>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 80003c6:	4b4d      	ldr	r3, [pc, #308]	@ (80004fc <ble_init+0x1e0>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	4b4a      	ldr	r3, [pc, #296]	@ (80004fc <ble_init+0x1e0>)
 80003d2:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 80003d4:	4b46      	ldr	r3, [pc, #280]	@ (80004f0 <ble_init+0x1d4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3307      	adds	r3, #7
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	4b4c      	ldr	r3, [pc, #304]	@ (8000510 <ble_init+0x1f4>)
 80003e0:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 80003e2:	4b43      	ldr	r3, [pc, #268]	@ (80004f0 <ble_init+0x1d4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3309      	adds	r3, #9
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b49      	ldr	r3, [pc, #292]	@ (8000514 <ble_init+0x1f8>)
 80003ee:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 80003f0:	4b3f      	ldr	r3, [pc, #252]	@ (80004f0 <ble_init+0x1d4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	330b      	adds	r3, #11
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	4b47      	ldr	r3, [pc, #284]	@ (8000518 <ble_init+0x1fc>)
 80003fc:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003fe:	4b3c      	ldr	r3, [pc, #240]	@ (80004f0 <ble_init+0x1d4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fade 	bl	80039c4 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000408:	4b44      	ldr	r3, [pc, #272]	@ (800051c <ble_init+0x200>)
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2307      	movs	r3, #7
 800040e:	2200      	movs	r2, #0
 8000410:	4940      	ldr	r1, [pc, #256]	@ (8000514 <ble_init+0x1f8>)
 8000412:	483f      	ldr	r0, [pc, #252]	@ (8000510 <ble_init+0x1f4>)
 8000414:	f000 fb22 	bl	8000a5c <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000418:	4b38      	ldr	r3, [pc, #224]	@ (80004fc <ble_init+0x1e0>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	f043 0308 	orr.w	r3, r3, #8
 8000420:	b29a      	uxth	r2, r3
 8000422:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <ble_init+0x1e0>)
 8000424:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 8000426:	4b32      	ldr	r3, [pc, #200]	@ (80004f0 <ble_init+0x1d4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f003 faca 	bl	80039c4 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000430:	2300      	movs	r3, #0
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2307      	movs	r3, #7
 8000436:	4a3a      	ldr	r2, [pc, #232]	@ (8000520 <ble_init+0x204>)
 8000438:	2110      	movs	r1, #16
 800043a:	483a      	ldr	r0, [pc, #232]	@ (8000524 <ble_init+0x208>)
 800043c:	f000 fa48 	bl	80008d0 <BLE_command>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 8000446:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <ble_init+0x1e0>)
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	b29a      	uxth	r2, r3
 8000450:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <ble_init+0x1e0>)
 8000452:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000454:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <ble_init+0x1d4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f003 fab3 	bl	80039c4 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800045e:	2300      	movs	r3, #0
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2307      	movs	r3, #7
 8000464:	4a30      	ldr	r2, [pc, #192]	@ (8000528 <ble_init+0x20c>)
 8000466:	2106      	movs	r1, #6
 8000468:	4830      	ldr	r0, [pc, #192]	@ (800052c <ble_init+0x210>)
 800046a:	f000 fa31 	bl	80008d0 <BLE_command>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d106      	bne.n	8000482 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <ble_init+0x1e0>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	b29a      	uxth	r2, r3
 800047e:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <ble_init+0x1e0>)
 8000480:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000482:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <ble_init+0x1d4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f003 fa9c 	bl	80039c4 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 800048c:	2300      	movs	r3, #0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2307      	movs	r3, #7
 8000492:	4a27      	ldr	r2, [pc, #156]	@ (8000530 <ble_init+0x214>)
 8000494:	2124      	movs	r1, #36	@ 0x24
 8000496:	4827      	ldr	r0, [pc, #156]	@ (8000534 <ble_init+0x218>)
 8000498:	f000 fa1a 	bl	80008d0 <BLE_command>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d106      	bne.n	80004b0 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <ble_init+0x1e0>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <ble_init+0x1e0>)
 80004ae:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <ble_init+0x1d4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 fa85 	bl	80039c4 <free>

	//This will start the advertisment,
	setConnectable();
 80004ba:	f000 f989 	bl	80007d0 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 80004be:	2207      	movs	r2, #7
 80004c0:	491d      	ldr	r1, [pc, #116]	@ (8000538 <ble_init+0x21c>)
 80004c2:	481e      	ldr	r0, [pc, #120]	@ (800053c <ble_init+0x220>)
 80004c4:	f000 fa50 	bl	8000968 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 80004c8:	2310      	movs	r3, #16
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2314      	movs	r3, #20
 80004ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000538 <ble_init+0x21c>)
 80004d0:	491b      	ldr	r1, [pc, #108]	@ (8000540 <ble_init+0x224>)
 80004d2:	481c      	ldr	r0, [pc, #112]	@ (8000544 <ble_init+0x228>)
 80004d4:	f000 fa80 	bl	80009d8 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 80004d8:	2304      	movs	r3, #4
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2314      	movs	r3, #20
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <ble_init+0x21c>)
 80004e0:	4919      	ldr	r1, [pc, #100]	@ (8000548 <ble_init+0x22c>)
 80004e2:	481a      	ldr	r0, [pc, #104]	@ (800054c <ble_init+0x230>)
 80004e4:	f000 fa78 	bl	80009d8 <addCharacteristic>

	if(stackInitCompleteFlag==255){
		//turn on led blue if everything was fine
		//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 80004e8:	bf00      	nop
}
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200002e4 	.word	0x200002e4
 80004f4:	200002e8 	.word	0x200002e8
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200002e2 	.word	0x200002e2
 8000500:	2000000c 	.word	0x2000000c
 8000504:	20000008 	.word	0x20000008
 8000508:	2000001c 	.word	0x2000001c
 800050c:	20000014 	.word	0x20000014
 8000510:	200001cc 	.word	0x200001cc
 8000514:	200001d0 	.word	0x200001d0
 8000518:	200001d4 	.word	0x200001d4
 800051c:	20000114 	.word	0x20000114
 8000520:	20000034 	.word	0x20000034
 8000524:	20000024 	.word	0x20000024
 8000528:	20000044 	.word	0x20000044
 800052c:	2000003c 	.word	0x2000003c
 8000530:	20000070 	.word	0x20000070
 8000534:	2000004c 	.word	0x2000004c
 8000538:	200002d8 	.word	0x200002d8
 800053c:	2000011c 	.word	0x2000011c
 8000540:	200002e0 	.word	0x200002e0
 8000544:	2000013c 	.word	0x2000013c
 8000548:	200002dc 	.word	0x200002dc
 800054c:	2000012c 	.word	0x2000012c

08000550 <fetchBleEvent>:
	if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	}
	free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	@ 0x30
 8000554:	af02      	add	r7, sp, #8
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]

	uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 800055a:	4a3d      	ldr	r2, [pc, #244]	@ (8000650 <fetchBleEvent+0x100>)
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000564:	6018      	str	r0, [r3, #0]
 8000566:	3304      	adds	r3, #4
 8000568:	7019      	strb	r1, [r3, #0]
	uint8_t slave_header[5];

	//Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
	if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	4839      	ldr	r0, [pc, #228]	@ (8000654 <fetchBleEvent+0x104>)
 800056e:	f001 fd97 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d065      	beq.n	8000644 <fetchBleEvent+0xf4>

		HAL_Delay(5);
 8000578:	2005      	movs	r0, #5
 800057a:	f001 fa91 	bl	8001aa0 <HAL_Delay>
		//PIN_CS of SPI2 LOW
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4834      	ldr	r0, [pc, #208]	@ (8000658 <fetchBleEvent+0x108>)
 8000586:	f001 fda3 	bl	80020d0 <HAL_GPIO_WritePin>

		//SPI2 in this case, it could change according to the board
		//we send a byte containing a request of reading followed by 4 dummy bytes
		HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800058a:	f107 0210 	add.w	r2, r7, #16
 800058e:	f107 0118 	add.w	r1, r7, #24
 8000592:	2301      	movs	r3, #1
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2305      	movs	r3, #5
 8000598:	4830      	ldr	r0, [pc, #192]	@ (800065c <fetchBleEvent+0x10c>)
 800059a:	f002 fe85 	bl	80032a8 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a4:	482c      	ldr	r0, [pc, #176]	@ (8000658 <fetchBleEvent+0x108>)
 80005a6:	f001 fd93 	bl	80020d0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 fa78 	bl	8001aa0 <HAL_Delay>
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	4828      	ldr	r0, [pc, #160]	@ (8000658 <fetchBleEvent+0x108>)
 80005b8:	f001 fd8a 	bl	80020d0 <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80005bc:	f107 0210 	add.w	r2, r7, #16
 80005c0:	f107 0118 	add.w	r1, r7, #24
 80005c4:	2301      	movs	r3, #1
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2305      	movs	r3, #5
 80005ca:	4824      	ldr	r0, [pc, #144]	@ (800065c <fetchBleEvent+0x10c>)
 80005cc:	f002 fe6c 	bl	80032a8 <HAL_SPI_TransmitReceive>

		//let's get the size of data available
		int dataSize;
		dataSize=(slave_header[3]|slave_header[4]<<8);
 80005d0:	7cfb      	ldrb	r3, [r7, #19]
 80005d2:	461a      	mov	r2, r3
 80005d4:	7d3b      	ldrb	r3, [r7, #20]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	4313      	orrs	r3, r2
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
		int i;
		char dummy=0xff;
 80005dc:	23ff      	movs	r3, #255	@ 0xff
 80005de:	73fb      	strb	r3, [r7, #15]

		if(dataSize>size){
 80005e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dd01      	ble.n	80005ec <fetchBleEvent+0x9c>
			dataSize=size;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		if(dataSize>0){
 80005ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	dd1f      	ble.n	8000632 <fetchBleEvent+0xe2>
			//let's fill the get the bytes availables and insert them into the container variable
			for(i=0;i<dataSize;i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
 80005f6:	e00d      	b.n	8000614 <fetchBleEvent+0xc4>
				HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	441a      	add	r2, r3
 80005fe:	f107 010f 	add.w	r1, r7, #15
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4814      	ldr	r0, [pc, #80]	@ (800065c <fetchBleEvent+0x10c>)
 800060a:	f002 fe4d 	bl	80032a8 <HAL_SPI_TransmitReceive>
			for(i=0;i<dataSize;i++){
 800060e:	6a3b      	ldr	r3, [r7, #32]
 8000610:	3301      	adds	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	6a3a      	ldr	r2, [r7, #32]
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	429a      	cmp	r2, r3
 800061a:	dbed      	blt.n	80005f8 <fetchBleEvent+0xa8>

			}
			HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <fetchBleEvent+0x108>)
 8000624:	f001 fd54 	bl	80020d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
			return -1;
		}

		//let's stop the SPI2
		dataAvailable=0;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <fetchBleEvent+0x110>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
		return BLE_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	e00a      	b.n	8000648 <fetchBleEvent+0xf8>
			HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <fetchBleEvent+0x108>)
 800063a:	f001 fd49 	bl	80020d0 <HAL_GPIO_WritePin>
			return -1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000642:	e001      	b.n	8000648 <fetchBleEvent+0xf8>
	}else{
		return -2;
 8000644:	f06f 0301 	mvn.w	r3, #1
	}
}
 8000648:	4618      	mov	r0, r3
 800064a:	3728      	adds	r7, #40	@ 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08004354 	.word	0x08004354
 8000654:	48001000 	.word	0x48001000
 8000658:	48000c00 	.word	0x48000c00
 800065c:	200002ec 	.word	0x200002ec
 8000660:	200002e8 	.word	0x200002e8

08000664 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	int j=0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00f      	b.n	800069a <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	440b      	add	r3, r1
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	429a      	cmp	r2, r3
 800068c:	d002      	beq.n	8000694 <checkEventResp+0x30>
			return -1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000692:	e007      	b.n	80006a4 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbeb      	blt.n	800067a <checkEventResp+0x16>
		}
	}

	return BLE_OK;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	371c      	adds	r7, #28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]

	uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80006ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000738 <sendCommand+0x88>)
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	7019      	strb	r1, [r3, #0]
	uint8_t slave_header[5];

	int result;

	do{
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d0:	481a      	ldr	r0, [pc, #104]	@ (800073c <sendCommand+0x8c>)
 80006d2:	f001 fcfd 	bl	80020d0 <HAL_GPIO_WritePin>

		//wait until it is possible to write
		//while(!dataAvailable);
		HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2305      	movs	r3, #5
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <sendCommand+0x90>)
 80006e6:	f002 fddf 	bl	80032a8 <HAL_SPI_TransmitReceive>
		int bufferSize=(slave_header[2]<<8|slave_header[1]);
 80006ea:	7abb      	ldrb	r3, [r7, #10]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	7a7a      	ldrb	r2, [r7, #9]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	61bb      	str	r3, [r7, #24]
		if(bufferSize>=size){
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	db09      	blt.n	8000710 <sendCommand+0x60>
			HAL_SPI_Transmit(&hspi3,command,size,1);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	2301      	movs	r3, #1
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <sendCommand+0x90>)
 8000706:	f002 fc5a 	bl	8002fbe <HAL_SPI_Transmit>
			result=0;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	e002      	b.n	8000716 <sendCommand+0x66>
		}else{
			result=-1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000714:	61fb      	str	r3, [r7, #28]
		}
		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	4807      	ldr	r0, [pc, #28]	@ (800073c <sendCommand+0x8c>)
 800071e:	f001 fcd7 	bl	80020d0 <HAL_GPIO_WritePin>
		dataAvailable=0;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <sendCommand+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1cd      	bne.n	80006ca <sendCommand+0x1a>

}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	0800435c 	.word	0x0800435c
 800073c:	48000c00 	.word	0x48000c00
 8000740:	200002ec 	.word	0x200002ec
 8000744:	200002e8 	.word	0x200002e8

08000748 <catchBLE>:

void catchBLE(uint8_t * byte1, uint8_t * byte2){
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	int result=fetchBleEvent(buffer,127);
 8000752:	217f      	movs	r1, #127	@ 0x7f
 8000754:	4819      	ldr	r0, [pc, #100]	@ (80007bc <catchBLE+0x74>)
 8000756:	f7ff fefb 	bl	8000550 <fetchBleEvent>
 800075a:	60f8      	str	r0, [r7, #12]
	if(result==BLE_OK){
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d128      	bne.n	80007b4 <catchBLE+0x6c>
		if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000762:	2203      	movs	r2, #3
 8000764:	4916      	ldr	r1, [pc, #88]	@ (80007c0 <catchBLE+0x78>)
 8000766:	4815      	ldr	r0, [pc, #84]	@ (80007bc <catchBLE+0x74>)
 8000768:	f7ff ff7c 	bl	8000664 <checkEventResp>
			//setConnectable();
		}
		if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 800076c:	2205      	movs	r2, #5
 800076e:	4915      	ldr	r1, [pc, #84]	@ (80007c4 <catchBLE+0x7c>)
 8000770:	4812      	ldr	r0, [pc, #72]	@ (80007bc <catchBLE+0x74>)
 8000772:	f7ff ff77 	bl	8000664 <checkEventResp>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d109      	bne.n	8000790 <catchBLE+0x48>
			// Little Endian Format
			*(connectionHandler) = buffer[5];
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <catchBLE+0x74>)
 800077e:	795b      	ldrb	r3, [r3, #5]
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <catchBLE+0x80>)
 8000784:	801a      	strh	r2, [r3, #0]
			*(connectionHandler + 1) = buffer[6];
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <catchBLE+0x74>)
 8000788:	799b      	ldrb	r3, [r3, #6]
 800078a:	b21a      	sxth	r2, r3
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <catchBLE+0x80>)
 800078e:	805a      	strh	r2, [r3, #2]
		}
		if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 8000790:	2205      	movs	r2, #5
 8000792:	490e      	ldr	r1, [pc, #56]	@ (80007cc <catchBLE+0x84>)
 8000794:	4809      	ldr	r0, [pc, #36]	@ (80007bc <catchBLE+0x74>)
 8000796:	f7ff ff65 	bl	8000664 <checkEventResp>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d109      	bne.n	80007b4 <catchBLE+0x6c>
			*(connectionHandler) = buffer[5];
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <catchBLE+0x74>)
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <catchBLE+0x80>)
 80007a8:	801a      	strh	r2, [r3, #0]
			*(connectionHandler + 1) = buffer[6];
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <catchBLE+0x74>)
 80007ac:	799b      	ldrb	r3, [r3, #6]
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <catchBLE+0x80>)
 80007b2:	805a      	strh	r2, [r3, #2]
		}
	}else{
		//something bad is happening if I am here
	}
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200001d8 	.word	0x200001d8
 80007c0:	200000ec 	.word	0x200000ec
 80007c4:	200000f8 	.word	0x200000f8
 80007c8:	2000014c 	.word	0x2000014c
 80007cc:	20000100 	.word	0x20000100

080007d0 <setConnectable>:

void setConnectable(){
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
	uint8_t* rxEvent;
	//Start advertising
	uint8_t *localname;
	int res;
	localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80007d6:	200c      	movs	r0, #12
 80007d8:	f003 f8ec 	bl	80039b4 <malloc>
 80007dc:	4603      	mov	r3, r0
 80007de:	60fb      	str	r3, [r7, #12]
	memcpy(localname,deviceName,sizeof(deviceName));
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4a36      	ldr	r2, [pc, #216]	@ (80008bc <setConnectable+0xec>)
 80007e4:	6810      	ldr	r0, [r2, #0]
 80007e6:	6018      	str	r0, [r3, #0]
 80007e8:	8891      	ldrh	r1, [r2, #4]
 80007ea:	7992      	ldrb	r2, [r2, #6]
 80007ec:	8099      	strh	r1, [r3, #4]
 80007ee:	719a      	strb	r2, [r3, #6]
	localname[sizeof(deviceName)+1]=0x00;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3308      	adds	r3, #8
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+2]=0x00;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3309      	adds	r3, #9
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+3]=0x00;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	330a      	adds	r3, #10
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+4]=0x00;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	330b      	adds	r3, #11
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)]=0x00;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3307      	adds	r3, #7
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]


	ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <setConnectable+0xf0>)
 800081a:	2208      	movs	r2, #8
 800081c:	72da      	strb	r2, [r3, #11]
	ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <setConnectable+0xf0>)
 8000820:	2215      	movs	r2, #21
 8000822:	70da      	strb	r2, [r3, #3]

	uint8_t *discoverableCommand;
	discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000824:	2019      	movs	r0, #25
 8000826:	f003 f8c5 	bl	80039b4 <malloc>
 800082a:	4603      	mov	r3, r0
 800082c:	60bb      	str	r3, [r7, #8]
	memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4a23      	ldr	r2, [pc, #140]	@ (80008c0 <setConnectable+0xf0>)
 8000832:	461c      	mov	r4, r3
 8000834:	4613      	mov	r3, r2
 8000836:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000838:	6020      	str	r0, [r4, #0]
 800083a:	6061      	str	r1, [r4, #4]
 800083c:	60a2      	str	r2, [r4, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	7323      	strb	r3, [r4, #12]
	memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330d      	adds	r3, #13
 8000846:	220c      	movs	r2, #12
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 f9e8 	bl	8003c20 <memcpy>

	sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000850:	2119      	movs	r1, #25
 8000852:	68b8      	ldr	r0, [r7, #8]
 8000854:	f7ff ff2c 	bl	80006b0 <sendCommand>
	rxEvent=(uint8_t*)malloc(7);
 8000858:	2007      	movs	r0, #7
 800085a:	f003 f8ab 	bl	80039b4 <malloc>
 800085e:	4603      	mov	r3, r0
 8000860:	607b      	str	r3, [r7, #4]
	while(!dataAvailable);
 8000862:	bf00      	nop
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <setConnectable+0xf4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0fb      	beq.n	8000864 <setConnectable+0x94>
	res=fetchBleEvent(rxEvent,7);
 800086c:	2107      	movs	r1, #7
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fe6e 	bl	8000550 <fetchBleEvent>
 8000874:	6038      	str	r0, [r7, #0]
	if(res==BLE_OK){
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10f      	bne.n	800089c <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 800087c:	2207      	movs	r2, #7
 800087e:	4912      	ldr	r1, [pc, #72]	@ (80008c8 <setConnectable+0xf8>)
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff feef 	bl	8000664 <checkEventResp>
 8000886:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d106      	bne.n	800089c <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <setConnectable+0xfc>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <setConnectable+0xfc>)
 800089a:	801a      	strh	r2, [r3, #0]
		}
	}

	free(rxEvent);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f003 f891 	bl	80039c4 <free>
	free(discoverableCommand);
 80008a2:	68b8      	ldr	r0, [r7, #8]
 80008a4:	f003 f88e 	bl	80039c4 <free>
	free(localname);
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f003 f88b 	bl	80039c4 <free>
	HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f001 f8f6 	bl	8001aa0 <HAL_Delay>
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	20000114 	.word	0x20000114
 80008c0:	20000078 	.word	0x20000078
 80008c4:	200002e8 	.word	0x200002e8
 80008c8:	20000088 	.word	0x20000088
 80008cc:	200002e2 	.word	0x200002e2

080008d0 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
	int response;

	sendCommand(command,size);
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fee5 	bl	80006b0 <sendCommand>
	rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	005a      	lsls	r2, r3, #1
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f860 	bl	80039b4 <malloc>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <BLE_command+0x90>)
 80008fa:	601a      	str	r2, [r3, #0]

	long contatore=0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
	while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000900:	e007      	b.n	8000912 <BLE_command+0x42>
		contatore++;
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	3301      	adds	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
		if(contatore>30000){
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800090e:	4293      	cmp	r3, r2
 8000910:	dc07      	bgt.n	8000922 <BLE_command+0x52>
	while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000912:	2140      	movs	r1, #64	@ 0x40
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <BLE_command+0x94>)
 8000916:	f001 fbc3 	bl	80020a0 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f0      	beq.n	8000902 <BLE_command+0x32>
 8000920:	e000      	b.n	8000924 <BLE_command+0x54>
			break;
 8000922:	bf00      	nop
		}
	}


	response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <BLE_command+0x90>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	005a      	lsls	r2, r3, #1
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4619      	mov	r1, r3
 8000932:	f7ff fe0d 	bl	8000550 <fetchBleEvent>
 8000936:	6178      	str	r0, [r7, #20]
	if(response==BLE_OK){
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d107      	bne.n	800094e <BLE_command+0x7e>
		response=checkEventResp(rxEvent,result,sizeRes);
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <BLE_command+0x90>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe8c 	bl	8000664 <checkEventResp>
 800094c:	6178      	str	r0, [r7, #20]
	}
	HAL_Delay(10);
 800094e:	200a      	movs	r0, #10
 8000950:	f001 f8a6 	bl	8001aa0 <HAL_Delay>


	return response;
 8000954:	697b      	ldr	r3, [r7, #20]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200002e4 	.word	0x200002e4
 8000964:	48001000 	.word	0x48001000

08000968 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <addService+0x60>)
 8000976:	2210      	movs	r2, #16
 8000978:	68f9      	ldr	r1, [r7, #12]
 800097a:	4618      	mov	r0, r3
 800097c:	f003 f950 	bl	8003c20 <memcpy>
	ADD_PRIMARY_SERVICE[22]=attributes;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <addService+0x64>)
 8000986:	759a      	strb	r2, [r3, #22]
	if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000988:	2301      	movs	r3, #1
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2307      	movs	r3, #7
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <addService+0x68>)
 8000990:	2117      	movs	r1, #23
 8000992:	480e      	ldr	r0, [pc, #56]	@ (80009cc <addService+0x64>)
 8000994:	f7ff ff9c 	bl	80008d0 <BLE_command>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10a      	bne.n	80009b4 <addService+0x4c>
		handle[0]=rxEvent[7];
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <addService+0x6c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	79da      	ldrb	r2, [r3, #7]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	701a      	strb	r2, [r3, #0]
		handle[1]=rxEvent[8];
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <addService+0x6c>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3301      	adds	r3, #1
 80009b0:	7a12      	ldrb	r2, [r2, #8]
 80009b2:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <addService+0x6c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f803 	bl	80039c4 <free>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000095 	.word	0x20000095
 80009cc:	20000090 	.word	0x20000090
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	200002e4 	.word	0x200002e4

080009d8 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	70fb      	strb	r3, [r7, #3]
	memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <addCharacteristic+0x74>)
 80009e8:	2210      	movs	r2, #16
 80009ea:	68f9      	ldr	r1, [r7, #12]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 f917 	bl	8003c20 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <addCharacteristic+0x78>)
 80009f8:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	785a      	ldrb	r2, [r3, #1]
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <addCharacteristic+0x78>)
 8000a00:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <addCharacteristic+0x78>)
 8000a04:	78fb      	ldrb	r3, [r7, #3]
 8000a06:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000a08:	4a11      	ldr	r2, [pc, #68]	@ (8000a50 <addCharacteristic+0x78>)
 8000a0a:	7e3b      	ldrb	r3, [r7, #24]
 8000a0c:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000a0e:	2301      	movs	r3, #1
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2307      	movs	r3, #7
 8000a14:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <addCharacteristic+0x7c>)
 8000a16:	211e      	movs	r1, #30
 8000a18:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <addCharacteristic+0x78>)
 8000a1a:	f7ff ff59 	bl	80008d0 <BLE_command>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10a      	bne.n	8000a3a <addCharacteristic+0x62>
		handleChar[0]=rxEvent[7];
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <addCharacteristic+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	79da      	ldrb	r2, [r3, #7]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	701a      	strb	r2, [r3, #0]
		handleChar[1]=rxEvent[8];
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <addCharacteristic+0x80>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	7a12      	ldrb	r2, [r2, #8]
 8000a38:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <addCharacteristic+0x80>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 ffc0 	bl	80039c4 <free>
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000b7 	.word	0x200000b7
 8000a50:	200000b0 	.word	0x200000b0
 8000a54:	200000d0 	.word	0x200000d0
 8000a58:	200002e4 	.word	0x200002e4

08000a5c <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3306      	adds	r3, #6
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <updateCharValue+0x9c>)
 8000a74:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <updateCharValue+0x9c>)
 8000a7c:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	785a      	ldrb	r2, [r3, #1]
 8000a82:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <updateCharValue+0x9c>)
 8000a84:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <updateCharValue+0x9c>)
 8000a8c:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	785a      	ldrb	r2, [r3, #1]
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <updateCharValue+0x9c>)
 8000a94:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <updateCharValue+0x9c>)
 8000a9c:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <updateCharValue+0x9c>)
 8000aa4:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	330a      	adds	r3, #10
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 ff82 	bl	80039b4 <malloc>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	4910      	ldr	r1, [pc, #64]	@ (8000af8 <updateCharValue+0x9c>)
 8000ab8:	6978      	ldr	r0, [r7, #20]
 8000aba:	f003 f8b1 	bl	8003c20 <memcpy>
	memcpy(commandComplete+10,data,size);
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	330a      	adds	r3, #10
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	6a39      	ldr	r1, [r7, #32]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f8aa 	bl	8003c20 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f103 010a 	add.w	r1, r3, #10
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <updateCharValue+0xa0>)
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff fef8 	bl	80008d0 <BLE_command>

	free(commandComplete);
 8000ae0:	6978      	ldr	r0, [r7, #20]
 8000ae2:	f002 ff6f 	bl	80039c4 <free>
	free(rxEvent);
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <updateCharValue+0xa4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 ff6a 	bl	80039c4 <free>
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	200000d0 	.word	0x200000d0
 8000b00:	200002e4 	.word	0x200002e4

08000b04 <disconnectBLE>:

/** 
 * @brief Disconnects the peripheral from the central
 */
void disconnectBLE(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
	if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <disconnectBLE+0x98>)
 8000b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b14:	d105      	bne.n	8000b22 <disconnectBLE+0x1e>
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <disconnectBLE+0x98>)
 8000b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b20:	d037      	beq.n	8000b92 <disconnectBLE+0x8e>
		// should not be -1
		return;
	}
	uint8_t command[7];
	memcpy(command, DISCONNECT, 4);
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <disconnectBLE+0x9c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	607b      	str	r3, [r7, #4]
	command[4] = connectionHandler[0];
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <disconnectBLE+0x98>)
 8000b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	723b      	strb	r3, [r7, #8]
	command[5] = connectionHandler[1];
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <disconnectBLE+0x98>)
 8000b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	727b      	strb	r3, [r7, #9]
	command[6] = 0x13;
 8000b3c:	2313      	movs	r3, #19
 8000b3e:	72bb      	strb	r3, [r7, #10]
	if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000b40:	1d38      	adds	r0, r7, #4
 8000b42:	2300      	movs	r3, #0
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2307      	movs	r3, #7
 8000b48:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <disconnectBLE+0xa0>)
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	f7ff fec0 	bl	80008d0 <BLE_command>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11e      	bne.n	8000b94 <disconnectBLE+0x90>
		int result=fetchBleEvent(buffer,127);
 8000b56:	217f      	movs	r1, #127	@ 0x7f
 8000b58:	4813      	ldr	r0, [pc, #76]	@ (8000ba8 <disconnectBLE+0xa4>)
 8000b5a:	f7ff fcf9 	bl	8000550 <fetchBleEvent>
 8000b5e:	60f8      	str	r0, [r7, #12]
		if(result==BLE_OK){
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10f      	bne.n	8000b86 <disconnectBLE+0x82>
			if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000b66:	2204      	movs	r2, #4
 8000b68:	4910      	ldr	r1, [pc, #64]	@ (8000bac <disconnectBLE+0xa8>)
 8000b6a:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <disconnectBLE+0xa4>)
 8000b6c:	f7ff fd7a 	bl	8000664 <checkEventResp>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d107      	bne.n	8000b86 <disconnectBLE+0x82>
				//setConnectable();
				connectionHandler[0] = -1;
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <disconnectBLE+0x98>)
 8000b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7c:	801a      	strh	r2, [r3, #0]
				connectionHandler[1] = -1;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <disconnectBLE+0x98>)
 8000b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b84:	805a      	strh	r2, [r3, #2]
			}
		}
		free(rxEvent);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <disconnectBLE+0xac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 ff1a 	bl	80039c4 <free>
 8000b90:	e000      	b.n	8000b94 <disconnectBLE+0x90>
		return;
 8000b92:	bf00      	nop
	}
}
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000014c 	.word	0x2000014c
 8000ba0:	200000e8 	.word	0x200000e8
 8000ba4:	200000f0 	.word	0x200000f0
 8000ba8:	200001d8 	.word	0x200001d8
 8000bac:	200000ec 	.word	0x200000ec
 8000bb0:	200002e4 	.word	0x200002e4

08000bb4 <setDiscoverability>:
/**
 * DO NOT CHANGE FUNCTION definition
 * @brief Sets the discoverability of the peripheral
 * @param mode 0 => Non Discoverable, 1 => Discoverable
 * */
void setDiscoverability(uint8_t mode){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if (mode == 1){
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <setDiscoverability+0x16>
		setConnectable();
 8000bc4:	f7ff fe04 	bl	80007d0 <setConnectable>
		free(rxEvent);
	}
	else{
		// Do nothing
	}
}
 8000bc8:	e00f      	b.n	8000bea <setDiscoverability+0x36>
	else if (mode == 0){
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10c      	bne.n	8000bea <setDiscoverability+0x36>
		if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <setDiscoverability+0x40>)
 8000bd8:	2103      	movs	r1, #3
 8000bda:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <setDiscoverability+0x44>)
 8000bdc:	f7ff fe78 	bl	80008d0 <BLE_command>
		free(rxEvent);
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <setDiscoverability+0x48>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 feed 	bl	80039c4 <free>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000010c 	.word	0x2000010c
 8000bf8:	20000108 	.word	0x20000108
 8000bfc:	200002e4 	.word	0x200002e4

08000c00 <i2c_init>:
#include <stm32l475xx.h>

void i2c_init() {
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000c04:	4b41      	ldr	r3, [pc, #260]	@ (8000d0c <i2c_init+0x10c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d177      	bne.n	8000d00 <i2c_init+0x100>

    // Enable GPIOB and I2C2 clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <i2c_init+0x110>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	4a3e      	ldr	r2, [pc, #248]	@ (8000d10 <i2c_init+0x110>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d10 <i2c_init+0x110>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c20:	4a3b      	ldr	r2, [pc, #236]	@ (8000d10 <i2c_init+0x110>)
 8000c22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c26:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PB10 (SCL) and PB11 (SDA) as alternate function
    GPIOB->MODER &= ~GPIO_MODER_MODE10 & ~GPIO_MODER_MODE11; // Clear mode bits
 8000c28:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <i2c_init+0x114>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a39      	ldr	r2, [pc, #228]	@ (8000d14 <i2c_init+0x114>)
 8000c2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000c32:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1;  // Set alternate function mode
 8000c34:	4b37      	ldr	r3, [pc, #220]	@ (8000d14 <i2c_init+0x114>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a36      	ldr	r2, [pc, #216]	@ (8000d14 <i2c_init+0x114>)
 8000c3a:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000c3e:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11;  // Open-drain mode (needed for I2C)
 8000c40:	4b34      	ldr	r3, [pc, #208]	@ (8000d14 <i2c_init+0x114>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <i2c_init+0x114>)
 8000c46:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000c4a:	6053      	str	r3, [r2, #4]

    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);  // Clear pull-up/down register
 8000c4c:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <i2c_init+0x114>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a30      	ldr	r2, [pc, #192]	@ (8000d14 <i2c_init+0x114>)
 8000c52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000c56:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);  // Pull-up (default 1 from floating)
 8000c58:	4b2e      	ldr	r3, [pc, #184]	@ (8000d14 <i2c_init+0x114>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d14 <i2c_init+0x114>)
 8000c5e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000c62:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <i2c_init+0x114>)
 8000c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c68:	4a2a      	ldr	r2, [pc, #168]	@ (8000d14 <i2c_init+0x114>)
 8000c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000c6e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL11_2;
 8000c70:	4b28      	ldr	r3, [pc, #160]	@ (8000d14 <i2c_init+0x114>)
 8000c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c74:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <i2c_init+0x114>)
 8000c76:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000c7a:	6253      	str	r3, [r2, #36]	@ 0x24

    // Reset I2C2
    I2C2->CR1 &= ~I2C_CR1_PE;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <i2c_init+0x10c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a22      	ldr	r2, [pc, #136]	@ (8000d0c <i2c_init+0x10c>)
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_SWRST;
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <i2c_init+0x10c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d0c <i2c_init+0x10c>)
 8000c8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c92:	6013      	str	r3, [r2, #0]
    I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <i2c_init+0x10c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <i2c_init+0x10c>)
 8000c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000c9e:	6013      	str	r3, [r2, #0]

    // SYSCLK is 4 MHz
    // PCLK1 will be 4 MHz if we configure no divides between SYSCLK and HCLK and b/t HCLK and PCLK1

    // configure HCLK and PCLK1 to have no divides
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1);
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <i2c_init+0x110>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d10 <i2c_init+0x110>)
 8000ca6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8000caa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV1;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <i2c_init+0x110>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <i2c_init+0x110>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	6093      	str	r3, [r2, #8]
    // tFilter = 260 ns (analog filter only)
    // tI2CCLK = 1 / PCLK1 = 1 / 4 MHz = 250 ns
    // PRESC = 0 (keep at 250 ns)
    // SCLL = (tLow - tFilter) / tI2CCLK = round((20 us - 260 ns) / 250 ns) = 79
    // SCLH = tHigh / tI2CCLK = 20 us / 250 ns = 80
    I2C2->TIMINGR &= 0;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <i2c_init+0x10c>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <i2c_init+0x10c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_PRESC_Pos;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <i2c_init+0x10c>)
 8000cc0:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <i2c_init+0x10c>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 79 << I2C_TIMINGR_SCLL_Pos;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <i2c_init+0x10c>)
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <i2c_init+0x10c>)
 8000ccc:	f043 034f 	orr.w	r3, r3, #79	@ 0x4f
 8000cd0:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 80 << I2C_TIMINGR_SCLH_Pos;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <i2c_init+0x10c>)
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <i2c_init+0x10c>)
 8000cd8:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000cdc:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_SDADEL_Pos;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <i2c_init+0x10c>)
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <i2c_init+0x10c>)
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 2 << I2C_TIMINGR_SCLDEL_Pos;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <i2c_init+0x10c>)
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <i2c_init+0x10c>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	6113      	str	r3, [r2, #16]

    // Enable I2C2
    I2C2->CR1 |= I2C_CR1_PE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <i2c_init+0x10c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <i2c_init+0x10c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e000      	b.n	8000d02 <i2c_init+0x102>
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000d00:	bf00      	nop
}
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40005800 	.word	0x40005800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400

08000d18 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	603a      	str	r2, [r7, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	460b      	mov	r3, r1
 8000d28:	71bb      	strb	r3, [r7, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	717b      	strb	r3, [r7, #5]
    uint32_t timeout = 1000000;  // Simple timeout mechanism
 8000d2e:	4b79      	ldr	r3, [pc, #484]	@ (8000f14 <i2c_transaction+0x1fc>)
 8000d30:	60fb      	str	r3, [r7, #12]

    // Ensure the bus is free
    while ((I2C2->ISR & I2C_ISR_BUSY) && --timeout);
 8000d32:	bf00      	nop
 8000d34:	4b78      	ldr	r3, [pc, #480]	@ (8000f18 <i2c_transaction+0x200>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <i2c_transaction+0x34>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f3      	bne.n	8000d34 <i2c_transaction+0x1c>
    if (!timeout) return 1;  // Timeout error
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <i2c_transaction+0x3e>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0d7      	b.n	8000f06 <i2c_transaction+0x1ee>

    if (dir) {  // read
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8087 	beq.w	8000e6c <i2c_transaction+0x154>
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a6d      	ldr	r2, [pc, #436]	@ (8000f18 <i2c_transaction+0x200>)
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000d66:	4b6c      	ldr	r3, [pc, #432]	@ (8000f18 <i2c_transaction+0x200>)
 8000d68:	4a6b      	ldr	r2, [pc, #428]	@ (8000f18 <i2c_transaction+0x200>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 1 << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8000f18 <i2c_transaction+0x200>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a69      	ldr	r2, [pc, #420]	@ (8000f18 <i2c_transaction+0x200>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d78:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000d7a:	4b67      	ldr	r3, [pc, #412]	@ (8000f18 <i2c_transaction+0x200>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a66      	ldr	r2, [pc, #408]	@ (8000f18 <i2c_transaction+0x200>)
 8000d80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d84:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	72fb      	strb	r3, [r7, #11]
 8000d8a:	e06a      	b.n	8000e62 <i2c_transaction+0x14a>
	    	timeout = 1000000;
 8000d8c:	4b61      	ldr	r3, [pc, #388]	@ (8000f14 <i2c_transaction+0x1fc>)
 8000d8e:	60fb      	str	r3, [r7, #12]

    	    if (i == 0) {
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d149      	bne.n	8000e2a <i2c_transaction+0x112>
    	    	while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000d96:	bf00      	nop
 8000d98:	4b5f      	ldr	r3, [pc, #380]	@ (8000f18 <i2c_transaction+0x200>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <i2c_transaction+0x98>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f3      	bne.n	8000d98 <i2c_transaction+0x80>
    	        if (!timeout) return 2;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <i2c_transaction+0xa2>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e0a5      	b.n	8000f06 <i2c_transaction+0x1ee>
    	        I2C2->TXDR = data[i];
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b55      	ldr	r3, [pc, #340]	@ (8000f18 <i2c_transaction+0x200>)
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28

    	        while (!(I2C2->ISR & I2C_ISR_TC) && --timeout);
 8000dc6:	bf00      	nop
 8000dc8:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <i2c_transaction+0x200>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <i2c_transaction+0xc8>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f3      	bne.n	8000dc8 <i2c_transaction+0xb0>
    	       	if (!timeout) return 2;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <i2c_transaction+0xd2>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e08d      	b.n	8000f06 <i2c_transaction+0x1ee>

    	        I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4a4a      	ldr	r2, [pc, #296]	@ (8000f18 <i2c_transaction+0x200>)
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_RD_WRN;  // transfer direction. 0 for write, 1 for read
 8000df2:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <i2c_transaction+0x200>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4a48      	ldr	r2, [pc, #288]	@ (8000f18 <i2c_transaction+0x200>)
 8000df8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfc:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= (len - 1) << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000dfe:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <i2c_transaction+0x200>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	797a      	ldrb	r2, [r7, #5]
 8000e04:	3a01      	subs	r2, #1
 8000e06:	0412      	lsls	r2, r2, #16
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4a43      	ldr	r2, [pc, #268]	@ (8000f18 <i2c_transaction+0x200>)
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_AUTOEND;  // auto transmit STOP after # of bytes
 8000e10:	4b41      	ldr	r3, [pc, #260]	@ (8000f18 <i2c_transaction+0x200>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4a40      	ldr	r2, [pc, #256]	@ (8000f18 <i2c_transaction+0x200>)
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e1a:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f18 <i2c_transaction+0x200>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a3d      	ldr	r2, [pc, #244]	@ (8000f18 <i2c_transaction+0x200>)
 8000e22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e26:	6053      	str	r3, [r2, #4]

    	       	continue;
 8000e28:	e018      	b.n	8000e5c <i2c_transaction+0x144>
    	    }

    	    while (!(I2C2->ISR & I2C_ISR_RXNE) && --timeout);
 8000e2a:	bf00      	nop
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f18 <i2c_transaction+0x200>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d105      	bne.n	8000e44 <i2c_transaction+0x12c>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f3      	bne.n	8000e2c <i2c_transaction+0x114>
    	    if (!timeout) return 3;  // Timeout error
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <i2c_transaction+0x136>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e05b      	b.n	8000f06 <i2c_transaction+0x1ee>
    	    data[i] = I2C2->RXDR;
 8000e4e:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <i2c_transaction+0x200>)
 8000e50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	b2ca      	uxtb	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
	    for (uint8_t i = 0; i < len; i++) {
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	72fb      	strb	r3, [r7, #11]
 8000e62:	7afa      	ldrb	r2, [r7, #11]
 8000e64:	797b      	ldrb	r3, [r7, #5]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d390      	bcc.n	8000d8c <i2c_transaction+0x74>
 8000e6a:	e03e      	b.n	8000eea <i2c_transaction+0x1d2>
	    }
    } else {  // write
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000f18 <i2c_transaction+0x200>)
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <i2c_transaction+0x200>)
 8000e76:	4a28      	ldr	r2, [pc, #160]	@ (8000f18 <i2c_transaction+0x200>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= len << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <i2c_transaction+0x200>)
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	4924      	ldr	r1, [pc, #144]	@ (8000f18 <i2c_transaction+0x200>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	604b      	str	r3, [r1, #4]
    	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <i2c_transaction+0x200>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <i2c_transaction+0x200>)
 8000e90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e94:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <i2c_transaction+0x200>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <i2c_transaction+0x200>)
 8000e9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ea0:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	72bb      	strb	r3, [r7, #10]
 8000ea6:	e01c      	b.n	8000ee2 <i2c_transaction+0x1ca>
	    	timeout = 1000000;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <i2c_transaction+0x1fc>)
 8000eaa:	60fb      	str	r3, [r7, #12]

            while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000eac:	bf00      	nop
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <i2c_transaction+0x200>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d105      	bne.n	8000ec6 <i2c_transaction+0x1ae>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f3      	bne.n	8000eae <i2c_transaction+0x196>
   	        if (!timeout) return 2;  // Timeout error
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <i2c_transaction+0x1b8>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e01a      	b.n	8000f06 <i2c_transaction+0x1ee>
    	    I2C2->TXDR = data[i];
 8000ed0:	7abb      	ldrb	r3, [r7, #10]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <i2c_transaction+0x200>)
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
	    for (uint8_t i = 0; i < len; i++) {
 8000edc:	7abb      	ldrb	r3, [r7, #10]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	72bb      	strb	r3, [r7, #10]
 8000ee2:	7aba      	ldrb	r2, [r7, #10]
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3de      	bcc.n	8000ea8 <i2c_transaction+0x190>
	    }
    }

    while (!(I2C2->ISR & I2C_ISR_STOPF));  // Wait for STOP condition
 8000eea:	bf00      	nop
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <i2c_transaction+0x200>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f9      	beq.n	8000eec <i2c_transaction+0x1d4>
    I2C2->ICR |= I2C_ICR_STOPCF;  // Clear STOP flag
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <i2c_transaction+0x200>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <i2c_transaction+0x200>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	61d3      	str	r3, [r2, #28]

    return 0;  // Success
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	000f4240 	.word	0x000f4240
 8000f18:	40005800 	.word	0x40005800

08000f1c <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <leds_init+0xc4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe0 <leds_init+0xc4>)
 8000f26:	f043 0303 	orr.w	r3, r3, #3
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Configure PA5 and PB14 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000f2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f36:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000f3a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <leds_init+0xc8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a24      	ldr	r2, [pc, #144]	@ (8000fe4 <leds_init+0xc8>)
 8000f52:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000f56:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <leds_init+0xc8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <leds_init+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000f64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f6e:	f023 0320 	bic.w	r3, r3, #32
 8000f72:	6053      	str	r3, [r2, #4]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <leds_init+0xc8>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe4 <leds_init+0xc8>)
 8000f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f7e:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000f80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f8e:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD14;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <leds_init+0xc8>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <leds_init+0xc8>)
 8000f96:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000f9a:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000f9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fa6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000faa:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <leds_init+0xc8>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe4 <leds_init+0xc8>)
 8000fb2:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000fb6:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000fb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fc2:	f023 0320 	bic.w	r3, r3, #32
 8000fc6:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <leds_init+0xc8>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <leds_init+0xc8>)
 8000fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fd2:	6153      	str	r3, [r2, #20]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <leds_set>:

void leds_set(uint8_t led)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d847      	bhi.n	8001088 <leds_set+0xa0>
 8000ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <leds_set+0x18>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001011 	.word	0x08001011
 8001004:	0800102f 	.word	0x0800102f
 8001008:	0800104d 	.word	0x0800104d
 800100c:	0800106b 	.word	0x0800106b
        case 0:
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001010:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800101a:	f023 0320 	bic.w	r3, r3, #32
 800101e:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <leds_set+0xac>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <leds_set+0xac>)
 8001026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800102a:	6153      	str	r3, [r2, #20]
            break;
 800102c:	e02c      	b.n	8001088 <leds_set+0xa0>
        case 1:
            //LED 2 is turned on
            GPIOA->ODR |= GPIO_ODR_OD5;
 800102e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <leds_set+0xac>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <leds_set+0xac>)
 8001044:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001048:	6153      	str	r3, [r2, #20]
            break;
 800104a:	e01d      	b.n	8001088 <leds_set+0xa0>
        case 2:
        	//LED 1 is turned on
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 800104c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001056:	f023 0320 	bic.w	r3, r3, #32
 800105a:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <leds_set+0xac>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	4a0c      	ldr	r2, [pc, #48]	@ (8001094 <leds_set+0xac>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001066:	6153      	str	r3, [r2, #20]
            break;
 8001068:	e00e      	b.n	8001088 <leds_set+0xa0>
        case 3:
        	//Both LEDs are on
            GPIOA->ODR |= GPIO_ODR_OD5;
 800106a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <leds_set+0xac>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <leds_set+0xac>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6153      	str	r3, [r2, #20]
            break;
 8001086:	bf00      	nop

    }
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	48000400 	.word	0x48000400

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	@ (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <lptimer_init>:
#include "leds.h"
#include <stm32l475xx.h>


void lptimer_init(LPTIM_TypeDef* timer)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
//	timer->DIER|=TIM_DIER_UIE;
//	NVIC_EnableIRQ(TIM2_IRQn);
//	NVIC_SetPriority(TIM2_IRQn, 0);
//	timer->CR1|= TIM_CR1_CEN; //Starting the timer

	timer->CR &= ~LPTIM_CR_ENABLE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f023 0201 	bic.w	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	611a      	str	r2, [r3, #16]

	// Enable the LSI clock
	RCC->CSR |= RCC_CSR_LSION;
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <lptimer_init+0xac>)
 800113e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001142:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <lptimer_init+0xac>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
	while ((RCC->CSR & RCC_CSR_LSIRDY) == 0);
 800114c:	bf00      	nop
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <lptimer_init+0xac>)
 8001150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f8      	beq.n	800114e <lptimer_init+0x26>

	RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL;  // Clear clock selection bits
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <lptimer_init+0xac>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001162:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <lptimer_init+0xac>)
 8001164:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR |= (0b01 << RCC_CCIPR_LPTIM1SEL_Pos);  // Set 01 for LSI
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <lptimer_init+0xac>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001172:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <lptimer_init+0xac>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	timer->CNT = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
	RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <lptimer_init+0xac>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <lptimer_init+0xac>)
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800118c:	6593      	str	r3, [r2, #88]	@ 0x58
	timer->CFGR |= (LPTIM_CFGR_PRESC_0 | LPTIM_CFGR_PRESC_2); // divide by 32 PRESC (1khz freq, 1ms period)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f443 6220 	orr.w	r2, r3, #2560	@ 0xa00
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60da      	str	r2, [r3, #12]
	timer->ARR = 49;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2231      	movs	r2, #49	@ 0x31
 800119e:	619a      	str	r2, [r3, #24]
	timer->IER = LPTIM_IER_ARRMIE;  // Enable interrupt on match
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	609a      	str	r2, [r3, #8]

	NVIC_EnableIRQ(LPTIM1_IRQn);
 80011a6:	2041      	movs	r0, #65	@ 0x41
 80011a8:	f7ff ff76 	bl	8001098 <__NVIC_EnableIRQ>
	NVIC_SetPriority(LPTIM1_IRQn, 0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2041      	movs	r0, #65	@ 0x41
 80011b0:	f7ff ff90 	bl	80010d4 <__NVIC_SetPriority>

	timer->CR |= LPTIM_CR_ENABLE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	611a      	str	r2, [r3, #16]
	timer->CR |= LPTIM_CR_CNTSTRT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	f043 0204 	orr.w	r2, r3, #4
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	611a      	str	r2, [r3, #16]
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <lptimer_set_ms>:
{
	timer->CNT = 0; // Reseting the timer to zero
}

void lptimer_set_ms(LPTIM_TypeDef* timer, uint16_t period_ms)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
	timer->ARR = period_ms-1; // Setting the timer interrupt to whatever is passed in
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	461a      	mov	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <sendMissingAlert>:
// Rahul's Student ID (0596): 00 00 00 10 01 01 01 00
volatile int counter = 0;
volatile uint8_t minute_counter = 0; // counter for how many minutes have gone by
int bool = 1;

void sendMissingAlert(int seconds) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	@ 0x50
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	char message[50];  // Buffer for the formatted string
	snprintf(message, sizeof(message), "PrivTag has been missing for %d seconds", seconds);
 8001204:	f107 0008 	add.w	r0, r7, #8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a18      	ldr	r2, [pc, #96]	@ (800126c <sendMissingAlert+0x70>)
 800120c:	2132      	movs	r1, #50	@ 0x32
 800120e:	f002 fc83 	bl	8003b18 <sniprintf>

	int message_len = strlen(message);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ffda 	bl	80001d0 <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	643b      	str	r3, [r7, #64]	@ 0x40
	int offset = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	647b      	str	r3, [r7, #68]	@ 0x44

	while (offset < message_len) {
 8001224:	e018      	b.n	8001258 <sendMissingAlert+0x5c>
		int chunk_size = (message_len - offset > BLE_MAX_PACKET_SIZE) ? BLE_MAX_PACKET_SIZE : (message_len - offset);
 8001226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b14      	cmp	r3, #20
 800122e:	bfa8      	it	ge
 8001230:	2314      	movge	r3, #20
 8001232:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Send each chunk as a standalone notification
		updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, chunk_size, (uint8_t*)&message[offset]);
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800123a:	4413      	add	r3, r2
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001240:	2200      	movs	r2, #0
 8001242:	490b      	ldr	r1, [pc, #44]	@ (8001270 <sendMissingAlert+0x74>)
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <sendMissingAlert+0x78>)
 8001246:	f7ff fc09 	bl	8000a5c <updateCharValue>

		offset += chunk_size;
 800124a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800124c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800124e:	4413      	add	r3, r2
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
		HAL_Delay(50);  // Small delay to allow BLE module to process
 8001252:	2032      	movs	r0, #50	@ 0x32
 8001254:	f000 fc24 	bl	8001aa0 <HAL_Delay>
	while (offset < message_len) {
 8001258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800125a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800125c:	429a      	cmp	r2, r3
 800125e:	dbe2      	blt.n	8001226 <sendMissingAlert+0x2a>
	}
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3748      	adds	r7, #72	@ 0x48
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	08004364 	.word	0x08004364
 8001270:	200002e0 	.word	0x200002e0
 8001274:	200002d8 	.word	0x200002d8

08001278 <LPTIM1_IRQHandler>:

void LPTIM1_IRQHandler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	if (LPTIM1->ISR & LPTIM_ISR_ARRM) {
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <LPTIM1_IRQHandler+0x30>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00a      	beq.n	800129e <LPTIM1_IRQHandler+0x26>
        LPTIM1->ICR |= LPTIM_ICR_ARRMCF;  // Clear interrupt flag
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <LPTIM1_IRQHandler+0x30>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <LPTIM1_IRQHandler+0x30>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6053      	str	r3, [r2, #4]
        // Your custom wakeup or callback code here
        counter += 1;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <LPTIM1_IRQHandler+0x34>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <LPTIM1_IRQHandler+0x34>)
 800129c:	6013      	str	r3, [r2, #0]
    }
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40007c00 	.word	0x40007c00
 80012ac:	20000350 	.word	0x20000350

080012b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012b6:	f000 fb7e 	bl	80019b6 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80012ba:	f000 f92b 	bl	8001514 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012be:	f000 f9ad 	bl	800161c <MX_GPIO_Init>
	MX_SPI3_Init();
 80012c2:	f000 f96d 	bl	80015a0 <MX_SPI3_Init>

	//RESET BLE MODULE
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d0:	f000 fefe 	bl	80020d0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012d4:	200a      	movs	r0, #10
 80012d6:	f000 fbe3 	bl	8001aa0 <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e4:	f000 fef4 	bl	80020d0 <HAL_GPIO_WritePin>

	ble_init();
 80012e8:	f7ff f818 	bl	800031c <ble_init>
	//Old code
	leds_init();
 80012ec:	f7ff fe16 	bl	8000f1c <leds_init>
	lptimer_init(LPTIM1);
 80012f0:	487f      	ldr	r0, [pc, #508]	@ (80014f0 <main+0x240>)
 80012f2:	f7ff ff19 	bl	8001128 <lptimer_init>
	lptimer_set_ms(LPTIM1, TIME_PERIOD);
 80012f6:	21c8      	movs	r1, #200	@ 0xc8
 80012f8:	487d      	ldr	r0, [pc, #500]	@ (80014f0 <main+0x240>)
 80012fa:	f7ff ff6d 	bl	80011d8 <lptimer_set_ms>
	HAL_Delay(500);
 80012fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001302:	f000 fbcd 	bl	8001aa0 <HAL_Delay>
	i2c_init();
 8001306:	f7ff fc7b 	bl	8000c00 <i2c_init>
	lsm6dsl_init();
 800130a:	f7fe ffb9 	bl	8000280 <lsm6dsl_init>

	RCC->APB1ENR1 &= ~RCC_APB1ENR1_USART2EN;
 800130e:	4b79      	ldr	r3, [pc, #484]	@ (80014f4 <main+0x244>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	4a78      	ldr	r2, [pc, #480]	@ (80014f4 <main+0x244>)
 8001314:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001318:	6593      	str	r3, [r2, #88]	@ 0x58

	int16_t x, y, z;
	int16_t last_x = 0, last_y = 0, last_z = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800131e:	2300      	movs	r3, #0
 8001320:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001322:	2300      	movs	r3, #0
 8001324:	847b      	strh	r3, [r7, #34]	@ 0x22
	int stable_counter = 0;  // Count how many iterations values remain within threshold
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
	const int STABLE_THRESHOLD = 160;
 800132a:	23a0      	movs	r3, #160	@ 0xa0
 800132c:	61bb      	str	r3, [r7, #24]

	//Old code end
	HAL_Delay(10);
 800132e:	200a      	movs	r0, #10
 8001330:	f000 fbb6 	bl	8001aa0 <HAL_Delay>

	uint8_t nonDiscoverable = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	75fb      	strb	r3, [r7, #23]
	disconnectBLE();
 8001338:	f7ff fbe4 	bl	8000b04 <disconnectBLE>
	while (1)
	{
		RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN); // I2C
 800133c:	4b6d      	ldr	r3, [pc, #436]	@ (80014f4 <main+0x244>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	4a6c      	ldr	r2, [pc, #432]	@ (80014f4 <main+0x244>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001346:	6593      	str	r3, [r2, #88]	@ 0x58
		//Old code
		lsm6dsl_read_xyz(&x, &y, &z);
 8001348:	1dba      	adds	r2, r7, #6
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	f107 030a 	add.w	r3, r7, #10
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ffad 	bl	80002b2 <lsm6dsl_read_xyz>
		RCC->APB1ENR1 &= ~(RCC_APB1ENR1_I2C1EN); // I2C
 8001358:	4b66      	ldr	r3, [pc, #408]	@ (80014f4 <main+0x244>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135c:	4a65      	ldr	r2, [pc, #404]	@ (80014f4 <main+0x244>)
 800135e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001362:	6593      	str	r3, [r2, #88]	@ 0x58

		// Convert values to match the scale
		int16_t x_scaled = x / 16;
 8001364:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001368:	2b00      	cmp	r3, #0
 800136a:	da00      	bge.n	800136e <main+0xbe>
 800136c:	330f      	adds	r3, #15
 800136e:	111b      	asrs	r3, r3, #4
 8001370:	82bb      	strh	r3, [r7, #20]
		int16_t y_scaled = y / 16;
 8001372:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da00      	bge.n	800137c <main+0xcc>
 800137a:	330f      	adds	r3, #15
 800137c:	111b      	asrs	r3, r3, #4
 800137e:	827b      	strh	r3, [r7, #18]
		int16_t z_scaled = z / 16;
 8001380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da00      	bge.n	800138a <main+0xda>
 8001388:	330f      	adds	r3, #15
 800138a:	111b      	asrs	r3, r3, #4
 800138c:	823b      	strh	r3, [r7, #16]

		// Check if the change is within the stable threshold
		if (abs(x_scaled - last_x) <= STABLE_THRESHOLD && abs(y_scaled - last_y) <= STABLE_THRESHOLD && abs(z_scaled - last_z) <= STABLE_THRESHOLD)
 800138e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001392:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bfb8      	it	lt
 800139c:	425b      	neglt	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	db61      	blt.n	8001468 <main+0x1b8>
 80013a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bfb8      	it	lt
 80013b2:	425b      	neglt	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	db56      	blt.n	8001468 <main+0x1b8>
 80013ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80013be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bfb8      	it	lt
 80013c8:	425b      	neglt	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	db4b      	blt.n	8001468 <main+0x1b8>
		{
			stable_counter++;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3301      	adds	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
			if (counter >= MINUTE_COUNT && bool && counter%(SEC_COUNT * 10)==0)
 80013d6:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <main+0x248>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80013de:	db28      	blt.n	8001432 <main+0x182>
 80013e0:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <main+0x24c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d024      	beq.n	8001432 <main+0x182>
 80013e8:	4b43      	ldr	r3, [pc, #268]	@ (80014f8 <main+0x248>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <main+0x250>)
 80013ee:	fb83 1302 	smull	r1, r3, r3, r2
 80013f2:	1119      	asrs	r1, r3, #4
 80013f4:	17d3      	asrs	r3, r2, #31
 80013f6:	1acb      	subs	r3, r1, r3
 80013f8:	2132      	movs	r1, #50	@ 0x32
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d116      	bne.n	8001432 <main+0x182>
			{
				setDiscoverability(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fbd5 	bl	8000bb4 <setDiscoverability>
				leds_set(2);
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff fdec 	bl	8000fe8 <leds_set>
				//updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);

				bool = 0;
 8001410:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <main+0x24c>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
				int missing_seconds = counter / SEC_COUNT;
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <main+0x248>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a3a      	ldr	r2, [pc, #232]	@ (8001504 <main+0x254>)
 800141c:	fb82 1203 	smull	r1, r2, r2, r3
 8001420:	1052      	asrs	r2, r2, #1
 8001422:	17db      	asrs	r3, r3, #31
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
				sendMissingAlert(missing_seconds);
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fee7 	bl	80011fc <sendMissingAlert>
			{
 800142e:	bf00      	nop
			if (counter >= MINUTE_COUNT && bool && counter%(SEC_COUNT * 10)==0)
 8001430:	e026      	b.n	8001480 <main+0x1d0>

			}
			else if(counter >= MINUTE_COUNT && !bool && counter%(SEC_COUNT * 10)!=0)
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <main+0x248>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800143a:	db21      	blt.n	8001480 <main+0x1d0>
 800143c:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <main+0x24c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d11d      	bne.n	8001480 <main+0x1d0>
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <main+0x248>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b2d      	ldr	r3, [pc, #180]	@ (8001500 <main+0x250>)
 800144a:	fb83 1302 	smull	r1, r3, r3, r2
 800144e:	1119      	asrs	r1, r3, #4
 8001450:	17d3      	asrs	r3, r2, #31
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	2132      	movs	r1, #50	@ 0x32
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00f      	beq.n	8001480 <main+0x1d0>
			{
				bool = 1;
 8001460:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <main+0x24c>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
			if (counter >= MINUTE_COUNT && bool && counter%(SEC_COUNT * 10)==0)
 8001466:	e00b      	b.n	8001480 <main+0x1d0>
			}
		}
		else
		{
			disconnectBLE();
 8001468:	f7ff fb4c 	bl	8000b04 <disconnectBLE>
			leds_set(0);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fdbb 	bl	8000fe8 <leds_set>
			minute_counter = 0;
 8001472:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <main+0x258>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
			counter = 0; // Reset the counter when the thing moves
 8001478:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <main+0x248>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e000      	b.n	8001482 <main+0x1d2>
			if (counter >= MINUTE_COUNT && bool && counter%(SEC_COUNT * 10)==0)
 8001480:	bf00      	nop
		}

		// Updating the compares
		last_x = x_scaled;
 8001482:	8abb      	ldrh	r3, [r7, #20]
 8001484:	84fb      	strh	r3, [r7, #38]	@ 0x26
		last_y = y_scaled;
 8001486:	8a7b      	ldrh	r3, [r7, #18]
 8001488:	84bb      	strh	r3, [r7, #36]	@ 0x24
		last_z = z_scaled;
 800148a:	8a3b      	ldrh	r3, [r7, #16]
 800148c:	847b      	strh	r3, [r7, #34]	@ 0x22

		//Old code end

		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d108      	bne.n	80014a6 <main+0x1f6>
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	481d      	ldr	r0, [pc, #116]	@ (800150c <main+0x25c>)
 8001498:	f000 fe02 	bl	80020a0 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <main+0x1f6>
			catchBLE();
 80014a2:	f7ff f951 	bl	8000748 <catchBLE>
		/*
		 * Turn off interrupts
		 *
		 */

		RCC->APB2ENR &= ~RCC_APB2ENR_SPI1EN;        // SPI
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <main+0x244>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <main+0x244>)
 80014ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014b0:	6613      	str	r3, [r2, #96]	@ 0x60
		RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <main+0x244>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <main+0x244>)
 80014b8:	f023 0303 	bic.w	r3, r3, #3
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
		HAL_SuspendTick();  // Stop SysTick timer to save power
 80014be:	f000 fb13 	bl	8001ae8 <HAL_SuspendTick>
//		__WFI();
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <main+0x260>)
 80014c4:	221f      	movs	r2, #31
 80014c6:	619a      	str	r2, [r3, #24]
		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 80014c8:	2101      	movs	r1, #1
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 fe3b 	bl	8002146 <HAL_PWR_EnterSTOPMode>

		HAL_ResumeTick();   // Resume SysTick when waking up
 80014d0:	f000 fb1a 	bl	8001b08 <HAL_ResumeTick>
		RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <main+0x244>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <main+0x244>)
 80014da:	f043 0303 	orr.w	r3, r3, #3
 80014de:	64d3      	str	r3, [r2, #76]	@ 0x4c
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;        // SPI
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <main+0x244>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e4:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <main+0x244>)
 80014e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ea:	6613      	str	r3, [r2, #96]	@ 0x60
	{
 80014ec:	e726      	b.n	800133c <main+0x8c>
 80014ee:	bf00      	nop
 80014f0:	40007c00 	.word	0x40007c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	20000350 	.word	0x20000350
 80014fc:	20000150 	.word	0x20000150
 8001500:	51eb851f 	.word	0x51eb851f
 8001504:	66666667 	.word	0x66666667
 8001508:	20000354 	.word	0x20000354
 800150c:	48001000 	.word	0x48001000
 8001510:	40007000 	.word	0x40007000

08001514 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @attention This changes the System clock frequency, make sure you reflect that change in your timer
 * @retval None
 */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b096      	sub	sp, #88	@ 0x58
 8001518:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2244      	movs	r2, #68	@ 0x44
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fb38 	bl	8003b98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001536:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800153a:	f000 fe29 	bl	8002190 <HAL_PWREx_ControlVoltageScaling>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001544:	f000 f902 	bl	800174c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001548:	2310      	movs	r3, #16
 800154a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	@ 0x30
	// This lines changes system clock frequency
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001554:	2370      	movs	r3, #112	@ 0x70
 8001556:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fec1 	bl	80022e8 <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 800156c:	f000 f8ee 	bl	800174c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	230f      	movs	r3, #15
 8001572:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001584:	463b      	mov	r3, r7
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fa89 	bl	8002aa0 <HAL_RCC_ClockConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001594:	f000 f8da 	bl	800174c <Error_Handler>
	}
}
 8001598:	bf00      	nop
 800159a:	3758      	adds	r7, #88	@ 0x58
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001618 <MX_SPI3_Init+0x78>)
 80015a8:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015b0:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b8:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015be:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d2:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015ee:	2207      	movs	r2, #7
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_SPI3_Init+0x74>)
 80015fa:	2208      	movs	r2, #8
 80015fc:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_SPI3_Init+0x74>)
 8001600:	f001 fc3a 	bl	8002e78 <HAL_SPI_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_SPI3_Init+0x6e>
	{
		Error_Handler();
 800160a:	f000 f89f 	bl	800174c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002ec 	.word	0x200002ec
 8001618:	40003c00 	.word	0x40003c00

0800161c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a42      	ldr	r2, [pc, #264]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b40      	ldr	r3, [pc, #256]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <MX_GPIO_Init+0x124>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a3c      	ldr	r2, [pc, #240]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b37      	ldr	r3, [pc, #220]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a36      	ldr	r2, [pc, #216]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <MX_GPIO_Init+0x124>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a30      	ldr	r2, [pc, #192]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a2a      	ldr	r2, [pc, #168]	@ (8001740 <MX_GPIO_Init+0x124>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <MX_GPIO_Init+0x124>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2120      	movs	r1, #32
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b2:	f000 fd0d 	bl	80020d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016bc:	4821      	ldr	r0, [pc, #132]	@ (8001744 <MX_GPIO_Init+0x128>)
 80016be:	f000 fd07 	bl	80020d0 <HAL_GPIO_WritePin>


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016cc:	f000 fd00 	bl	80020d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLE_INT_Pin */
	GPIO_InitStruct.Pin = BLE_INT_Pin;
 80016d0:	2340      	movs	r3, #64	@ 0x40
 80016d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4818      	ldr	r0, [pc, #96]	@ (8001748 <MX_GPIO_Init+0x12c>)
 80016e6:	f000 fb31 	bl	8001d4c <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
	GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80016ea:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80016ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001706:	f000 fb21 	bl	8001d4c <HAL_GPIO_Init>

	/*Configure GPIO pin : BLE_CS_Pin */
	GPIO_InitStruct.Pin = BLE_CS_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4808      	ldr	r0, [pc, #32]	@ (8001744 <MX_GPIO_Init+0x128>)
 8001724:	f000 fb12 	bl	8001d4c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2017      	movs	r0, #23
 800172e:	f000 fad6 	bl	8001cde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001732:	2017      	movs	r0, #23
 8001734:	f000 faef 	bl	8001d16 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	@ 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48001000 	.word	0x48001000

0800174c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <Error_Handler+0x8>

08001758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001762:	4a0e      	ldr	r2, [pc, #56]	@ (800179c <HAL_MspInit+0x44>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6613      	str	r3, [r2, #96]	@ 0x60
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_MspInit+0x44>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	4a08      	ldr	r2, [pc, #32]	@ (800179c <HAL_MspInit+0x44>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001780:	6593      	str	r3, [r2, #88]	@ 0x58
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_MspInit+0x44>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a17      	ldr	r2, [pc, #92]	@ (800181c <HAL_SPI_MspInit+0x7c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d128      	bne.n	8001814 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_SPI_MspInit+0x80>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <HAL_SPI_MspInit+0x80>)
 80017c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_SPI_MspInit+0x80>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_SPI_MspInit+0x80>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <HAL_SPI_MspInit+0x80>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <HAL_SPI_MspInit+0x80>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001804:	2306      	movs	r3, #6
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <HAL_SPI_MspInit+0x84>)
 8001810:	f000 fa9c 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	@ 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40003c00 	.word	0x40003c00
 8001820:	40021000 	.word	0x40021000
 8001824:	48000800 	.word	0x48000800

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <NMI_Handler+0x4>

08001830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <MemManage_Handler+0x4>

08001840 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <UsageFault_Handler+0x4>

08001850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187e:	f000 f8ef 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <EXTI9_5_IRQHandler+0x14>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001892:	2040      	movs	r0, #64	@ 0x40
 8001894:	f000 fc34 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200002e8 	.word	0x200002e8

080018a0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x50>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x16>
		heap_end = &end;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <_sbrk+0x50>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <_sbrk+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <_sbrk+0x50>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <_sbrk+0x50>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	466a      	mov	r2, sp
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d907      	bls.n	80018da <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018ca:	f002 f97d 	bl	8003bc8 <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	220c      	movs	r2, #12
 80018d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d8:	e006      	b.n	80018e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <_sbrk+0x50>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a03      	ldr	r2, [pc, #12]	@ (80018f0 <_sbrk+0x50>)
 80018e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000358 	.word	0x20000358
 80018f4:	200004a8 	.word	0x200004a8

080018f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <SystemInit+0x64>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001902:	4a16      	ldr	r2, [pc, #88]	@ (800195c <SystemInit+0x64>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <SystemInit+0x68>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <SystemInit+0x68>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <SystemInit+0x68>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <SystemInit+0x68>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <SystemInit+0x68>)
 8001924:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001928:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800192c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <SystemInit+0x68>)
 8001930:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001934:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <SystemInit+0x68>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <SystemInit+0x68>)
 800193c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001940:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001942:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <SystemInit+0x68>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <SystemInit+0x64>)
 800194a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800194e:	609a      	str	r2, [r3, #8]
#endif
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	40021000 	.word	0x40021000

08001964 <Reset_Handler>:
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800199c <LoopForever+0x2>
 8001968:	f7ff ffc6 	bl	80018f8 <SystemInit>
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <LoopForever+0x6>)
 800196e:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <LoopForever+0xa>)
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <LoopForever+0xe>)
 8001972:	2300      	movs	r3, #0
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:
 8001976:	58d4      	ldr	r4, [r2, r3]
 8001978:	50c4      	str	r4, [r0, r3]
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:
 800197c:	18c4      	adds	r4, r0, r3
 800197e:	428c      	cmp	r4, r1
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <LoopForever+0x12>)
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <LoopForever+0x16>)
 8001986:	2300      	movs	r3, #0
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:
 800198e:	42a2      	cmp	r2, r4
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>
 8001992:	f002 f91f 	bl	8003bd4 <__libc_init_array>
 8001996:	f7ff fc8b 	bl	80012b0 <main>

0800199a <LoopForever>:
 800199a:	e7fe      	b.n	800199a <LoopForever>
 800199c:	20018000 	.word	0x20018000
 80019a0:	20000000 	.word	0x20000000
 80019a4:	200001b0 	.word	0x200001b0
 80019a8:	08004410 	.word	0x08004410
 80019ac:	200001b0 	.word	0x200001b0
 80019b0:	200004a8 	.word	0x200004a8

080019b4 <ADC1_2_IRQHandler>:
 80019b4:	e7fe      	b.n	80019b4 <ADC1_2_IRQHandler>

080019b6 <HAL_Init>:
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 f981 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f80e 	bl	80019e8 <HAL_InitTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_Init+0x22>
 80019d2:	2301      	movs	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e001      	b.n	80019dc <HAL_Init+0x26>
 80019d8:	f7ff febe 	bl	8001758 <HAL_MspInit>
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_InitTick>:
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <HAL_InitTick+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d023      	beq.n	8001a44 <HAL_InitTick+0x5c>
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <HAL_InitTick+0x70>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <HAL_InitTick+0x6c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f98d 	bl	8001d32 <HAL_SYSTICK_Config>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_InitTick+0x56>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d809      	bhi.n	8001a38 <HAL_InitTick+0x50>
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a2c:	f000 f957 	bl	8001cde <HAL_NVIC_SetPriority>
 8001a30:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_InitTick+0x74>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_InitTick+0x60>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e004      	b.n	8001a48 <HAL_InitTick+0x60>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e001      	b.n	8001a48 <HAL_InitTick+0x60>
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000015c 	.word	0x2000015c
 8001a58:	20000154 	.word	0x20000154
 8001a5c:	20000158 	.word	0x20000158

08001a60 <HAL_IncTick>:
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	2000015c 	.word	0x2000015c
 8001a84:	2000035c 	.word	0x2000035c

08001a88 <HAL_GetTick>:
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000035c 	.word	0x2000035c

08001aa0 <HAL_Delay>:
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000015c 	.word	0x2000015c

08001ae8 <HAL_SuspendTick>:
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_SuspendTick+0x1c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <HAL_SuspendTick+0x1c>)
 8001af2:	f023 0302 	bic.w	r3, r3, #2
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_ResumeTick>:
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_ResumeTick+0x1c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <HAL_ResumeTick+0x1c>)
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <__NVIC_SetPriorityGrouping>:
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	@ (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
 8001c74:	4313      	orrs	r3, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_GPIO_Init>:
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e17f      	b.n	800205c <HAL_GPIO_Init+0x310>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8171 	beq.w	8002056 <HAL_GPIO_Init+0x30a>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x40>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d118      	bne.n	8001e2c <HAL_GPIO_Init+0xe0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	2201      	movs	r2, #1
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	f003 0201 	and.w	r2, r3, #1
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d017      	beq.n	8001e68 <HAL_GPIO_Init+0x11c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x170>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80ac 	beq.w	8002056 <HAL_GPIO_Init+0x30a>
 8001efe:	4b5f      	ldr	r3, [pc, #380]	@ (800207c <HAL_GPIO_Init+0x330>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f02:	4a5e      	ldr	r2, [pc, #376]	@ (800207c <HAL_GPIO_Init+0x330>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800207c <HAL_GPIO_Init+0x330>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <HAL_GPIO_Init+0x334>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f40:	d025      	beq.n	8001f8e <HAL_GPIO_Init+0x242>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4f      	ldr	r2, [pc, #316]	@ (8002084 <HAL_GPIO_Init+0x338>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01f      	beq.n	8001f8a <HAL_GPIO_Init+0x23e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002088 <HAL_GPIO_Init+0x33c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d019      	beq.n	8001f86 <HAL_GPIO_Init+0x23a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4d      	ldr	r2, [pc, #308]	@ (800208c <HAL_GPIO_Init+0x340>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0x236>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <HAL_GPIO_Init+0x344>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00d      	beq.n	8001f7e <HAL_GPIO_Init+0x232>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4b      	ldr	r2, [pc, #300]	@ (8002094 <HAL_GPIO_Init+0x348>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <HAL_GPIO_Init+0x22e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002098 <HAL_GPIO_Init+0x34c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_GPIO_Init+0x22a>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e00c      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	4937      	ldr	r1, [pc, #220]	@ (8002080 <HAL_GPIO_Init+0x334>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001fae:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <HAL_GPIO_Init+0x350>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x286>
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4a32      	ldr	r2, [pc, #200]	@ (800209c <HAL_GPIO_Init+0x350>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6093      	str	r3, [r2, #8]
 8001fd8:	4b30      	ldr	r3, [pc, #192]	@ (800209c <HAL_GPIO_Init+0x350>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2b0>
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	4a27      	ldr	r2, [pc, #156]	@ (800209c <HAL_GPIO_Init+0x350>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	60d3      	str	r3, [r2, #12]
 8002002:	4b26      	ldr	r3, [pc, #152]	@ (800209c <HAL_GPIO_Init+0x350>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2da>
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <HAL_GPIO_Init+0x350>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6053      	str	r3, [r2, #4]
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_GPIO_Init+0x350>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x304>
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	4a12      	ldr	r2, [pc, #72]	@ (800209c <HAL_GPIO_Init+0x350>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	f47f ae78 	bne.w	8001d5c <HAL_GPIO_Init+0x10>
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	48000400 	.word	0x48000400
 8002088:	48000800 	.word	0x48000800
 800208c:	48000c00 	.word	0x48000c00
 8002090:	48001000 	.word	0x48001000
 8002094:	48001400 	.word	0x48001400
 8002098:	48001800 	.word	0x48001800
 800209c:	40010400 	.word	0x40010400

080020a0 <HAL_GPIO_ReadPin>:
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_GPIO_ReadPin+0x1e>
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e001      	b.n	80020c2 <HAL_GPIO_ReadPin+0x22>
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_WritePin>:
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_WritePin+0x24>
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_EXTI_IRQHandler>:
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	6153      	str	r3, [r2, #20]
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f806 	bl	8002130 <HAL_GPIO_EXTI_Callback>
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_EXTI_Callback>:
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_PWR_EnterSTOPMode>:
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	70fb      	strb	r3, [r7, #3]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002158:	d104      	bne.n	8002164 <HAL_PWR_EnterSTOPMode+0x1e>
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f897 	bl	8002290 <HAL_PWREx_EnterSTOP1Mode>
 8002162:	e003      	b.n	800216c <HAL_PWR_EnterSTOPMode+0x26>
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f868 	bl	800223c <HAL_PWREx_EnterSTOP0Mode>
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PWREx_GetVoltageRange>:
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <HAL_PWREx_GetVoltageRange+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_ControlVoltageScaling>:
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800219e:	d130      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x72>
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ac:	d038      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
 80021ae:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2232      	movs	r2, #50	@ 0x32
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e002      	b.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x4c>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e8:	d102      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f2      	bne.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x46>
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fc:	d110      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
 80021fe:	2303      	movs	r3, #3
 8002200:	e00f      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x92>
 8002202:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220e:	d007      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002218:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	2300      	movs	r3, #0
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	20000154 	.word	0x20000154
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_PWREx_EnterSTOP0Mode>:
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0f      	ldr	r2, [pc, #60]	@ (8002288 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800224c:	f023 0307 	bic.w	r3, r3, #7
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6113      	str	r3, [r2, #16]
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_PWREx_EnterSTOP0Mode+0x2c>
 8002264:	bf30      	wfi
 8002266:	e002      	b.n	800226e <HAL_PWREx_EnterSTOP0Mode+0x32>
 8002268:	bf40      	sev
 800226a:	bf20      	wfe
 800226c:	bf20      	wfe
 800226e:	4b07      	ldr	r3, [pc, #28]	@ (800228c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	4a06      	ldr	r2, [pc, #24]	@ (800228c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6113      	str	r3, [r2, #16]
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <HAL_PWREx_EnterSTOP1Mode>:
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0307 	bic.w	r3, r3, #7
 80022a2:	4a0f      	ldr	r2, [pc, #60]	@ (80022e0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6113      	str	r3, [r2, #16]
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_PWREx_EnterSTOP1Mode+0x30>
 80022bc:	bf30      	wfi
 80022be:	e002      	b.n	80022c6 <HAL_PWREx_EnterSTOP1Mode+0x36>
 80022c0:	bf40      	sev
 80022c2:	bf20      	wfe
 80022c4:	bf20      	wfe
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	4a06      	ldr	r2, [pc, #24]	@ (80022e4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6113      	str	r3, [r2, #16]
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <HAL_RCC_OscConfig>:
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e3ca      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 80022fa:	4b97      	ldr	r3, [pc, #604]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	4b94      	ldr	r3, [pc, #592]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80e4 	beq.w	80024e4 <HAL_RCC_OscConfig+0x1fc>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_RCC_OscConfig+0x4a>
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	f040 808b 	bne.w	8002440 <HAL_RCC_OscConfig+0x158>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b01      	cmp	r3, #1
 800232e:	f040 8087 	bne.w	8002440 <HAL_RCC_OscConfig+0x158>
 8002332:	4b89      	ldr	r3, [pc, #548]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_RCC_OscConfig+0x62>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x62>
 8002346:	2301      	movs	r3, #1
 8002348:	e3a2      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	4b82      	ldr	r3, [pc, #520]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_RCC_OscConfig+0x7c>
 800235a:	4b7f      	ldr	r3, [pc, #508]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002362:	e005      	b.n	8002370 <HAL_RCC_OscConfig+0x88>
 8002364:	4b7c      	ldr	r3, [pc, #496]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	4293      	cmp	r3, r2
 8002372:	d223      	bcs.n	80023bc <HAL_RCC_OscConfig+0xd4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd1d 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0xa0>
 8002384:	2301      	movs	r3, #1
 8002386:	e383      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002388:	4b73      	ldr	r3, [pc, #460]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a72      	ldr	r2, [pc, #456]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b70      	ldr	r3, [pc, #448]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	496d      	ldr	r1, [pc, #436]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
 80023a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	4968      	ldr	r1, [pc, #416]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 80023ba:	e025      	b.n	8002408 <HAL_RCC_OscConfig+0x120>
 80023bc:	4b66      	ldr	r3, [pc, #408]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a65      	ldr	r2, [pc, #404]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4960      	ldr	r1, [pc, #384]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
 80023da:	4b5f      	ldr	r3, [pc, #380]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	495b      	ldr	r1, [pc, #364]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_RCC_OscConfig+0x120>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fcdd 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x120>
 8002404:	2301      	movs	r3, #1
 8002406:	e343      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002408:	f000 fc4a 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b52      	ldr	r3, [pc, #328]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	4950      	ldr	r1, [pc, #320]	@ (800255c <HAL_RCC_OscConfig+0x274>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	4a4e      	ldr	r2, [pc, #312]	@ (8002560 <HAL_RCC_OscConfig+0x278>)
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b4e      	ldr	r3, [pc, #312]	@ (8002564 <HAL_RCC_OscConfig+0x27c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fadb 	bl	80019e8 <HAL_InitTick>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d052      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1fa>
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	e327      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d032      	beq.n	80024ae <HAL_RCC_OscConfig+0x1c6>
 8002448:	4b43      	ldr	r3, [pc, #268]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a42      	ldr	r2, [pc, #264]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	f7ff fb18 	bl	8001a88 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x186>
 800245c:	f7ff fb14 	bl	8001a88 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x186>
 800246a:	2303      	movs	r3, #3
 800246c:	e310      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 800246e:	4b3a      	ldr	r3, [pc, #232]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x174>
 800247a:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a36      	ldr	r2, [pc, #216]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b34      	ldr	r3, [pc, #208]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4931      	ldr	r1, [pc, #196]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	492c      	ldr	r1, [pc, #176]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e01a      	b.n	80024e4 <HAL_RCC_OscConfig+0x1fc>
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a29      	ldr	r2, [pc, #164]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	f7ff fae5 	bl	8001a88 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x1ec>
 80024c2:	f7ff fae1 	bl	8001a88 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1ec>
 80024d0:	2303      	movs	r3, #3
 80024d2:	e2dd      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x1da>
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x1fc>
 80024e2:	bf00      	nop
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d074      	beq.n	80025da <HAL_RCC_OscConfig+0x2f2>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x21a>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d10e      	bne.n	800251a <HAL_RCC_OscConfig+0x232>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x232>
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d064      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d160      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 8002516:	2301      	movs	r3, #1
 8002518:	e2ba      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x24a>
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0b      	ldr	r2, [pc, #44]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e026      	b.n	8002580 <HAL_RCC_OscConfig+0x298>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800253a:	d115      	bne.n	8002568 <HAL_RCC_OscConfig+0x280>
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 8002542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a02      	ldr	r2, [pc, #8]	@ (8002558 <HAL_RCC_OscConfig+0x270>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x298>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	0800438c 	.word	0x0800438c
 8002560:	20000154 	.word	0x20000154
 8002564:	20000158 	.word	0x20000158
 8002568:	4ba0      	ldr	r3, [pc, #640]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a9f      	ldr	r2, [pc, #636]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b9d      	ldr	r3, [pc, #628]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a9c      	ldr	r2, [pc, #624]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
 8002588:	f7ff fa7e 	bl	8001a88 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x2ba>
 8002590:	f7ff fa7a 	bl	8001a88 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x2ba>
 800259e:	2303      	movs	r3, #3
 80025a0:	e276      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 80025a2:	4b92      	ldr	r3, [pc, #584]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x2a8>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x2f2>
 80025b0:	f7ff fa6a 	bl	8001a88 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x2e2>
 80025b8:	f7ff fa66 	bl	8001a88 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x2e2>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e262      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 80025ca:	4b88      	ldr	r3, [pc, #544]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2d0>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x2f2>
 80025d8:	bf00      	nop
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d060      	beq.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x310>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d119      	bne.n	8002626 <HAL_RCC_OscConfig+0x33e>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d116      	bne.n	8002626 <HAL_RCC_OscConfig+0x33e>
 80025f8:	4b7c      	ldr	r3, [pc, #496]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x328>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_OscConfig+0x328>
 800260c:	2301      	movs	r3, #1
 800260e:	e23f      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002610:	4b76      	ldr	r3, [pc, #472]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	4973      	ldr	r1, [pc, #460]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	e040      	b.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d023      	beq.n	8002676 <HAL_RCC_OscConfig+0x38e>
 800262e:	4b6f      	ldr	r3, [pc, #444]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6e      	ldr	r2, [pc, #440]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	f7ff fa25 	bl	8001a88 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x36c>
 8002642:	f7ff fa21 	bl	8001a88 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x36c>
 8002650:	2303      	movs	r3, #3
 8002652:	e21d      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002654:	4b65      	ldr	r3, [pc, #404]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x35a>
 8002660:	4b62      	ldr	r3, [pc, #392]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	495f      	ldr	r1, [pc, #380]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
 8002674:	e018      	b.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
 8002676:	4b5d      	ldr	r3, [pc, #372]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a5c      	ldr	r2, [pc, #368]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 800267c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	f7ff fa01 	bl	8001a88 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x3b4>
 800268a:	f7ff f9fd 	bl	8001a88 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x3b4>
 8002698:	2303      	movs	r3, #3
 800269a:	e1f9      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 800269c:	4b53      	ldr	r3, [pc, #332]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x3a2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d03c      	beq.n	800272e <HAL_RCC_OscConfig+0x446>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x40e>
 80026bc:	4b4b      	ldr	r3, [pc, #300]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c2:	4a4a      	ldr	r2, [pc, #296]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026cc:	f7ff f9dc 	bl	8001a88 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x3fe>
 80026d4:	f7ff f9d8 	bl	8001a88 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3fe>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1d4      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 80026e6:	4b41      	ldr	r3, [pc, #260]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80026e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <HAL_RCC_OscConfig+0x3ec>
 80026f4:	e01b      	b.n	800272e <HAL_RCC_OscConfig+0x446>
 80026f6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fc:	4a3b      	ldr	r2, [pc, #236]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002706:	f7ff f9bf 	bl	8001a88 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x438>
 800270e:	f7ff f9bb 	bl	8001a88 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x438>
 800271c:	2303      	movs	r3, #3
 800271e:	e1b7      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002720:	4b32      	ldr	r3, [pc, #200]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1ef      	bne.n	800270e <HAL_RCC_OscConfig+0x426>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80a6 	beq.w	8002888 <HAL_RCC_OscConfig+0x5a0>
 800273c:	2300      	movs	r3, #0
 800273e:	77fb      	strb	r3, [r7, #31]
 8002740:	4b2a      	ldr	r3, [pc, #168]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <HAL_RCC_OscConfig+0x480>
 800274c:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	4a26      	ldr	r2, [pc, #152]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 8002752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002756:	6593      	str	r3, [r2, #88]	@ 0x58
 8002758:	4b24      	ldr	r3, [pc, #144]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2301      	movs	r3, #1
 8002766:	77fb      	strb	r3, [r7, #31]
 8002768:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <HAL_RCC_OscConfig+0x508>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d118      	bne.n	80027a6 <HAL_RCC_OscConfig+0x4be>
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <HAL_RCC_OscConfig+0x508>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1d      	ldr	r2, [pc, #116]	@ (80027f0 <HAL_RCC_OscConfig+0x508>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	f7ff f982 	bl	8001a88 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x4b2>
 8002788:	f7ff f97e 	bl	8001a88 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x4b2>
 8002796:	2303      	movs	r3, #3
 8002798:	e17a      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 800279a:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <HAL_RCC_OscConfig+0x508>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x4a0>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d108      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4d8>
 80027ae:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027be:	e029      	b.n	8002814 <HAL_RCC_OscConfig+0x52c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d115      	bne.n	80027f4 <HAL_RCC_OscConfig+0x50c>
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a03      	ldr	r2, [pc, #12]	@ (80027ec <HAL_RCC_OscConfig+0x504>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e8:	e014      	b.n	8002814 <HAL_RCC_OscConfig+0x52c>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	4a9b      	ldr	r2, [pc, #620]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002804:	4b98      	ldr	r3, [pc, #608]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	4a97      	ldr	r2, [pc, #604]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d016      	beq.n	800284a <HAL_RCC_OscConfig+0x562>
 800281c:	f7ff f934 	bl	8001a88 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]
 8002822:	e00a      	b.n	800283a <HAL_RCC_OscConfig+0x552>
 8002824:	f7ff f930 	bl	8001a88 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x552>
 8002836:	2303      	movs	r3, #3
 8002838:	e12a      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 800283a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ed      	beq.n	8002824 <HAL_RCC_OscConfig+0x53c>
 8002848:	e015      	b.n	8002876 <HAL_RCC_OscConfig+0x58e>
 800284a:	f7ff f91d 	bl	8001a88 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x580>
 8002852:	f7ff f919 	bl	8001a88 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x580>
 8002864:	2303      	movs	r3, #3
 8002866:	e113      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002868:	4b7f      	ldr	r3, [pc, #508]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ed      	bne.n	8002852 <HAL_RCC_OscConfig+0x56a>
 8002876:	7ffb      	ldrb	r3, [r7, #31]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCC_OscConfig+0x5a0>
 800287c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	4a79      	ldr	r2, [pc, #484]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002886:	6593      	str	r3, [r2, #88]	@ 0x58
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80fe 	beq.w	8002a8e <HAL_RCC_OscConfig+0x7a6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	2b02      	cmp	r3, #2
 8002898:	f040 80d0 	bne.w	8002a3c <HAL_RCC_OscConfig+0x754>
 800289c:	4b72      	ldr	r3, [pc, #456]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d130      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	3b01      	subs	r3, #1
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	429a      	cmp	r2, r3
 80028c0:	d127      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d11f      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028dc:	2a07      	cmp	r2, #7
 80028de:	bf14      	ite	ne
 80028e0:	2201      	movne	r2, #1
 80028e2:	2200      	moveq	r2, #0
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d113      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	055b      	lsls	r3, r3, #21
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d109      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	3b01      	subs	r3, #1
 800290c:	065b      	lsls	r3, r3, #25
 800290e:	429a      	cmp	r2, r3
 8002910:	d06e      	beq.n	80029f0 <HAL_RCC_OscConfig+0x708>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d069      	beq.n	80029ec <HAL_RCC_OscConfig+0x704>
 8002918:	4b53      	ldr	r3, [pc, #332]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x648>
 8002924:	4b50      	ldr	r3, [pc, #320]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x64c>
 8002930:	2301      	movs	r3, #1
 8002932:	e0ad      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002934:	4b4c      	ldr	r3, [pc, #304]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a4b      	ldr	r2, [pc, #300]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800293a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	f7ff f8a2 	bl	8001a88 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x672>
 8002948:	f7ff f89e 	bl	8001a88 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x672>
 8002956:	2303      	movs	r3, #3
 8002958:	e09a      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 800295a:	4b43      	ldr	r3, [pc, #268]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x660>
 8002966:	4b40      	ldr	r3, [pc, #256]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x784>)
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002976:	3a01      	subs	r2, #1
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002980:	0212      	lsls	r2, r2, #8
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002988:	0852      	lsrs	r2, r2, #1
 800298a:	3a01      	subs	r2, #1
 800298c:	0552      	lsls	r2, r2, #21
 800298e:	4311      	orrs	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002994:	0852      	lsrs	r2, r2, #1
 8002996:	3a01      	subs	r2, #1
 8002998:	0652      	lsls	r2, r2, #25
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029a0:	0912      	lsrs	r2, r2, #4
 80029a2:	0452      	lsls	r2, r2, #17
 80029a4:	430a      	orrs	r2, r1
 80029a6:	4930      	ldr	r1, [pc, #192]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60cb      	str	r3, [r1, #12]
 80029ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c2:	60d3      	str	r3, [r2, #12]
 80029c4:	f7ff f860 	bl	8001a88 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x6f6>
 80029cc:	f7ff f85c 	bl	8001a88 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x6f6>
 80029da:	2303      	movs	r3, #3
 80029dc:	e058      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 80029de:	4b22      	ldr	r3, [pc, #136]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x6e4>
 80029ea:	e050      	b.n	8002a8e <HAL_RCC_OscConfig+0x7a6>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04f      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 80029f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d148      	bne.n	8002a8e <HAL_RCC_OscConfig+0x7a6>
 80029fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a16      	ldr	r2, [pc, #88]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a12:	60d3      	str	r3, [r2, #12]
 8002a14:	f7ff f838 	bl	8001a88 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x746>
 8002a1c:	f7ff f834 	bl	8001a88 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x746>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e030      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x734>
 8002a3a:	e028      	b.n	8002a8e <HAL_RCC_OscConfig+0x7a6>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d023      	beq.n	8002a8a <HAL_RCC_OscConfig+0x7a2>
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <HAL_RCC_OscConfig+0x780>)
 8002a48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	f7ff f81b 	bl	8001a88 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]
 8002a54:	e00c      	b.n	8002a70 <HAL_RCC_OscConfig+0x788>
 8002a56:	f7ff f817 	bl	8001a88 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d905      	bls.n	8002a70 <HAL_RCC_OscConfig+0x788>
 8002a64:	2303      	movs	r3, #3
 8002a66:	e013      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	f99d808c 	.word	0xf99d808c
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <HAL_RCC_OscConfig+0x7b0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ec      	bne.n	8002a56 <HAL_RCC_OscConfig+0x76e>
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_OscConfig+0x7b0>)
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	4905      	ldr	r1, [pc, #20]	@ (8002a98 <HAL_RCC_OscConfig+0x7b0>)
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_RCC_OscConfig+0x7b4>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
 8002a88:	e001      	b.n	8002a8e <HAL_RCC_OscConfig+0x7a6>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	feeefffc 	.word	0xfeeefffc

08002aa0 <HAL_RCC_ClockConfig>:
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0e7      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002ab4:	4b75      	ldr	r3, [pc, #468]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
 8002ac2:	4b72      	ldr	r3, [pc, #456]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	4970      	ldr	r1, [pc, #448]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
 8002ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0cf      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x72>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b66      	ldr	r3, [pc, #408]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d908      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x72>
 8002b00:	4b63      	ldr	r3, [pc, #396]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4960      	ldr	r1, [pc, #384]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d04c      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x118>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x96>
 8002b26:	4b5a      	ldr	r3, [pc, #360]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d121      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xd6>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0a6      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xae>
 8002b3e:	4b54      	ldr	r3, [pc, #336]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d115      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xd6>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e09a      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xc6>
 8002b56:	4b4e      	ldr	r3, [pc, #312]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xd6>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e08e      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xd6>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e086      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002b76:	4b46      	ldr	r3, [pc, #280]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4943      	ldr	r1, [pc, #268]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]
 8002b88:	f7fe ff7e 	bl	8001a88 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x106>
 8002b90:	f7fe ff7a 	bl	8001a88 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x106>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e06e      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 020c 	and.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1eb      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xf0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d010      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x146>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d208      	bcs.n	8002be6 <HAL_RCC_ClockConfig+0x146>
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	492b      	ldr	r1, [pc, #172]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
 8002be6:	4b29      	ldr	r3, [pc, #164]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d210      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x176>
 8002bf4:	4b25      	ldr	r3, [pc, #148]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 0207 	bic.w	r2, r3, #7
 8002bfc:	4923      	ldr	r1, [pc, #140]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <HAL_RCC_ClockConfig+0x1ec>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x176>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e036      	b.n	8002c84 <HAL_RCC_ClockConfig+0x1e4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x194>
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4918      	ldr	r1, [pc, #96]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x1b4>
 8002c40:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4910      	ldr	r1, [pc, #64]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
 8002c54:	f000 f824 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	490b      	ldr	r1, [pc, #44]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f4>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c70:	4a09      	ldr	r2, [pc, #36]	@ (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x1fc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe feb5 	bl	80019e8 <HAL_InitTick>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	72fb      	strb	r3, [r7, #11]
 8002c82:	7afb      	ldrb	r3, [r7, #11]
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40021000 	.word	0x40021000
 8002c94:	0800438c 	.word	0x0800438c
 8002c98:	20000154 	.word	0x20000154
 8002c9c:	20000158 	.word	0x20000158

08002ca0 <HAL_RCC_GetSysClockFreq>:
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	@ 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	4b3e      	ldr	r3, [pc, #248]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x72>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d11e      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x72>
 8002cd4:	4b34      	ldr	r3, [pc, #208]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x50>
 8002ce0:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e005      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x5c>
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d102      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x7e>
 8002d18:	4b25      	ldr	r3, [pc, #148]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e004      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0x88>
 8002d24:	4b23      	ldr	r3, [pc, #140]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d134      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0xf8>
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d003      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0xac>
 8002d44:	e005      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0xb2>
 8002d46:	4b1a      	ldr	r3, [pc, #104]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e005      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0xb8>
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e002      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0xb8>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	bf00      	nop
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	3301      	adds	r3, #1
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	fb03 f202 	mul.w	r2, r3, r2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	0e5b      	lsrs	r3, r3, #25
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	@ 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	0800439c 	.word	0x0800439c
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	007a1200 	.word	0x007a1200

08002db8 <RCC_SetFlashLatencyFromMSIRange>:
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8002dd0:	f7ff f9d0 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002dd4:	6178      	str	r0, [r7, #20]
 8002dd6:	e014      	b.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8002dd8:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	4a24      	ldr	r2, [pc, #144]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de4:	4b22      	ldr	r3, [pc, #136]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f7ff f9c0 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e08:	d10b      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	@ 0x80
 8002e0e:	d919      	bls.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e14:	d902      	bls.n	8002e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
 8002e16:	2302      	movs	r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e013      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e010      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b80      	cmp	r3, #128	@ 0x80
 8002e26:	d902      	bls.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
 8002e28:	2303      	movs	r3, #3
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	e00a      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d102      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x82>
 8002e34:	2302      	movs	r3, #2
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e004      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b70      	cmp	r3, #112	@ 0x70
 8002e3e:	d101      	bne.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002e40:	2301      	movs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 0207 	bic.w	r2, r3, #7
 8002e4c:	4909      	ldr	r1, [pc, #36]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <RCC_SetFlashLatencyFromMSIRange+0xae>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8002e66:	2300      	movs	r3, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40022000 	.word	0x40022000

08002e78 <HAL_SPI_Init>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_SPI_Init+0x12>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e095      	b.n	8002fb6 <HAL_SPI_Init+0x13e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_SPI_Init+0x2c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e9a:	d009      	beq.n	8002eb0 <HAL_SPI_Init+0x38>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
 8002ea2:	e005      	b.n	8002eb0 <HAL_SPI_Init+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_SPI_Init+0x58>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fc68 	bl	80017a0 <HAL_SPI_MspInit>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ef0:	d902      	bls.n	8002ef8 <HAL_SPI_Init+0x80>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e002      	b.n	8002efe <HAL_SPI_Init+0x86>
 8002ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f06:	d007      	beq.n	8002f18 <HAL_SPI_Init+0xa0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_Init+0xa0>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5a:	ea42 0103 	orr.w	r1, r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	f003 0204 	and.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	661a      	str	r2, [r3, #96]	@ 0x60
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SPI_Transmit>:
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b088      	sub	sp, #32
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_SPI_Transmit+0x22>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e15f      	b.n	80032a0 <HAL_SPI_Transmit+0x2e2>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002fe8:	f7fe fd4e 	bl	8001a88 <HAL_GetTick>
 8002fec:	61b8      	str	r0, [r7, #24]
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	82fb      	strh	r3, [r7, #22]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d002      	beq.n	8003004 <HAL_SPI_Transmit+0x46>
 8002ffe:	2302      	movs	r3, #2
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e148      	b.n	8003296 <HAL_SPI_Transmit+0x2d8>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_Transmit+0x52>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <HAL_SPI_Transmit+0x58>
 8003010:	2301      	movs	r3, #1
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e13f      	b.n	8003296 <HAL_SPI_Transmit+0x2d8>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	661a      	str	r2, [r3, #96]	@ 0x60
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	639a      	str	r2, [r3, #56]	@ 0x38
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	88fa      	ldrh	r2, [r7, #6]
 800302e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	651a      	str	r2, [r3, #80]	@ 0x50
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003060:	d10f      	bne.n	8003082 <HAL_SPI_Transmit+0xc4>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d007      	beq.n	80030a0 <HAL_SPI_Transmit+0xe2>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030a8:	d94f      	bls.n	800314a <HAL_SPI_Transmit+0x18c>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_SPI_Transmit+0xfa>
 80030b2:	8afb      	ldrh	r3, [r7, #22]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d142      	bne.n	800313e <HAL_SPI_Transmit+0x180>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030dc:	e02f      	b.n	800313e <HAL_SPI_Transmit+0x180>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d112      	bne.n	8003112 <HAL_SPI_Transmit+0x154>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	881a      	ldrh	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	@ 0x38
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003110:	e015      	b.n	800313e <HAL_SPI_Transmit+0x180>
 8003112:	f7fe fcb9 	bl	8001a88 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d803      	bhi.n	800312a <HAL_SPI_Transmit+0x16c>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003128:	d102      	bne.n	8003130 <HAL_SPI_Transmit+0x172>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_SPI_Transmit+0x180>
 8003130:	2303      	movs	r3, #3
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800313c:	e0ab      	b.n	8003296 <HAL_SPI_Transmit+0x2d8>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ca      	bne.n	80030de <HAL_SPI_Transmit+0x120>
 8003148:	e080      	b.n	800324c <HAL_SPI_Transmit+0x28e>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Transmit+0x19a>
 8003152:	8afb      	ldrh	r3, [r7, #22]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d174      	bne.n	8003242 <HAL_SPI_Transmit+0x284>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d912      	bls.n	8003188 <HAL_SPI_Transmit+0x1ca>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	1c9a      	adds	r2, r3, #2
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	639a      	str	r2, [r3, #56]	@ 0x38
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b02      	subs	r3, #2
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003186:	e05c      	b.n	8003242 <HAL_SPI_Transmit+0x284>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	330c      	adds	r3, #12
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	@ 0x38
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ae:	e048      	b.n	8003242 <HAL_SPI_Transmit+0x284>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d12b      	bne.n	8003216 <HAL_SPI_Transmit+0x258>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d912      	bls.n	80031ee <HAL_SPI_Transmit+0x230>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	1c9a      	adds	r2, r3, #2
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b02      	subs	r3, #2
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ec:	e029      	b.n	8003242 <HAL_SPI_Transmit+0x284>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	639a      	str	r2, [r3, #56]	@ 0x38
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003214:	e015      	b.n	8003242 <HAL_SPI_Transmit+0x284>
 8003216:	f7fe fc37 	bl	8001a88 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d803      	bhi.n	800322e <HAL_SPI_Transmit+0x270>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800322c:	d102      	bne.n	8003234 <HAL_SPI_Transmit+0x276>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <HAL_SPI_Transmit+0x284>
 8003234:	2303      	movs	r3, #3
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003240:	e029      	b.n	8003296 <HAL_SPI_Transmit+0x2d8>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1b1      	bne.n	80031b0 <HAL_SPI_Transmit+0x1f2>
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	6839      	ldr	r1, [r7, #0]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fb69 	bl	8003928 <SPI_EndRxTxTransaction>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_SPI_Transmit+0x2a4>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	661a      	str	r2, [r3, #96]	@ 0x60
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_SPI_Transmit+0x2c2>
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_SPI_Transmit+0x2d0>
 8003288:	2301      	movs	r3, #1
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e003      	b.n	8003296 <HAL_SPI_Transmit+0x2d8>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800329e:	7ffb      	ldrb	r3, [r7, #31]
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_SPI_TransmitReceive>:
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	807b      	strh	r3, [r7, #2]
 80032b6:	2301      	movs	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ba:	2300      	movs	r3, #0
 80032bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e20a      	b.n	80036e4 <HAL_SPI_TransmitReceive+0x43c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80032d6:	f7fe fbd7 	bl	8001a88 <HAL_GetTick>
 80032da:	61f8      	str	r0, [r7, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032e2:	76fb      	strb	r3, [r7, #27]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	827b      	strh	r3, [r7, #18]
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	823b      	strh	r3, [r7, #16]
 80032f2:	7efb      	ldrb	r3, [r7, #27]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d00e      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x6e>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032fe:	d106      	bne.n	800330e <HAL_SPI_TransmitReceive+0x66>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_SPI_TransmitReceive+0x66>
 8003308:	7efb      	ldrb	r3, [r7, #27]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x6e>
 800330e:	2302      	movs	r3, #2
 8003310:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003314:	e1e0      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x430>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x80>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x80>
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x88>
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332e:	e1d3      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x430>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b04      	cmp	r3, #4
 800333a:	d003      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x9c>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2205      	movs	r2, #5
 8003340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	661a      	str	r2, [r3, #96]	@ 0x60
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	639a      	str	r2, [r3, #56]	@ 0x38
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	651a      	str	r2, [r3, #80]	@ 0x50
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003386:	d802      	bhi.n	800338e <HAL_SPI_TransmitReceive+0xe6>
 8003388:	8a3b      	ldrh	r3, [r7, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d908      	bls.n	80033a0 <HAL_SPI_TransmitReceive+0xf8>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	e007      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x108>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b40      	cmp	r3, #64	@ 0x40
 80033bc:	d007      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x126>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033d6:	f240 8081 	bls.w	80034dc <HAL_SPI_TransmitReceive+0x234>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x140>
 80033e2:	8a7b      	ldrh	r3, [r7, #18]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d16d      	bne.n	80034c4 <HAL_SPI_TransmitReceive+0x21c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60da      	str	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800340c:	e05a      	b.n	80034c4 <HAL_SPI_TransmitReceive+0x21c>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d11b      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x1ac>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x1ac>
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	2b01      	cmp	r3, #1
 800342a:	d113      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x1ac>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	@ 0x38
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003450:	2300      	movs	r3, #0
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d11c      	bne.n	800349c <HAL_SPI_TransmitReceive+0x1f4>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_SPI_TransmitReceive+0x1f4>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	b292      	uxth	r2, r2
 800347a:	801a      	strh	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003498:	2301      	movs	r3, #1
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
 800349c:	f7fe faf4 	bl	8001a88 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d80b      	bhi.n	80034c4 <HAL_SPI_TransmitReceive+0x21c>
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b2:	d007      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0x21c>
 80034b4:	2303      	movs	r3, #3
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80034c2:	e109      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x430>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d19f      	bne.n	800340e <HAL_SPI_TransmitReceive+0x166>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d199      	bne.n	800340e <HAL_SPI_TransmitReceive+0x166>
 80034da:	e0e3      	b.n	80036a4 <HAL_SPI_TransmitReceive+0x3fc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x244>
 80034e4:	8a7b      	ldrh	r3, [r7, #18]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 80cf 	bne.w	800368a <HAL_SPI_TransmitReceive+0x3e2>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d912      	bls.n	800351c <HAL_SPI_TransmitReceive+0x274>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fa:	881a      	ldrh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003506:	1c9a      	adds	r2, r3, #2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	@ 0x38
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b02      	subs	r3, #2
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800351a:	e0b6      	b.n	800368a <HAL_SPI_TransmitReceive+0x3e2>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003542:	e0a2      	b.n	800368a <HAL_SPI_TransmitReceive+0x3e2>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d134      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x314>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02f      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x314>
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	2b01      	cmp	r3, #1
 8003560:	d12c      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x314>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d912      	bls.n	8003592 <HAL_SPI_TransmitReceive+0x2ea>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	881a      	ldrh	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60da      	str	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357c:	1c9a      	adds	r2, r3, #2
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	639a      	str	r2, [r3, #56]	@ 0x38
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b02      	subs	r3, #2
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003590:	e012      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x310>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d148      	bne.n	800365c <HAL_SPI_TransmitReceive+0x3b4>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d042      	beq.n	800365c <HAL_SPI_TransmitReceive+0x3b4>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d923      	bls.n	800362a <HAL_SPI_TransmitReceive+0x382>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	b292      	uxth	r2, r2
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b02      	subs	r3, #2
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d81f      	bhi.n	8003658 <HAL_SPI_TransmitReceive+0x3b0>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	e016      	b.n	8003658 <HAL_SPI_TransmitReceive+0x3b0>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f103 020c 	add.w	r2, r3, #12
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003658:	2301      	movs	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
 800365c:	f7fe fa14 	bl	8001a88 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003668:	429a      	cmp	r2, r3
 800366a:	d803      	bhi.n	8003674 <HAL_SPI_TransmitReceive+0x3cc>
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003672:	d102      	bne.n	800367a <HAL_SPI_TransmitReceive+0x3d2>
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_SPI_TransmitReceive+0x3e2>
 800367a:	2303      	movs	r3, #3
 800367c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003688:	e026      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x430>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	f47f af57 	bne.w	8003544 <HAL_SPI_TransmitReceive+0x29c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f47f af50 	bne.w	8003544 <HAL_SPI_TransmitReceive+0x29c>
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f93d 	bl	8003928 <SPI_EndRxTxTransaction>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x418>
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	661a      	str	r2, [r3, #96]	@ 0x60
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x428>
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ce:	e003      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x430>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80036e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036e4:	4618      	mov	r0, r3
 80036e6:	3728      	adds	r7, #40	@ 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <SPI_WaitFlagStateUntilTimeout>:
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]
 80036fc:	f7fe f9c4 	bl	8001a88 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	4413      	add	r3, r2
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	f7fe f9bc 	bl	8001a88 <HAL_GetTick>
 8003710:	61b8      	str	r0, [r7, #24]
 8003712:	4b39      	ldr	r3, [pc, #228]	@ (80037f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	015b      	lsls	r3, r3, #5
 8003718:	0d1b      	lsrs	r3, r3, #20
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e054      	b.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800372a:	d050      	beq.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xe2>
 800372c:	f7fe f9ac 	bl	8001a88 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	429a      	cmp	r2, r3
 800373a:	d902      	bls.n	8003742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d13d      	bne.n	80037be <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800375a:	d111      	bne.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003764:	d004      	beq.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x84>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800376e:	d107      	bne.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003788:	d10f      	bne.n	80037aa <SPI_WaitFlagStateUntilTimeout+0xbe>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80037ba:	2303      	movs	r3, #3
 80037bc:	e017      	b.n	80037ee <SPI_WaitFlagStateUntilTimeout+0x102>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d19b      	bne.n	8003724 <SPI_WaitFlagStateUntilTimeout+0x38>
 80037ec:	2300      	movs	r3, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000154 	.word	0x20000154

080037fc <SPI_WaitFifoStateUntilTimeout>:
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	75fb      	strb	r3, [r7, #23]
 800380e:	f7fe f93b 	bl	8001a88 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4413      	add	r3, r2
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
 800381e:	f7fe f933 	bl	8001a88 <HAL_GetTick>
 8003822:	6238      	str	r0, [r7, #32]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	00da      	lsls	r2, r3, #3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	0d1b      	lsrs	r3, r3, #20
 800383c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e060      	b.n	8003908 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800384c:	d107      	bne.n	800385e <SPI_WaitFifoStateUntilTimeout+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	75fb      	strb	r3, [r7, #23]
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003864:	d050      	beq.n	8003908 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003866:	f7fe f90f 	bl	8001a88 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003872:	429a      	cmp	r2, r3
 8003874:	d902      	bls.n	800387c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d13d      	bne.n	80038f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003894:	d111      	bne.n	80038ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389e:	d004      	beq.n	80038aa <SPI_WaitFifoStateUntilTimeout+0xae>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a8:	d107      	bne.n	80038ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c2:	d10f      	bne.n	80038e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80038f4:	2303      	movs	r3, #3
 80038f6:	e010      	b.n	800391a <SPI_WaitFifoStateUntilTimeout+0x11e>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <SPI_WaitFifoStateUntilTimeout+0x106>
 80038fe:	2300      	movs	r3, #0
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	3b01      	subs	r3, #1
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	d196      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003918:	2300      	movs	r3, #0
 800391a:	4618      	mov	r0, r3
 800391c:	3728      	adds	r7, #40	@ 0x28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000154 	.word	0x20000154

08003928 <SPI_EndRxTxTransaction>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff5b 	bl	80037fc <SPI_WaitFifoStateUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <SPI_EndRxTxTransaction+0x34>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	661a      	str	r2, [r3, #96]	@ 0x60
 8003958:	2303      	movs	r3, #3
 800395a:	e027      	b.n	80039ac <SPI_EndRxTxTransaction+0x84>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2200      	movs	r2, #0
 8003964:	2180      	movs	r1, #128	@ 0x80
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fec0 	bl	80036ec <SPI_WaitFlagStateUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <SPI_EndRxTxTransaction+0x5a>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	661a      	str	r2, [r3, #96]	@ 0x60
 800397e:	2303      	movs	r3, #3
 8003980:	e014      	b.n	80039ac <SPI_EndRxTxTransaction+0x84>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2200      	movs	r2, #0
 800398a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff ff34 	bl	80037fc <SPI_WaitFifoStateUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <SPI_EndRxTxTransaction+0x82>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80039a6:	2303      	movs	r3, #3
 80039a8:	e000      	b.n	80039ac <SPI_EndRxTxTransaction+0x84>
 80039aa:	2300      	movs	r3, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <malloc>:
 80039b4:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <malloc+0xc>)
 80039b6:	4601      	mov	r1, r0
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	f000 b82d 	b.w	8003a18 <_malloc_r>
 80039be:	bf00      	nop
 80039c0:	20000160 	.word	0x20000160

080039c4 <free>:
 80039c4:	4b02      	ldr	r3, [pc, #8]	@ (80039d0 <free+0xc>)
 80039c6:	4601      	mov	r1, r0
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f000 b937 	b.w	8003c3c <_free_r>
 80039ce:	bf00      	nop
 80039d0:	20000160 	.word	0x20000160

080039d4 <sbrk_aligned>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003a14 <sbrk_aligned+0x40>)
 80039d8:	460c      	mov	r4, r1
 80039da:	6831      	ldr	r1, [r6, #0]
 80039dc:	4605      	mov	r5, r0
 80039de:	b911      	cbnz	r1, 80039e6 <sbrk_aligned+0x12>
 80039e0:	f000 f8e2 	bl	8003ba8 <_sbrk_r>
 80039e4:	6030      	str	r0, [r6, #0]
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 f8dd 	bl	8003ba8 <_sbrk_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d103      	bne.n	80039fa <sbrk_aligned+0x26>
 80039f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80039f6:	4620      	mov	r0, r4
 80039f8:	bd70      	pop	{r4, r5, r6, pc}
 80039fa:	1cc4      	adds	r4, r0, #3
 80039fc:	f024 0403 	bic.w	r4, r4, #3
 8003a00:	42a0      	cmp	r0, r4
 8003a02:	d0f8      	beq.n	80039f6 <sbrk_aligned+0x22>
 8003a04:	1a21      	subs	r1, r4, r0
 8003a06:	4628      	mov	r0, r5
 8003a08:	f000 f8ce 	bl	8003ba8 <_sbrk_r>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d1f2      	bne.n	80039f6 <sbrk_aligned+0x22>
 8003a10:	e7ef      	b.n	80039f2 <sbrk_aligned+0x1e>
 8003a12:	bf00      	nop
 8003a14:	20000360 	.word	0x20000360

08003a18 <_malloc_r>:
 8003a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a1c:	1ccd      	adds	r5, r1, #3
 8003a1e:	f025 0503 	bic.w	r5, r5, #3
 8003a22:	3508      	adds	r5, #8
 8003a24:	2d0c      	cmp	r5, #12
 8003a26:	bf38      	it	cc
 8003a28:	250c      	movcc	r5, #12
 8003a2a:	2d00      	cmp	r5, #0
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	db01      	blt.n	8003a34 <_malloc_r+0x1c>
 8003a30:	42a9      	cmp	r1, r5
 8003a32:	d904      	bls.n	8003a3e <_malloc_r+0x26>
 8003a34:	230c      	movs	r3, #12
 8003a36:	6033      	str	r3, [r6, #0]
 8003a38:	2000      	movs	r0, #0
 8003a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b14 <_malloc_r+0xfc>
 8003a42:	f000 f89d 	bl	8003b80 <__malloc_lock>
 8003a46:	f8d8 3000 	ldr.w	r3, [r8]
 8003a4a:	461c      	mov	r4, r3
 8003a4c:	bb44      	cbnz	r4, 8003aa0 <_malloc_r+0x88>
 8003a4e:	4629      	mov	r1, r5
 8003a50:	4630      	mov	r0, r6
 8003a52:	f7ff ffbf 	bl	80039d4 <sbrk_aligned>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	4604      	mov	r4, r0
 8003a5a:	d158      	bne.n	8003b0e <_malloc_r+0xf6>
 8003a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a60:	4627      	mov	r7, r4
 8003a62:	2f00      	cmp	r7, #0
 8003a64:	d143      	bne.n	8003aee <_malloc_r+0xd6>
 8003a66:	2c00      	cmp	r4, #0
 8003a68:	d04b      	beq.n	8003b02 <_malloc_r+0xea>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	eb04 0903 	add.w	r9, r4, r3
 8003a74:	f000 f898 	bl	8003ba8 <_sbrk_r>
 8003a78:	4581      	cmp	r9, r0
 8003a7a:	d142      	bne.n	8003b02 <_malloc_r+0xea>
 8003a7c:	6821      	ldr	r1, [r4, #0]
 8003a7e:	1a6d      	subs	r5, r5, r1
 8003a80:	4629      	mov	r1, r5
 8003a82:	4630      	mov	r0, r6
 8003a84:	f7ff ffa6 	bl	80039d4 <sbrk_aligned>
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d03a      	beq.n	8003b02 <_malloc_r+0xea>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	442b      	add	r3, r5
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	f8d8 3000 	ldr.w	r3, [r8]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	bb62      	cbnz	r2, 8003af4 <_malloc_r+0xdc>
 8003a9a:	f8c8 7000 	str.w	r7, [r8]
 8003a9e:	e00f      	b.n	8003ac0 <_malloc_r+0xa8>
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	1b52      	subs	r2, r2, r5
 8003aa4:	d420      	bmi.n	8003ae8 <_malloc_r+0xd0>
 8003aa6:	2a0b      	cmp	r2, #11
 8003aa8:	d917      	bls.n	8003ada <_malloc_r+0xc2>
 8003aaa:	1961      	adds	r1, r4, r5
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	6025      	str	r5, [r4, #0]
 8003ab0:	bf18      	it	ne
 8003ab2:	6059      	strne	r1, [r3, #4]
 8003ab4:	6863      	ldr	r3, [r4, #4]
 8003ab6:	bf08      	it	eq
 8003ab8:	f8c8 1000 	streq.w	r1, [r8]
 8003abc:	5162      	str	r2, [r4, r5]
 8003abe:	604b      	str	r3, [r1, #4]
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f000 f863 	bl	8003b8c <__malloc_unlock>
 8003ac6:	f104 000b 	add.w	r0, r4, #11
 8003aca:	1d23      	adds	r3, r4, #4
 8003acc:	f020 0007 	bic.w	r0, r0, #7
 8003ad0:	1ac2      	subs	r2, r0, r3
 8003ad2:	bf1c      	itt	ne
 8003ad4:	1a1b      	subne	r3, r3, r0
 8003ad6:	50a3      	strne	r3, [r4, r2]
 8003ad8:	e7af      	b.n	8003a3a <_malloc_r+0x22>
 8003ada:	6862      	ldr	r2, [r4, #4]
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	bf0c      	ite	eq
 8003ae0:	f8c8 2000 	streq.w	r2, [r8]
 8003ae4:	605a      	strne	r2, [r3, #4]
 8003ae6:	e7eb      	b.n	8003ac0 <_malloc_r+0xa8>
 8003ae8:	4623      	mov	r3, r4
 8003aea:	6864      	ldr	r4, [r4, #4]
 8003aec:	e7ae      	b.n	8003a4c <_malloc_r+0x34>
 8003aee:	463c      	mov	r4, r7
 8003af0:	687f      	ldr	r7, [r7, #4]
 8003af2:	e7b6      	b.n	8003a62 <_malloc_r+0x4a>
 8003af4:	461a      	mov	r2, r3
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	d1fb      	bne.n	8003af4 <_malloc_r+0xdc>
 8003afc:	2300      	movs	r3, #0
 8003afe:	6053      	str	r3, [r2, #4]
 8003b00:	e7de      	b.n	8003ac0 <_malloc_r+0xa8>
 8003b02:	230c      	movs	r3, #12
 8003b04:	6033      	str	r3, [r6, #0]
 8003b06:	4630      	mov	r0, r6
 8003b08:	f000 f840 	bl	8003b8c <__malloc_unlock>
 8003b0c:	e794      	b.n	8003a38 <_malloc_r+0x20>
 8003b0e:	6005      	str	r5, [r0, #0]
 8003b10:	e7d6      	b.n	8003ac0 <_malloc_r+0xa8>
 8003b12:	bf00      	nop
 8003b14:	20000364 	.word	0x20000364

08003b18 <sniprintf>:
 8003b18:	b40c      	push	{r2, r3}
 8003b1a:	b530      	push	{r4, r5, lr}
 8003b1c:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <sniprintf+0x64>)
 8003b1e:	1e0c      	subs	r4, r1, #0
 8003b20:	681d      	ldr	r5, [r3, #0]
 8003b22:	b09d      	sub	sp, #116	@ 0x74
 8003b24:	da08      	bge.n	8003b38 <sniprintf+0x20>
 8003b26:	238b      	movs	r3, #139	@ 0x8b
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b2e:	b01d      	add	sp, #116	@ 0x74
 8003b30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b34:	b002      	add	sp, #8
 8003b36:	4770      	bx	lr
 8003b38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b40:	bf14      	ite	ne
 8003b42:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003b46:	4623      	moveq	r3, r4
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	9307      	str	r3, [sp, #28]
 8003b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b50:	9002      	str	r0, [sp, #8]
 8003b52:	9006      	str	r0, [sp, #24]
 8003b54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b5a:	ab21      	add	r3, sp, #132	@ 0x84
 8003b5c:	a902      	add	r1, sp, #8
 8003b5e:	4628      	mov	r0, r5
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	f000 f911 	bl	8003d88 <_svfiprintf_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	bfbc      	itt	lt
 8003b6a:	238b      	movlt	r3, #139	@ 0x8b
 8003b6c:	602b      	strlt	r3, [r5, #0]
 8003b6e:	2c00      	cmp	r4, #0
 8003b70:	d0dd      	beq.n	8003b2e <sniprintf+0x16>
 8003b72:	9b02      	ldr	r3, [sp, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e7d9      	b.n	8003b2e <sniprintf+0x16>
 8003b7a:	bf00      	nop
 8003b7c:	20000160 	.word	0x20000160

08003b80 <__malloc_lock>:
 8003b80:	4801      	ldr	r0, [pc, #4]	@ (8003b88 <__malloc_lock+0x8>)
 8003b82:	f000 b84b 	b.w	8003c1c <__retarget_lock_acquire_recursive>
 8003b86:	bf00      	nop
 8003b88:	200004a0 	.word	0x200004a0

08003b8c <__malloc_unlock>:
 8003b8c:	4801      	ldr	r0, [pc, #4]	@ (8003b94 <__malloc_unlock+0x8>)
 8003b8e:	f000 b846 	b.w	8003c1e <__retarget_lock_release_recursive>
 8003b92:	bf00      	nop
 8003b94:	200004a0 	.word	0x200004a0

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <_sbrk_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d06      	ldr	r5, [pc, #24]	@ (8003bc4 <_sbrk_r+0x1c>)
 8003bac:	2300      	movs	r3, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f7fd fe74 	bl	80018a0 <_sbrk>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_sbrk_r+0x1a>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_sbrk_r+0x1a>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	200004a4 	.word	0x200004a4

08003bc8 <__errno>:
 8003bc8:	4b01      	ldr	r3, [pc, #4]	@ (8003bd0 <__errno+0x8>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000160 	.word	0x20000160

08003bd4 <__libc_init_array>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003c0c <__libc_init_array+0x38>)
 8003bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003c10 <__libc_init_array+0x3c>)
 8003bda:	1b64      	subs	r4, r4, r5
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	2600      	movs	r6, #0
 8003be0:	42a6      	cmp	r6, r4
 8003be2:	d109      	bne.n	8003bf8 <__libc_init_array+0x24>
 8003be4:	4d0b      	ldr	r5, [pc, #44]	@ (8003c14 <__libc_init_array+0x40>)
 8003be6:	4c0c      	ldr	r4, [pc, #48]	@ (8003c18 <__libc_init_array+0x44>)
 8003be8:	f000 fba8 	bl	800433c <_init>
 8003bec:	1b64      	subs	r4, r4, r5
 8003bee:	10a4      	asrs	r4, r4, #2
 8003bf0:	2600      	movs	r6, #0
 8003bf2:	42a6      	cmp	r6, r4
 8003bf4:	d105      	bne.n	8003c02 <__libc_init_array+0x2e>
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfc:	4798      	blx	r3
 8003bfe:	3601      	adds	r6, #1
 8003c00:	e7ee      	b.n	8003be0 <__libc_init_array+0xc>
 8003c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c06:	4798      	blx	r3
 8003c08:	3601      	adds	r6, #1
 8003c0a:	e7f2      	b.n	8003bf2 <__libc_init_array+0x1e>
 8003c0c:	08004408 	.word	0x08004408
 8003c10:	08004408 	.word	0x08004408
 8003c14:	08004408 	.word	0x08004408
 8003c18:	0800440c 	.word	0x0800440c

08003c1c <__retarget_lock_acquire_recursive>:
 8003c1c:	4770      	bx	lr

08003c1e <__retarget_lock_release_recursive>:
 8003c1e:	4770      	bx	lr

08003c20 <memcpy>:
 8003c20:	440a      	add	r2, r1
 8003c22:	4291      	cmp	r1, r2
 8003c24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003c28:	d100      	bne.n	8003c2c <memcpy+0xc>
 8003c2a:	4770      	bx	lr
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c36:	4291      	cmp	r1, r2
 8003c38:	d1f9      	bne.n	8003c2e <memcpy+0xe>
 8003c3a:	bd10      	pop	{r4, pc}

08003c3c <_free_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4605      	mov	r5, r0
 8003c40:	2900      	cmp	r1, #0
 8003c42:	d041      	beq.n	8003cc8 <_free_r+0x8c>
 8003c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c48:	1f0c      	subs	r4, r1, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bfb8      	it	lt
 8003c4e:	18e4      	addlt	r4, r4, r3
 8003c50:	f7ff ff96 	bl	8003b80 <__malloc_lock>
 8003c54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ccc <_free_r+0x90>)
 8003c56:	6813      	ldr	r3, [r2, #0]
 8003c58:	b933      	cbnz	r3, 8003c68 <_free_r+0x2c>
 8003c5a:	6063      	str	r3, [r4, #4]
 8003c5c:	6014      	str	r4, [r2, #0]
 8003c5e:	4628      	mov	r0, r5
 8003c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c64:	f7ff bf92 	b.w	8003b8c <__malloc_unlock>
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	d908      	bls.n	8003c7e <_free_r+0x42>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	1821      	adds	r1, r4, r0
 8003c70:	428b      	cmp	r3, r1
 8003c72:	bf01      	itttt	eq
 8003c74:	6819      	ldreq	r1, [r3, #0]
 8003c76:	685b      	ldreq	r3, [r3, #4]
 8003c78:	1809      	addeq	r1, r1, r0
 8003c7a:	6021      	streq	r1, [r4, #0]
 8003c7c:	e7ed      	b.n	8003c5a <_free_r+0x1e>
 8003c7e:	461a      	mov	r2, r3
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b10b      	cbz	r3, 8003c88 <_free_r+0x4c>
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d9fa      	bls.n	8003c7e <_free_r+0x42>
 8003c88:	6811      	ldr	r1, [r2, #0]
 8003c8a:	1850      	adds	r0, r2, r1
 8003c8c:	42a0      	cmp	r0, r4
 8003c8e:	d10b      	bne.n	8003ca8 <_free_r+0x6c>
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	4401      	add	r1, r0
 8003c94:	1850      	adds	r0, r2, r1
 8003c96:	4283      	cmp	r3, r0
 8003c98:	6011      	str	r1, [r2, #0]
 8003c9a:	d1e0      	bne.n	8003c5e <_free_r+0x22>
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	6053      	str	r3, [r2, #4]
 8003ca2:	4408      	add	r0, r1
 8003ca4:	6010      	str	r0, [r2, #0]
 8003ca6:	e7da      	b.n	8003c5e <_free_r+0x22>
 8003ca8:	d902      	bls.n	8003cb0 <_free_r+0x74>
 8003caa:	230c      	movs	r3, #12
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	e7d6      	b.n	8003c5e <_free_r+0x22>
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	1821      	adds	r1, r4, r0
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	bf04      	itt	eq
 8003cb8:	6819      	ldreq	r1, [r3, #0]
 8003cba:	685b      	ldreq	r3, [r3, #4]
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	bf04      	itt	eq
 8003cc0:	1809      	addeq	r1, r1, r0
 8003cc2:	6021      	streq	r1, [r4, #0]
 8003cc4:	6054      	str	r4, [r2, #4]
 8003cc6:	e7ca      	b.n	8003c5e <_free_r+0x22>
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000364 	.word	0x20000364

08003cd0 <__ssputs_r>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	688e      	ldr	r6, [r1, #8]
 8003cd6:	461f      	mov	r7, r3
 8003cd8:	42be      	cmp	r6, r7
 8003cda:	680b      	ldr	r3, [r1, #0]
 8003cdc:	4682      	mov	sl, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	4690      	mov	r8, r2
 8003ce2:	d82d      	bhi.n	8003d40 <__ssputs_r+0x70>
 8003ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ce8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cec:	d026      	beq.n	8003d3c <__ssputs_r+0x6c>
 8003cee:	6965      	ldr	r5, [r4, #20]
 8003cf0:	6909      	ldr	r1, [r1, #16]
 8003cf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cf6:	eba3 0901 	sub.w	r9, r3, r1
 8003cfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cfe:	1c7b      	adds	r3, r7, #1
 8003d00:	444b      	add	r3, r9
 8003d02:	106d      	asrs	r5, r5, #1
 8003d04:	429d      	cmp	r5, r3
 8003d06:	bf38      	it	cc
 8003d08:	461d      	movcc	r5, r3
 8003d0a:	0553      	lsls	r3, r2, #21
 8003d0c:	d527      	bpl.n	8003d5e <__ssputs_r+0x8e>
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7ff fe82 	bl	8003a18 <_malloc_r>
 8003d14:	4606      	mov	r6, r0
 8003d16:	b360      	cbz	r0, 8003d72 <__ssputs_r+0xa2>
 8003d18:	6921      	ldr	r1, [r4, #16]
 8003d1a:	464a      	mov	r2, r9
 8003d1c:	f7ff ff80 	bl	8003c20 <memcpy>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	6126      	str	r6, [r4, #16]
 8003d2e:	6165      	str	r5, [r4, #20]
 8003d30:	444e      	add	r6, r9
 8003d32:	eba5 0509 	sub.w	r5, r5, r9
 8003d36:	6026      	str	r6, [r4, #0]
 8003d38:	60a5      	str	r5, [r4, #8]
 8003d3a:	463e      	mov	r6, r7
 8003d3c:	42be      	cmp	r6, r7
 8003d3e:	d900      	bls.n	8003d42 <__ssputs_r+0x72>
 8003d40:	463e      	mov	r6, r7
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	4632      	mov	r2, r6
 8003d46:	4641      	mov	r1, r8
 8003d48:	f000 fad6 	bl	80042f8 <memmove>
 8003d4c:	68a3      	ldr	r3, [r4, #8]
 8003d4e:	1b9b      	subs	r3, r3, r6
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	4433      	add	r3, r6
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5e:	462a      	mov	r2, r5
 8003d60:	f000 fa9c 	bl	800429c <_realloc_r>
 8003d64:	4606      	mov	r6, r0
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d1e0      	bne.n	8003d2c <__ssputs_r+0x5c>
 8003d6a:	6921      	ldr	r1, [r4, #16]
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	f7ff ff65 	bl	8003c3c <_free_r>
 8003d72:	230c      	movs	r3, #12
 8003d74:	f8ca 3000 	str.w	r3, [sl]
 8003d78:	89a3      	ldrh	r3, [r4, #12]
 8003d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d7e:	81a3      	strh	r3, [r4, #12]
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d84:	e7e9      	b.n	8003d5a <__ssputs_r+0x8a>
	...

08003d88 <_svfiprintf_r>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	4698      	mov	r8, r3
 8003d8e:	898b      	ldrh	r3, [r1, #12]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	b09d      	sub	sp, #116	@ 0x74
 8003d94:	4607      	mov	r7, r0
 8003d96:	460d      	mov	r5, r1
 8003d98:	4614      	mov	r4, r2
 8003d9a:	d510      	bpl.n	8003dbe <_svfiprintf_r+0x36>
 8003d9c:	690b      	ldr	r3, [r1, #16]
 8003d9e:	b973      	cbnz	r3, 8003dbe <_svfiprintf_r+0x36>
 8003da0:	2140      	movs	r1, #64	@ 0x40
 8003da2:	f7ff fe39 	bl	8003a18 <_malloc_r>
 8003da6:	6028      	str	r0, [r5, #0]
 8003da8:	6128      	str	r0, [r5, #16]
 8003daa:	b930      	cbnz	r0, 8003dba <_svfiprintf_r+0x32>
 8003dac:	230c      	movs	r3, #12
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003db4:	b01d      	add	sp, #116	@ 0x74
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	2340      	movs	r3, #64	@ 0x40
 8003dbc:	616b      	str	r3, [r5, #20]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dcc:	2330      	movs	r3, #48	@ 0x30
 8003dce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f6c <_svfiprintf_r+0x1e4>
 8003dd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dd6:	f04f 0901 	mov.w	r9, #1
 8003dda:	4623      	mov	r3, r4
 8003ddc:	469a      	mov	sl, r3
 8003dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003de2:	b10a      	cbz	r2, 8003de8 <_svfiprintf_r+0x60>
 8003de4:	2a25      	cmp	r2, #37	@ 0x25
 8003de6:	d1f9      	bne.n	8003ddc <_svfiprintf_r+0x54>
 8003de8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dec:	d00b      	beq.n	8003e06 <_svfiprintf_r+0x7e>
 8003dee:	465b      	mov	r3, fp
 8003df0:	4622      	mov	r2, r4
 8003df2:	4629      	mov	r1, r5
 8003df4:	4638      	mov	r0, r7
 8003df6:	f7ff ff6b 	bl	8003cd0 <__ssputs_r>
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	f000 80a7 	beq.w	8003f4e <_svfiprintf_r+0x1c6>
 8003e00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e02:	445a      	add	r2, fp
 8003e04:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e06:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 809f 	beq.w	8003f4e <_svfiprintf_r+0x1c6>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e1a:	f10a 0a01 	add.w	sl, sl, #1
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	9307      	str	r3, [sp, #28]
 8003e22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e26:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e28:	4654      	mov	r4, sl
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e30:	484e      	ldr	r0, [pc, #312]	@ (8003f6c <_svfiprintf_r+0x1e4>)
 8003e32:	f7fc f9d5 	bl	80001e0 <memchr>
 8003e36:	9a04      	ldr	r2, [sp, #16]
 8003e38:	b9d8      	cbnz	r0, 8003e72 <_svfiprintf_r+0xea>
 8003e3a:	06d0      	lsls	r0, r2, #27
 8003e3c:	bf44      	itt	mi
 8003e3e:	2320      	movmi	r3, #32
 8003e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e44:	0711      	lsls	r1, r2, #28
 8003e46:	bf44      	itt	mi
 8003e48:	232b      	movmi	r3, #43	@ 0x2b
 8003e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e54:	d015      	beq.n	8003e82 <_svfiprintf_r+0xfa>
 8003e56:	9a07      	ldr	r2, [sp, #28]
 8003e58:	4654      	mov	r4, sl
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f04f 0c0a 	mov.w	ip, #10
 8003e60:	4621      	mov	r1, r4
 8003e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e66:	3b30      	subs	r3, #48	@ 0x30
 8003e68:	2b09      	cmp	r3, #9
 8003e6a:	d94b      	bls.n	8003f04 <_svfiprintf_r+0x17c>
 8003e6c:	b1b0      	cbz	r0, 8003e9c <_svfiprintf_r+0x114>
 8003e6e:	9207      	str	r2, [sp, #28]
 8003e70:	e014      	b.n	8003e9c <_svfiprintf_r+0x114>
 8003e72:	eba0 0308 	sub.w	r3, r0, r8
 8003e76:	fa09 f303 	lsl.w	r3, r9, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	46a2      	mov	sl, r4
 8003e80:	e7d2      	b.n	8003e28 <_svfiprintf_r+0xa0>
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	1d19      	adds	r1, r3, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	9103      	str	r1, [sp, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfbb      	ittet	lt
 8003e8e:	425b      	neglt	r3, r3
 8003e90:	f042 0202 	orrlt.w	r2, r2, #2
 8003e94:	9307      	strge	r3, [sp, #28]
 8003e96:	9307      	strlt	r3, [sp, #28]
 8003e98:	bfb8      	it	lt
 8003e9a:	9204      	strlt	r2, [sp, #16]
 8003e9c:	7823      	ldrb	r3, [r4, #0]
 8003e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ea0:	d10a      	bne.n	8003eb8 <_svfiprintf_r+0x130>
 8003ea2:	7863      	ldrb	r3, [r4, #1]
 8003ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ea6:	d132      	bne.n	8003f0e <_svfiprintf_r+0x186>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	9203      	str	r2, [sp, #12]
 8003eb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eb4:	3402      	adds	r4, #2
 8003eb6:	9305      	str	r3, [sp, #20]
 8003eb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f7c <_svfiprintf_r+0x1f4>
 8003ebc:	7821      	ldrb	r1, [r4, #0]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4650      	mov	r0, sl
 8003ec2:	f7fc f98d 	bl	80001e0 <memchr>
 8003ec6:	b138      	cbz	r0, 8003ed8 <_svfiprintf_r+0x150>
 8003ec8:	9b04      	ldr	r3, [sp, #16]
 8003eca:	eba0 000a 	sub.w	r0, r0, sl
 8003ece:	2240      	movs	r2, #64	@ 0x40
 8003ed0:	4082      	lsls	r2, r0
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	3401      	adds	r4, #1
 8003ed6:	9304      	str	r3, [sp, #16]
 8003ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003edc:	4824      	ldr	r0, [pc, #144]	@ (8003f70 <_svfiprintf_r+0x1e8>)
 8003ede:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ee2:	2206      	movs	r2, #6
 8003ee4:	f7fc f97c 	bl	80001e0 <memchr>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d036      	beq.n	8003f5a <_svfiprintf_r+0x1d2>
 8003eec:	4b21      	ldr	r3, [pc, #132]	@ (8003f74 <_svfiprintf_r+0x1ec>)
 8003eee:	bb1b      	cbnz	r3, 8003f38 <_svfiprintf_r+0x1b0>
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	3307      	adds	r3, #7
 8003ef4:	f023 0307 	bic.w	r3, r3, #7
 8003ef8:	3308      	adds	r3, #8
 8003efa:	9303      	str	r3, [sp, #12]
 8003efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003efe:	4433      	add	r3, r6
 8003f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f02:	e76a      	b.n	8003dda <_svfiprintf_r+0x52>
 8003f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f08:	460c      	mov	r4, r1
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	e7a8      	b.n	8003e60 <_svfiprintf_r+0xd8>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	3401      	adds	r4, #1
 8003f12:	9305      	str	r3, [sp, #20]
 8003f14:	4619      	mov	r1, r3
 8003f16:	f04f 0c0a 	mov.w	ip, #10
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f20:	3a30      	subs	r2, #48	@ 0x30
 8003f22:	2a09      	cmp	r2, #9
 8003f24:	d903      	bls.n	8003f2e <_svfiprintf_r+0x1a6>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0c6      	beq.n	8003eb8 <_svfiprintf_r+0x130>
 8003f2a:	9105      	str	r1, [sp, #20]
 8003f2c:	e7c4      	b.n	8003eb8 <_svfiprintf_r+0x130>
 8003f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f32:	4604      	mov	r4, r0
 8003f34:	2301      	movs	r3, #1
 8003f36:	e7f0      	b.n	8003f1a <_svfiprintf_r+0x192>
 8003f38:	ab03      	add	r3, sp, #12
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <_svfiprintf_r+0x1f0>)
 8003f40:	a904      	add	r1, sp, #16
 8003f42:	4638      	mov	r0, r7
 8003f44:	f3af 8000 	nop.w
 8003f48:	1c42      	adds	r2, r0, #1
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	d1d6      	bne.n	8003efc <_svfiprintf_r+0x174>
 8003f4e:	89ab      	ldrh	r3, [r5, #12]
 8003f50:	065b      	lsls	r3, r3, #25
 8003f52:	f53f af2d 	bmi.w	8003db0 <_svfiprintf_r+0x28>
 8003f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f58:	e72c      	b.n	8003db4 <_svfiprintf_r+0x2c>
 8003f5a:	ab03      	add	r3, sp, #12
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	462a      	mov	r2, r5
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <_svfiprintf_r+0x1f0>)
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	4638      	mov	r0, r7
 8003f66:	f000 f879 	bl	800405c <_printf_i>
 8003f6a:	e7ed      	b.n	8003f48 <_svfiprintf_r+0x1c0>
 8003f6c:	080043cc 	.word	0x080043cc
 8003f70:	080043d6 	.word	0x080043d6
 8003f74:	00000000 	.word	0x00000000
 8003f78:	08003cd1 	.word	0x08003cd1
 8003f7c:	080043d2 	.word	0x080043d2

08003f80 <_printf_common>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	4616      	mov	r6, r2
 8003f86:	4698      	mov	r8, r3
 8003f88:	688a      	ldr	r2, [r1, #8]
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfb8      	it	lt
 8003f94:	4613      	movlt	r3, r2
 8003f96:	6033      	str	r3, [r6, #0]
 8003f98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_printf_common+0x26>
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	0699      	lsls	r1, r3, #26
 8003faa:	bf42      	ittt	mi
 8003fac:	6833      	ldrmi	r3, [r6, #0]
 8003fae:	3302      	addmi	r3, #2
 8003fb0:	6033      	strmi	r3, [r6, #0]
 8003fb2:	6825      	ldr	r5, [r4, #0]
 8003fb4:	f015 0506 	ands.w	r5, r5, #6
 8003fb8:	d106      	bne.n	8003fc8 <_printf_common+0x48>
 8003fba:	f104 0a19 	add.w	sl, r4, #25
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	6832      	ldr	r2, [r6, #0]
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dc26      	bgt.n	8004016 <_printf_common+0x96>
 8003fc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fcc:	6822      	ldr	r2, [r4, #0]
 8003fce:	3b00      	subs	r3, #0
 8003fd0:	bf18      	it	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	0692      	lsls	r2, r2, #26
 8003fd6:	d42b      	bmi.n	8004030 <_printf_common+0xb0>
 8003fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fdc:	4641      	mov	r1, r8
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c8      	blx	r9
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d01e      	beq.n	8004024 <_printf_common+0xa4>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	6922      	ldr	r2, [r4, #16]
 8003fea:	f003 0306 	and.w	r3, r3, #6
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	bf02      	ittt	eq
 8003ff2:	68e5      	ldreq	r5, [r4, #12]
 8003ff4:	6833      	ldreq	r3, [r6, #0]
 8003ff6:	1aed      	subeq	r5, r5, r3
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	bf0c      	ite	eq
 8003ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004000:	2500      	movne	r5, #0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfc4      	itt	gt
 8004006:	1a9b      	subgt	r3, r3, r2
 8004008:	18ed      	addgt	r5, r5, r3
 800400a:	2600      	movs	r6, #0
 800400c:	341a      	adds	r4, #26
 800400e:	42b5      	cmp	r5, r6
 8004010:	d11a      	bne.n	8004048 <_printf_common+0xc8>
 8004012:	2000      	movs	r0, #0
 8004014:	e008      	b.n	8004028 <_printf_common+0xa8>
 8004016:	2301      	movs	r3, #1
 8004018:	4652      	mov	r2, sl
 800401a:	4641      	mov	r1, r8
 800401c:	4638      	mov	r0, r7
 800401e:	47c8      	blx	r9
 8004020:	3001      	adds	r0, #1
 8004022:	d103      	bne.n	800402c <_printf_common+0xac>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	3501      	adds	r5, #1
 800402e:	e7c6      	b.n	8003fbe <_printf_common+0x3e>
 8004030:	18e1      	adds	r1, r4, r3
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	2030      	movs	r0, #48	@ 0x30
 8004036:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800403a:	4422      	add	r2, r4
 800403c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004044:	3302      	adds	r3, #2
 8004046:	e7c7      	b.n	8003fd8 <_printf_common+0x58>
 8004048:	2301      	movs	r3, #1
 800404a:	4622      	mov	r2, r4
 800404c:	4641      	mov	r1, r8
 800404e:	4638      	mov	r0, r7
 8004050:	47c8      	blx	r9
 8004052:	3001      	adds	r0, #1
 8004054:	d0e6      	beq.n	8004024 <_printf_common+0xa4>
 8004056:	3601      	adds	r6, #1
 8004058:	e7d9      	b.n	800400e <_printf_common+0x8e>
	...

0800405c <_printf_i>:
 800405c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	7e0f      	ldrb	r7, [r1, #24]
 8004062:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004064:	2f78      	cmp	r7, #120	@ 0x78
 8004066:	4691      	mov	r9, r2
 8004068:	4680      	mov	r8, r0
 800406a:	460c      	mov	r4, r1
 800406c:	469a      	mov	sl, r3
 800406e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004072:	d807      	bhi.n	8004084 <_printf_i+0x28>
 8004074:	2f62      	cmp	r7, #98	@ 0x62
 8004076:	d80a      	bhi.n	800408e <_printf_i+0x32>
 8004078:	2f00      	cmp	r7, #0
 800407a:	f000 80d2 	beq.w	8004222 <_printf_i+0x1c6>
 800407e:	2f58      	cmp	r7, #88	@ 0x58
 8004080:	f000 80b9 	beq.w	80041f6 <_printf_i+0x19a>
 8004084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004088:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800408c:	e03a      	b.n	8004104 <_printf_i+0xa8>
 800408e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004092:	2b15      	cmp	r3, #21
 8004094:	d8f6      	bhi.n	8004084 <_printf_i+0x28>
 8004096:	a101      	add	r1, pc, #4	@ (adr r1, 800409c <_printf_i+0x40>)
 8004098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	08004109 	.word	0x08004109
 80040a4:	08004085 	.word	0x08004085
 80040a8:	08004085 	.word	0x08004085
 80040ac:	08004085 	.word	0x08004085
 80040b0:	08004085 	.word	0x08004085
 80040b4:	08004109 	.word	0x08004109
 80040b8:	08004085 	.word	0x08004085
 80040bc:	08004085 	.word	0x08004085
 80040c0:	08004085 	.word	0x08004085
 80040c4:	08004085 	.word	0x08004085
 80040c8:	08004209 	.word	0x08004209
 80040cc:	08004133 	.word	0x08004133
 80040d0:	080041c3 	.word	0x080041c3
 80040d4:	08004085 	.word	0x08004085
 80040d8:	08004085 	.word	0x08004085
 80040dc:	0800422b 	.word	0x0800422b
 80040e0:	08004085 	.word	0x08004085
 80040e4:	08004133 	.word	0x08004133
 80040e8:	08004085 	.word	0x08004085
 80040ec:	08004085 	.word	0x08004085
 80040f0:	080041cb 	.word	0x080041cb
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6032      	str	r2, [r6, #0]
 80040fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004104:	2301      	movs	r3, #1
 8004106:	e09d      	b.n	8004244 <_printf_i+0x1e8>
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	1d19      	adds	r1, r3, #4
 800410e:	6031      	str	r1, [r6, #0]
 8004110:	0606      	lsls	r6, r0, #24
 8004112:	d501      	bpl.n	8004118 <_printf_i+0xbc>
 8004114:	681d      	ldr	r5, [r3, #0]
 8004116:	e003      	b.n	8004120 <_printf_i+0xc4>
 8004118:	0645      	lsls	r5, r0, #25
 800411a:	d5fb      	bpl.n	8004114 <_printf_i+0xb8>
 800411c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004120:	2d00      	cmp	r5, #0
 8004122:	da03      	bge.n	800412c <_printf_i+0xd0>
 8004124:	232d      	movs	r3, #45	@ 0x2d
 8004126:	426d      	negs	r5, r5
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800412c:	4859      	ldr	r0, [pc, #356]	@ (8004294 <_printf_i+0x238>)
 800412e:	230a      	movs	r3, #10
 8004130:	e011      	b.n	8004156 <_printf_i+0xfa>
 8004132:	6821      	ldr	r1, [r4, #0]
 8004134:	6833      	ldr	r3, [r6, #0]
 8004136:	0608      	lsls	r0, r1, #24
 8004138:	f853 5b04 	ldr.w	r5, [r3], #4
 800413c:	d402      	bmi.n	8004144 <_printf_i+0xe8>
 800413e:	0649      	lsls	r1, r1, #25
 8004140:	bf48      	it	mi
 8004142:	b2ad      	uxthmi	r5, r5
 8004144:	2f6f      	cmp	r7, #111	@ 0x6f
 8004146:	4853      	ldr	r0, [pc, #332]	@ (8004294 <_printf_i+0x238>)
 8004148:	6033      	str	r3, [r6, #0]
 800414a:	bf14      	ite	ne
 800414c:	230a      	movne	r3, #10
 800414e:	2308      	moveq	r3, #8
 8004150:	2100      	movs	r1, #0
 8004152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004156:	6866      	ldr	r6, [r4, #4]
 8004158:	60a6      	str	r6, [r4, #8]
 800415a:	2e00      	cmp	r6, #0
 800415c:	bfa2      	ittt	ge
 800415e:	6821      	ldrge	r1, [r4, #0]
 8004160:	f021 0104 	bicge.w	r1, r1, #4
 8004164:	6021      	strge	r1, [r4, #0]
 8004166:	b90d      	cbnz	r5, 800416c <_printf_i+0x110>
 8004168:	2e00      	cmp	r6, #0
 800416a:	d04b      	beq.n	8004204 <_printf_i+0x1a8>
 800416c:	4616      	mov	r6, r2
 800416e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004172:	fb03 5711 	mls	r7, r3, r1, r5
 8004176:	5dc7      	ldrb	r7, [r0, r7]
 8004178:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800417c:	462f      	mov	r7, r5
 800417e:	42bb      	cmp	r3, r7
 8004180:	460d      	mov	r5, r1
 8004182:	d9f4      	bls.n	800416e <_printf_i+0x112>
 8004184:	2b08      	cmp	r3, #8
 8004186:	d10b      	bne.n	80041a0 <_printf_i+0x144>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	07df      	lsls	r7, r3, #31
 800418c:	d508      	bpl.n	80041a0 <_printf_i+0x144>
 800418e:	6923      	ldr	r3, [r4, #16]
 8004190:	6861      	ldr	r1, [r4, #4]
 8004192:	4299      	cmp	r1, r3
 8004194:	bfde      	ittt	le
 8004196:	2330      	movle	r3, #48	@ 0x30
 8004198:	f806 3c01 	strble.w	r3, [r6, #-1]
 800419c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80041a0:	1b92      	subs	r2, r2, r6
 80041a2:	6122      	str	r2, [r4, #16]
 80041a4:	f8cd a000 	str.w	sl, [sp]
 80041a8:	464b      	mov	r3, r9
 80041aa:	aa03      	add	r2, sp, #12
 80041ac:	4621      	mov	r1, r4
 80041ae:	4640      	mov	r0, r8
 80041b0:	f7ff fee6 	bl	8003f80 <_printf_common>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d14a      	bne.n	800424e <_printf_i+0x1f2>
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041bc:	b004      	add	sp, #16
 80041be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	f043 0320 	orr.w	r3, r3, #32
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	4833      	ldr	r0, [pc, #204]	@ (8004298 <_printf_i+0x23c>)
 80041cc:	2778      	movs	r7, #120	@ 0x78
 80041ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	6831      	ldr	r1, [r6, #0]
 80041d6:	061f      	lsls	r7, r3, #24
 80041d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80041dc:	d402      	bmi.n	80041e4 <_printf_i+0x188>
 80041de:	065f      	lsls	r7, r3, #25
 80041e0:	bf48      	it	mi
 80041e2:	b2ad      	uxthmi	r5, r5
 80041e4:	6031      	str	r1, [r6, #0]
 80041e6:	07d9      	lsls	r1, r3, #31
 80041e8:	bf44      	itt	mi
 80041ea:	f043 0320 	orrmi.w	r3, r3, #32
 80041ee:	6023      	strmi	r3, [r4, #0]
 80041f0:	b11d      	cbz	r5, 80041fa <_printf_i+0x19e>
 80041f2:	2310      	movs	r3, #16
 80041f4:	e7ac      	b.n	8004150 <_printf_i+0xf4>
 80041f6:	4827      	ldr	r0, [pc, #156]	@ (8004294 <_printf_i+0x238>)
 80041f8:	e7e9      	b.n	80041ce <_printf_i+0x172>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f023 0320 	bic.w	r3, r3, #32
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	e7f6      	b.n	80041f2 <_printf_i+0x196>
 8004204:	4616      	mov	r6, r2
 8004206:	e7bd      	b.n	8004184 <_printf_i+0x128>
 8004208:	6833      	ldr	r3, [r6, #0]
 800420a:	6825      	ldr	r5, [r4, #0]
 800420c:	6961      	ldr	r1, [r4, #20]
 800420e:	1d18      	adds	r0, r3, #4
 8004210:	6030      	str	r0, [r6, #0]
 8004212:	062e      	lsls	r6, r5, #24
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	d501      	bpl.n	800421c <_printf_i+0x1c0>
 8004218:	6019      	str	r1, [r3, #0]
 800421a:	e002      	b.n	8004222 <_printf_i+0x1c6>
 800421c:	0668      	lsls	r0, r5, #25
 800421e:	d5fb      	bpl.n	8004218 <_printf_i+0x1bc>
 8004220:	8019      	strh	r1, [r3, #0]
 8004222:	2300      	movs	r3, #0
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	4616      	mov	r6, r2
 8004228:	e7bc      	b.n	80041a4 <_printf_i+0x148>
 800422a:	6833      	ldr	r3, [r6, #0]
 800422c:	1d1a      	adds	r2, r3, #4
 800422e:	6032      	str	r2, [r6, #0]
 8004230:	681e      	ldr	r6, [r3, #0]
 8004232:	6862      	ldr	r2, [r4, #4]
 8004234:	2100      	movs	r1, #0
 8004236:	4630      	mov	r0, r6
 8004238:	f7fb ffd2 	bl	80001e0 <memchr>
 800423c:	b108      	cbz	r0, 8004242 <_printf_i+0x1e6>
 800423e:	1b80      	subs	r0, r0, r6
 8004240:	6060      	str	r0, [r4, #4]
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	2300      	movs	r3, #0
 8004248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800424c:	e7aa      	b.n	80041a4 <_printf_i+0x148>
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	4632      	mov	r2, r6
 8004252:	4649      	mov	r1, r9
 8004254:	4640      	mov	r0, r8
 8004256:	47d0      	blx	sl
 8004258:	3001      	adds	r0, #1
 800425a:	d0ad      	beq.n	80041b8 <_printf_i+0x15c>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	079b      	lsls	r3, r3, #30
 8004260:	d413      	bmi.n	800428a <_printf_i+0x22e>
 8004262:	68e0      	ldr	r0, [r4, #12]
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	4298      	cmp	r0, r3
 8004268:	bfb8      	it	lt
 800426a:	4618      	movlt	r0, r3
 800426c:	e7a6      	b.n	80041bc <_printf_i+0x160>
 800426e:	2301      	movs	r3, #1
 8004270:	4632      	mov	r2, r6
 8004272:	4649      	mov	r1, r9
 8004274:	4640      	mov	r0, r8
 8004276:	47d0      	blx	sl
 8004278:	3001      	adds	r0, #1
 800427a:	d09d      	beq.n	80041b8 <_printf_i+0x15c>
 800427c:	3501      	adds	r5, #1
 800427e:	68e3      	ldr	r3, [r4, #12]
 8004280:	9903      	ldr	r1, [sp, #12]
 8004282:	1a5b      	subs	r3, r3, r1
 8004284:	42ab      	cmp	r3, r5
 8004286:	dcf2      	bgt.n	800426e <_printf_i+0x212>
 8004288:	e7eb      	b.n	8004262 <_printf_i+0x206>
 800428a:	2500      	movs	r5, #0
 800428c:	f104 0619 	add.w	r6, r4, #25
 8004290:	e7f5      	b.n	800427e <_printf_i+0x222>
 8004292:	bf00      	nop
 8004294:	080043dd 	.word	0x080043dd
 8004298:	080043ee 	.word	0x080043ee

0800429c <_realloc_r>:
 800429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a0:	4680      	mov	r8, r0
 80042a2:	4615      	mov	r5, r2
 80042a4:	460c      	mov	r4, r1
 80042a6:	b921      	cbnz	r1, 80042b2 <_realloc_r+0x16>
 80042a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ac:	4611      	mov	r1, r2
 80042ae:	f7ff bbb3 	b.w	8003a18 <_malloc_r>
 80042b2:	b92a      	cbnz	r2, 80042c0 <_realloc_r+0x24>
 80042b4:	f7ff fcc2 	bl	8003c3c <_free_r>
 80042b8:	2400      	movs	r4, #0
 80042ba:	4620      	mov	r0, r4
 80042bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c0:	f000 f834 	bl	800432c <_malloc_usable_size_r>
 80042c4:	4285      	cmp	r5, r0
 80042c6:	4606      	mov	r6, r0
 80042c8:	d802      	bhi.n	80042d0 <_realloc_r+0x34>
 80042ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042ce:	d8f4      	bhi.n	80042ba <_realloc_r+0x1e>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4640      	mov	r0, r8
 80042d4:	f7ff fba0 	bl	8003a18 <_malloc_r>
 80042d8:	4607      	mov	r7, r0
 80042da:	2800      	cmp	r0, #0
 80042dc:	d0ec      	beq.n	80042b8 <_realloc_r+0x1c>
 80042de:	42b5      	cmp	r5, r6
 80042e0:	462a      	mov	r2, r5
 80042e2:	4621      	mov	r1, r4
 80042e4:	bf28      	it	cs
 80042e6:	4632      	movcs	r2, r6
 80042e8:	f7ff fc9a 	bl	8003c20 <memcpy>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4640      	mov	r0, r8
 80042f0:	f7ff fca4 	bl	8003c3c <_free_r>
 80042f4:	463c      	mov	r4, r7
 80042f6:	e7e0      	b.n	80042ba <_realloc_r+0x1e>

080042f8 <memmove>:
 80042f8:	4288      	cmp	r0, r1
 80042fa:	b510      	push	{r4, lr}
 80042fc:	eb01 0402 	add.w	r4, r1, r2
 8004300:	d902      	bls.n	8004308 <memmove+0x10>
 8004302:	4284      	cmp	r4, r0
 8004304:	4623      	mov	r3, r4
 8004306:	d807      	bhi.n	8004318 <memmove+0x20>
 8004308:	1e43      	subs	r3, r0, #1
 800430a:	42a1      	cmp	r1, r4
 800430c:	d008      	beq.n	8004320 <memmove+0x28>
 800430e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004316:	e7f8      	b.n	800430a <memmove+0x12>
 8004318:	4402      	add	r2, r0
 800431a:	4601      	mov	r1, r0
 800431c:	428a      	cmp	r2, r1
 800431e:	d100      	bne.n	8004322 <memmove+0x2a>
 8004320:	bd10      	pop	{r4, pc}
 8004322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800432a:	e7f7      	b.n	800431c <memmove+0x24>

0800432c <_malloc_usable_size_r>:
 800432c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004330:	1f18      	subs	r0, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfbc      	itt	lt
 8004336:	580b      	ldrlt	r3, [r1, r0]
 8004338:	18c0      	addlt	r0, r0, r3
 800433a:	4770      	bx	lr

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
