
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004188  08004188  000061a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004188  08004188  00005188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004190  08004190  000061a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004190  08004190  00005190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004194  08004194  00005194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08004198  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001a0  08004338  000061a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08004338  0000649c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a98f  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002029  00000000  00000000  00010b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00012b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000737  00000000  00000000  00013548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002725f  00000000  00000000  00013c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000addc  00000000  00000000  0003aede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0eac  00000000  00000000  00045cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae4  00000000  00000000  00136bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00139690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040b0 	.word	0x080040b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	080040b0 	.word	0x080040b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lsm6dsl_init>:
 *      Author: cheng
 */

#include "lsm6dsl.h"

void lsm6dsl_init() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
//	i2c_init();  // ensure that i2c is initialized

	// CTRL1_XL = 0x60
	uint8_t ctrl1_xl_data[2] = {CTRL1_XL, 0x60};
 8000286:	f246 0310 	movw	r3, #24592	@ 0x6010
 800028a:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(IMU_ADDR, 0, ctrl1_xl_data, 2);
 800028c:	1d3a      	adds	r2, r7, #4
 800028e:	2302      	movs	r3, #2
 8000290:	2100      	movs	r1, #0
 8000292:	206a      	movs	r0, #106	@ 0x6a
 8000294:	f000 fcb2 	bl	8000bfc <i2c_transaction>

	// INT1_CTRL = 0x01
	uint8_t int1_ctrl_data[2] = {INT1_CTRL, 0x01};
 8000298:	f240 130d 	movw	r3, #269	@ 0x10d
 800029c:	803b      	strh	r3, [r7, #0]
	i2c_transaction(IMU_ADDR, 0, int1_ctrl_data, 2);
 800029e:	463a      	mov	r2, r7
 80002a0:	2302      	movs	r3, #2
 80002a2:	2100      	movs	r1, #0
 80002a4:	206a      	movs	r0, #106	@ 0x6a
 80002a6:	f000 fca9 	bl	8000bfc <i2c_transaction>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b086      	sub	sp, #24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
	uint8_t data[7] = {OUTX_L_XL};
 80002be:	2328      	movs	r3, #40	@ 0x28
 80002c0:	613b      	str	r3, [r7, #16]
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2100      	movs	r1, #0
 80002c8:	460a      	mov	r2, r1
 80002ca:	801a      	strh	r2, [r3, #0]
 80002cc:	460a      	mov	r2, r1
 80002ce:	709a      	strb	r2, [r3, #2]

	i2c_transaction(IMU_ADDR, 1, data, 7);
 80002d0:	f107 0210 	add.w	r2, r7, #16
 80002d4:	2307      	movs	r3, #7
 80002d6:	2101      	movs	r1, #1
 80002d8:	206a      	movs	r0, #106	@ 0x6a
 80002da:	f000 fc8f 	bl	8000bfc <i2c_transaction>

	*x = data[2] << 8 | data[1];
 80002de:	7cbb      	ldrb	r3, [r7, #18]
 80002e0:	021b      	lsls	r3, r3, #8
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	7c7b      	ldrb	r3, [r7, #17]
 80002e6:	b21b      	sxth	r3, r3
 80002e8:	4313      	orrs	r3, r2
 80002ea:	b21a      	sxth	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	801a      	strh	r2, [r3, #0]
	*y = data[4] << 8 | data[3];
 80002f0:	7d3b      	ldrb	r3, [r7, #20]
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	7cfb      	ldrb	r3, [r7, #19]
 80002f8:	b21b      	sxth	r3, r3
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	801a      	strh	r2, [r3, #0]
	*z = data[6] << 8 | data[5];
 8000302:	7dbb      	ldrb	r3, [r7, #22]
 8000304:	021b      	lsls	r3, r3, #8
 8000306:	b21a      	sxth	r2, r3
 8000308:	7d7b      	ldrb	r3, [r7, #21]
 800030a:	b21b      	sxth	r3, r3
 800030c:	4313      	orrs	r3, r2
 800030e:	b21a      	sxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	801a      	strh	r2, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000322:	2006      	movs	r0, #6
 8000324:	f003 fa00 	bl	8003728 <malloc>
 8000328:	4603      	mov	r3, r0
 800032a:	461a      	mov	r2, r3
 800032c:	4b70      	ldr	r3, [pc, #448]	@ (80004f0 <ble_init+0x1d4>)
 800032e:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000330:	bf00      	nop
 8000332:	4b70      	ldr	r3, [pc, #448]	@ (80004f4 <ble_init+0x1d8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0fb      	beq.n	8000332 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800033a:	4b6d      	ldr	r3, [pc, #436]	@ (80004f0 <ble_init+0x1d4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2106      	movs	r1, #6
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f905 	bl	8000550 <fetchBleEvent>
 8000346:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 800034e:	4b68      	ldr	r3, [pc, #416]	@ (80004f0 <ble_init+0x1d4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2206      	movs	r2, #6
 8000354:	4968      	ldr	r1, [pc, #416]	@ (80004f8 <ble_init+0x1dc>)
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f984 	bl	8000664 <checkEventResp>
 800035c:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d106      	bne.n	8000372 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 8000364:	4b65      	ldr	r3, [pc, #404]	@ (80004fc <ble_init+0x1e0>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	b29a      	uxth	r2, r3
 800036e:	4b63      	ldr	r3, [pc, #396]	@ (80004fc <ble_init+0x1e0>)
 8000370:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 8000372:	200a      	movs	r0, #10
 8000374:	f001 fada 	bl	800192c <HAL_Delay>
	free(rxEvent);
 8000378:	4b5d      	ldr	r3, [pc, #372]	@ (80004f0 <ble_init+0x1d4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f003 f9db 	bl	8003738 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000382:	2300      	movs	r3, #0
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2307      	movs	r3, #7
 8000388:	4a5d      	ldr	r2, [pc, #372]	@ (8000500 <ble_init+0x1e4>)
 800038a:	2104      	movs	r1, #4
 800038c:	485d      	ldr	r0, [pc, #372]	@ (8000504 <ble_init+0x1e8>)
 800038e:	f000 fa8f 	bl	80008b0 <BLE_command>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d106      	bne.n	80003a6 <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 8000398:	4b58      	ldr	r3, [pc, #352]	@ (80004fc <ble_init+0x1e0>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b56      	ldr	r3, [pc, #344]	@ (80004fc <ble_init+0x1e0>)
 80003a4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003a6:	4b52      	ldr	r3, [pc, #328]	@ (80004f0 <ble_init+0x1d4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 f9c4 	bl	8003738 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 80003b0:	2303      	movs	r3, #3
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2307      	movs	r3, #7
 80003b6:	4a54      	ldr	r2, [pc, #336]	@ (8000508 <ble_init+0x1ec>)
 80003b8:	2107      	movs	r1, #7
 80003ba:	4854      	ldr	r0, [pc, #336]	@ (800050c <ble_init+0x1f0>)
 80003bc:	f000 fa78 	bl	80008b0 <BLE_command>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 80003c6:	4b4d      	ldr	r3, [pc, #308]	@ (80004fc <ble_init+0x1e0>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	4b4a      	ldr	r3, [pc, #296]	@ (80004fc <ble_init+0x1e0>)
 80003d2:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 80003d4:	4b46      	ldr	r3, [pc, #280]	@ (80004f0 <ble_init+0x1d4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3307      	adds	r3, #7
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	4b4c      	ldr	r3, [pc, #304]	@ (8000510 <ble_init+0x1f4>)
 80003e0:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 80003e2:	4b43      	ldr	r3, [pc, #268]	@ (80004f0 <ble_init+0x1d4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3309      	adds	r3, #9
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b49      	ldr	r3, [pc, #292]	@ (8000514 <ble_init+0x1f8>)
 80003ee:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 80003f0:	4b3f      	ldr	r3, [pc, #252]	@ (80004f0 <ble_init+0x1d4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	330b      	adds	r3, #11
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	4b47      	ldr	r3, [pc, #284]	@ (8000518 <ble_init+0x1fc>)
 80003fc:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003fe:	4b3c      	ldr	r3, [pc, #240]	@ (80004f0 <ble_init+0x1d4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f003 f998 	bl	8003738 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000408:	4b44      	ldr	r3, [pc, #272]	@ (800051c <ble_init+0x200>)
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2307      	movs	r3, #7
 800040e:	2200      	movs	r2, #0
 8000410:	4940      	ldr	r1, [pc, #256]	@ (8000514 <ble_init+0x1f8>)
 8000412:	483f      	ldr	r0, [pc, #252]	@ (8000510 <ble_init+0x1f4>)
 8000414:	f000 fb12 	bl	8000a3c <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000418:	4b38      	ldr	r3, [pc, #224]	@ (80004fc <ble_init+0x1e0>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	f043 0308 	orr.w	r3, r3, #8
 8000420:	b29a      	uxth	r2, r3
 8000422:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <ble_init+0x1e0>)
 8000424:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 8000426:	4b32      	ldr	r3, [pc, #200]	@ (80004f0 <ble_init+0x1d4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f003 f984 	bl	8003738 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000430:	2300      	movs	r3, #0
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2307      	movs	r3, #7
 8000436:	4a3a      	ldr	r2, [pc, #232]	@ (8000520 <ble_init+0x204>)
 8000438:	2110      	movs	r1, #16
 800043a:	483a      	ldr	r0, [pc, #232]	@ (8000524 <ble_init+0x208>)
 800043c:	f000 fa38 	bl	80008b0 <BLE_command>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 8000446:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <ble_init+0x1e0>)
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	b29a      	uxth	r2, r3
 8000450:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <ble_init+0x1e0>)
 8000452:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000454:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <ble_init+0x1d4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f003 f96d 	bl	8003738 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800045e:	2300      	movs	r3, #0
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2307      	movs	r3, #7
 8000464:	4a30      	ldr	r2, [pc, #192]	@ (8000528 <ble_init+0x20c>)
 8000466:	2106      	movs	r1, #6
 8000468:	4830      	ldr	r0, [pc, #192]	@ (800052c <ble_init+0x210>)
 800046a:	f000 fa21 	bl	80008b0 <BLE_command>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d106      	bne.n	8000482 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <ble_init+0x1e0>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	b29a      	uxth	r2, r3
 800047e:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <ble_init+0x1e0>)
 8000480:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000482:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <ble_init+0x1d4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f003 f956 	bl	8003738 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 800048c:	2300      	movs	r3, #0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2307      	movs	r3, #7
 8000492:	4a27      	ldr	r2, [pc, #156]	@ (8000530 <ble_init+0x214>)
 8000494:	2124      	movs	r1, #36	@ 0x24
 8000496:	4827      	ldr	r0, [pc, #156]	@ (8000534 <ble_init+0x218>)
 8000498:	f000 fa0a 	bl	80008b0 <BLE_command>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d106      	bne.n	80004b0 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <ble_init+0x1e0>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <ble_init+0x1e0>)
 80004ae:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <ble_init+0x1d4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 f93f 	bl	8003738 <free>

	//This will start the advertisment,
	setConnectable();
 80004ba:	f000 f979 	bl	80007b0 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 80004be:	2207      	movs	r2, #7
 80004c0:	491d      	ldr	r1, [pc, #116]	@ (8000538 <ble_init+0x21c>)
 80004c2:	481e      	ldr	r0, [pc, #120]	@ (800053c <ble_init+0x220>)
 80004c4:	f000 fa40 	bl	8000948 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 80004c8:	2310      	movs	r3, #16
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2314      	movs	r3, #20
 80004ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000538 <ble_init+0x21c>)
 80004d0:	491b      	ldr	r1, [pc, #108]	@ (8000540 <ble_init+0x224>)
 80004d2:	481c      	ldr	r0, [pc, #112]	@ (8000544 <ble_init+0x228>)
 80004d4:	f000 fa70 	bl	80009b8 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 80004d8:	2304      	movs	r3, #4
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2314      	movs	r3, #20
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <ble_init+0x21c>)
 80004e0:	4919      	ldr	r1, [pc, #100]	@ (8000548 <ble_init+0x22c>)
 80004e2:	481a      	ldr	r0, [pc, #104]	@ (800054c <ble_init+0x230>)
 80004e4:	f000 fa68 	bl	80009b8 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 80004e8:	bf00      	nop
}
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200002d4 	.word	0x200002d4
 80004f4:	200002d8 	.word	0x200002d8
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200002d2 	.word	0x200002d2
 8000500:	2000000c 	.word	0x2000000c
 8000504:	20000008 	.word	0x20000008
 8000508:	2000001c 	.word	0x2000001c
 800050c:	20000014 	.word	0x20000014
 8000510:	200001bc 	.word	0x200001bc
 8000514:	200001c0 	.word	0x200001c0
 8000518:	200001c4 	.word	0x200001c4
 800051c:	200000f4 	.word	0x200000f4
 8000520:	20000034 	.word	0x20000034
 8000524:	20000024 	.word	0x20000024
 8000528:	20000044 	.word	0x20000044
 800052c:	2000003c 	.word	0x2000003c
 8000530:	20000070 	.word	0x20000070
 8000534:	2000004c 	.word	0x2000004c
 8000538:	200002c8 	.word	0x200002c8
 800053c:	200000fc 	.word	0x200000fc
 8000540:	200002d0 	.word	0x200002d0
 8000544:	2000011c 	.word	0x2000011c
 8000548:	200002cc 	.word	0x200002cc
 800054c:	2000010c 	.word	0x2000010c

08000550 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	@ 0x30
 8000554:	af02      	add	r7, sp, #8
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 800055a:	4a3d      	ldr	r2, [pc, #244]	@ (8000650 <fetchBleEvent+0x100>)
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000564:	6018      	str	r0, [r3, #0]
 8000566:	3304      	adds	r3, #4
 8000568:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	4839      	ldr	r0, [pc, #228]	@ (8000654 <fetchBleEvent+0x104>)
 800056e:	f001 fcbd 	bl	8001eec <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d065      	beq.n	8000644 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000578:	2005      	movs	r0, #5
 800057a:	f001 f9d7 	bl	800192c <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4834      	ldr	r0, [pc, #208]	@ (8000658 <fetchBleEvent+0x108>)
 8000586:	f001 fcc9 	bl	8001f1c <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800058a:	f107 0210 	add.w	r2, r7, #16
 800058e:	f107 0118 	add.w	r1, r7, #24
 8000592:	2301      	movs	r3, #1
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2305      	movs	r3, #5
 8000598:	4830      	ldr	r0, [pc, #192]	@ (800065c <fetchBleEvent+0x10c>)
 800059a:	f002 fd3f 	bl	800301c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a4:	482c      	ldr	r0, [pc, #176]	@ (8000658 <fetchBleEvent+0x108>)
 80005a6:	f001 fcb9 	bl	8001f1c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 f9be 	bl	800192c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	4828      	ldr	r0, [pc, #160]	@ (8000658 <fetchBleEvent+0x108>)
 80005b8:	f001 fcb0 	bl	8001f1c <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80005bc:	f107 0210 	add.w	r2, r7, #16
 80005c0:	f107 0118 	add.w	r1, r7, #24
 80005c4:	2301      	movs	r3, #1
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2305      	movs	r3, #5
 80005ca:	4824      	ldr	r0, [pc, #144]	@ (800065c <fetchBleEvent+0x10c>)
 80005cc:	f002 fd26 	bl	800301c <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 80005d0:	7cfb      	ldrb	r3, [r7, #19]
 80005d2:	461a      	mov	r2, r3
 80005d4:	7d3b      	ldrb	r3, [r7, #20]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	4313      	orrs	r3, r2
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 80005dc:	23ff      	movs	r3, #255	@ 0xff
 80005de:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 80005e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dd01      	ble.n	80005ec <fetchBleEvent+0x9c>
	  dataSize=size;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 80005ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	dd1f      	ble.n	8000632 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
 80005f6:	e00d      	b.n	8000614 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	441a      	add	r2, r3
 80005fe:	f107 010f 	add.w	r1, r7, #15
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4814      	ldr	r0, [pc, #80]	@ (800065c <fetchBleEvent+0x10c>)
 800060a:	f002 fd07 	bl	800301c <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 800060e:	6a3b      	ldr	r3, [r7, #32]
 8000610:	3301      	adds	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	6a3a      	ldr	r2, [r7, #32]
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	429a      	cmp	r2, r3
 800061a:	dbed      	blt.n	80005f8 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <fetchBleEvent+0x108>)
 8000624:	f001 fc7a 	bl	8001f1c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <fetchBleEvent+0x110>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	e00a      	b.n	8000648 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <fetchBleEvent+0x108>)
 800063a:	f001 fc6f 	bl	8001f1c <HAL_GPIO_WritePin>
        return -1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000642:	e001      	b.n	8000648 <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000644:	f06f 0301 	mvn.w	r3, #1
  }
}
 8000648:	4618      	mov	r0, r3
 800064a:	3728      	adds	r7, #40	@ 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	080040c8 	.word	0x080040c8
 8000654:	48001000 	.word	0x48001000
 8000658:	48000c00 	.word	0x48000c00
 800065c:	200002dc 	.word	0x200002dc
 8000660:	200002d8 	.word	0x200002d8

08000664 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	int j=0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00f      	b.n	800069a <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	440b      	add	r3, r1
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	429a      	cmp	r2, r3
 800068c:	d002      	beq.n	8000694 <checkEventResp+0x30>
			return -1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000692:	e007      	b.n	80006a4 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbeb      	blt.n	800067a <checkEventResp+0x16>
		}
	}

return BLE_OK;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	371c      	adds	r7, #28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80006ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000738 <sendCommand+0x88>)
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d0:	481a      	ldr	r0, [pc, #104]	@ (800073c <sendCommand+0x8c>)
 80006d2:	f001 fc23 	bl	8001f1c <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2305      	movs	r3, #5
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <sendCommand+0x90>)
 80006e6:	f002 fc99 	bl	800301c <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 80006ea:	7abb      	ldrb	r3, [r7, #10]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	7a7a      	ldrb	r2, [r7, #9]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	db09      	blt.n	8000710 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	2301      	movs	r3, #1
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <sendCommand+0x90>)
 8000706:	f002 fb14 	bl	8002d32 <HAL_SPI_Transmit>
		result=0;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	e002      	b.n	8000716 <sendCommand+0x66>
	  }else{
		result=-1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000714:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	4807      	ldr	r0, [pc, #28]	@ (800073c <sendCommand+0x8c>)
 800071e:	f001 fbfd 	bl	8001f1c <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <sendCommand+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1cd      	bne.n	80006ca <sendCommand+0x1a>

}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	080040d0 	.word	0x080040d0
 800073c:	48000c00 	.word	0x48000c00
 8000740:	200002dc 	.word	0x200002dc
 8000744:	200002d8 	.word	0x200002d8

08000748 <catchBLE>:

void catchBLE(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 800074e:	217f      	movs	r1, #127	@ 0x7f
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <catchBLE+0x58>)
 8000752:	f7ff fefd 	bl	8000550 <fetchBleEvent>
 8000756:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d11b      	bne.n	8000796 <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 800075e:	2203      	movs	r2, #3
 8000760:	4910      	ldr	r1, [pc, #64]	@ (80007a4 <catchBLE+0x5c>)
 8000762:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <catchBLE+0x58>)
 8000764:	f7ff ff7e 	bl	8000664 <checkEventResp>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 800076e:	f000 f81f 	bl	80007b0 <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000772:	2205      	movs	r2, #5
 8000774:	490c      	ldr	r1, [pc, #48]	@ (80007a8 <catchBLE+0x60>)
 8000776:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <catchBLE+0x58>)
 8000778:	f7ff ff74 	bl	8000664 <checkEventResp>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d109      	bne.n	8000796 <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <catchBLE+0x58>)
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	b21a      	sxth	r2, r3
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <catchBLE+0x64>)
 800078a:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <catchBLE+0x58>)
 800078e:	799b      	ldrb	r3, [r3, #6]
 8000790:	b21a      	sxth	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <catchBLE+0x64>)
 8000794:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001c8 	.word	0x200001c8
 80007a4:	200000e8 	.word	0x200000e8
 80007a8:	200000ec 	.word	0x200000ec
 80007ac:	2000012c 	.word	0x2000012c

080007b0 <setConnectable>:

void setConnectable(){
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80007b6:	200c      	movs	r0, #12
 80007b8:	f002 ffb6 	bl	8003728 <malloc>
 80007bc:	4603      	mov	r3, r0
 80007be:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4a36      	ldr	r2, [pc, #216]	@ (800089c <setConnectable+0xec>)
 80007c4:	6810      	ldr	r0, [r2, #0]
 80007c6:	6018      	str	r0, [r3, #0]
 80007c8:	8891      	ldrh	r1, [r2, #4]
 80007ca:	7992      	ldrb	r2, [r2, #6]
 80007cc:	8099      	strh	r1, [r3, #4]
 80007ce:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3308      	adds	r3, #8
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3309      	adds	r3, #9
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	330a      	adds	r3, #10
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	330b      	adds	r3, #11
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3307      	adds	r3, #7
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80007f8:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <setConnectable+0xf0>)
 80007fa:	2208      	movs	r2, #8
 80007fc:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <setConnectable+0xf0>)
 8000800:	2215      	movs	r2, #21
 8000802:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000804:	2019      	movs	r0, #25
 8000806:	f002 ff8f 	bl	8003728 <malloc>
 800080a:	4603      	mov	r3, r0
 800080c:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4a23      	ldr	r2, [pc, #140]	@ (80008a0 <setConnectable+0xf0>)
 8000812:	461c      	mov	r4, r3
 8000814:	4613      	mov	r3, r2
 8000816:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000818:	6020      	str	r0, [r4, #0]
 800081a:	6061      	str	r1, [r4, #4]
 800081c:	60a2      	str	r2, [r4, #8]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	330d      	adds	r3, #13
 8000826:	220c      	movs	r2, #12
 8000828:	68f9      	ldr	r1, [r7, #12]
 800082a:	4618      	mov	r0, r3
 800082c:	f003 f8b2 	bl	8003994 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000830:	2119      	movs	r1, #25
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f7ff ff3c 	bl	80006b0 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000838:	2007      	movs	r0, #7
 800083a:	f002 ff75 	bl	8003728 <malloc>
 800083e:	4603      	mov	r3, r0
 8000840:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 8000842:	bf00      	nop
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <setConnectable+0xf4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0fb      	beq.n	8000844 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 800084c:	2107      	movs	r1, #7
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe7e 	bl	8000550 <fetchBleEvent>
 8000854:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10f      	bne.n	800087c <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 800085c:	2207      	movs	r2, #7
 800085e:	4912      	ldr	r1, [pc, #72]	@ (80008a8 <setConnectable+0xf8>)
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff feff 	bl	8000664 <checkEventResp>
 8000866:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <setConnectable+0xfc>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <setConnectable+0xfc>)
 800087a:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f002 ff5b 	bl	8003738 <free>
	   free(discoverableCommand);
 8000882:	68b8      	ldr	r0, [r7, #8]
 8000884:	f002 ff58 	bl	8003738 <free>
	   free(localname);
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f002 ff55 	bl	8003738 <free>
	   HAL_Delay(10);
 800088e:	200a      	movs	r0, #10
 8000890:	f001 f84c 	bl	800192c <HAL_Delay>
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	200000f4 	.word	0x200000f4
 80008a0:	20000078 	.word	0x20000078
 80008a4:	200002d8 	.word	0x200002d8
 80008a8:	20000088 	.word	0x20000088
 80008ac:	200002d2 	.word	0x200002d2

080008b0 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f7ff fef5 	bl	80006b0 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 80008c6:	6a3b      	ldr	r3, [r7, #32]
 80008c8:	005a      	lsls	r2, r3, #1
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 ff2a 	bl	8003728 <malloc>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <BLE_command+0x90>)
 80008da:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80008e0:	e007      	b.n	80008f2 <BLE_command+0x42>
		   contatore++;
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	3301      	adds	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	f247 5230 	movw	r2, #30000	@ 0x7530
 80008ee:	4293      	cmp	r3, r2
 80008f0:	dc07      	bgt.n	8000902 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	4813      	ldr	r0, [pc, #76]	@ (8000944 <BLE_command+0x94>)
 80008f6:	f001 faf9 	bl	8001eec <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f0      	beq.n	80008e2 <BLE_command+0x32>
 8000900:	e000      	b.n	8000904 <BLE_command+0x54>
			   break;
 8000902:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000904:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <BLE_command+0x90>)
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	005a      	lsls	r2, r3, #1
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4619      	mov	r1, r3
 8000912:	f7ff fe1d 	bl	8000550 <fetchBleEvent>
 8000916:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d107      	bne.n	800092e <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <BLE_command+0x90>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9c 	bl	8000664 <checkEventResp>
 800092c:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f000 fffc 	bl	800192c <HAL_Delay>


	return response;
 8000934:	697b      	ldr	r3, [r7, #20]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200002d4 	.word	0x200002d4
 8000944:	48001000 	.word	0x48001000

08000948 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af02      	add	r7, sp, #8
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <addService+0x60>)
 8000956:	2210      	movs	r2, #16
 8000958:	68f9      	ldr	r1, [r7, #12]
 800095a:	4618      	mov	r0, r3
 800095c:	f003 f81a 	bl	8003994 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <addService+0x64>)
 8000966:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000968:	2301      	movs	r3, #1
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2307      	movs	r3, #7
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <addService+0x68>)
 8000970:	2117      	movs	r1, #23
 8000972:	480e      	ldr	r0, [pc, #56]	@ (80009ac <addService+0x64>)
 8000974:	f7ff ff9c 	bl	80008b0 <BLE_command>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10a      	bne.n	8000994 <addService+0x4c>
		   handle[0]=rxEvent[7];
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <addService+0x6c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	79da      	ldrb	r2, [r3, #7]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <addService+0x6c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3301      	adds	r3, #1
 8000990:	7a12      	ldrb	r2, [r2, #8]
 8000992:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <addService+0x6c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fecd 	bl	8003738 <free>
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000095 	.word	0x20000095
 80009ac:	20000090 	.word	0x20000090
 80009b0:	200000a8 	.word	0x200000a8
 80009b4:	200002d4 	.word	0x200002d4

080009b8 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <addCharacteristic+0x74>)
 80009c8:	2210      	movs	r2, #16
 80009ca:	68f9      	ldr	r1, [r7, #12]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 ffe1 	bl	8003994 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <addCharacteristic+0x78>)
 80009d8:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	785a      	ldrb	r2, [r3, #1]
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <addCharacteristic+0x78>)
 80009e0:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 80009e2:	4a13      	ldr	r2, [pc, #76]	@ (8000a30 <addCharacteristic+0x78>)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 80009e8:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <addCharacteristic+0x78>)
 80009ea:	7e3b      	ldrb	r3, [r7, #24]
 80009ec:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80009ee:	2301      	movs	r3, #1
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2307      	movs	r3, #7
 80009f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <addCharacteristic+0x7c>)
 80009f6:	211e      	movs	r1, #30
 80009f8:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <addCharacteristic+0x78>)
 80009fa:	f7ff ff59 	bl	80008b0 <BLE_command>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10a      	bne.n	8000a1a <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <addCharacteristic+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	79da      	ldrb	r2, [r3, #7]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <addCharacteristic+0x80>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	3301      	adds	r3, #1
 8000a16:	7a12      	ldrb	r2, [r2, #8]
 8000a18:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <addCharacteristic+0x80>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 fe8a 	bl	8003738 <free>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000b7 	.word	0x200000b7
 8000a30:	200000b0 	.word	0x200000b0
 8000a34:	200000d0 	.word	0x200000d0
 8000a38:	200002d4 	.word	0x200002d4

08000a3c <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	3306      	adds	r3, #6
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a54:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a5c:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	785a      	ldrb	r2, [r3, #1]
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a64:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a6c:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	785a      	ldrb	r2, [r3, #1]
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a74:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a7c:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a84:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	330a      	adds	r3, #10
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fe4c 	bl	8003728 <malloc>
 8000a90:	4603      	mov	r3, r0
 8000a92:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000a94:	220a      	movs	r2, #10
 8000a96:	4910      	ldr	r1, [pc, #64]	@ (8000ad8 <updateCharValue+0x9c>)
 8000a98:	6978      	ldr	r0, [r7, #20]
 8000a9a:	f002 ff7b 	bl	8003994 <memcpy>
	memcpy(commandComplete+10,data,size);
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	330a      	adds	r3, #10
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	6a39      	ldr	r1, [r7, #32]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 ff74 	bl	8003994 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f103 010a 	add.w	r1, r3, #10
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <updateCharValue+0xa0>)
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff fef8 	bl	80008b0 <BLE_command>

	free(commandComplete);
 8000ac0:	6978      	ldr	r0, [r7, #20]
 8000ac2:	f002 fe39 	bl	8003738 <free>
	free(rxEvent);
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <updateCharValue+0xa4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fe34 	bl	8003738 <free>
}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000d8 	.word	0x200000d8
 8000adc:	200000d0 	.word	0x200000d0
 8000ae0:	200002d4 	.word	0x200002d4

08000ae4 <i2c_init>:
#include <stm32l475xx.h>

void i2c_init() {
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000ae8:	4b41      	ldr	r3, [pc, #260]	@ (8000bf0 <i2c_init+0x10c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d177      	bne.n	8000be4 <i2c_init+0x100>

    // Enable GPIOB and I2C2 clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000af4:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf4 <i2c_init+0x110>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf4 <i2c_init+0x110>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b00:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf4 <i2c_init+0x110>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b04:	4a3b      	ldr	r2, [pc, #236]	@ (8000bf4 <i2c_init+0x110>)
 8000b06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b0a:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PB10 (SCL) and PB11 (SDA) as alternate function
    GPIOB->MODER &= ~GPIO_MODER_MODE10 & ~GPIO_MODER_MODE11; // Clear mode bits
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <i2c_init+0x114>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a39      	ldr	r2, [pc, #228]	@ (8000bf8 <i2c_init+0x114>)
 8000b12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b16:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1;  // Set alternate function mode
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <i2c_init+0x114>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a36      	ldr	r2, [pc, #216]	@ (8000bf8 <i2c_init+0x114>)
 8000b1e:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000b22:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11;  // Open-drain mode (needed for I2C)
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <i2c_init+0x114>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <i2c_init+0x114>)
 8000b2a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000b2e:	6053      	str	r3, [r2, #4]

    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);  // Clear pull-up/down register
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <i2c_init+0x114>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	4a30      	ldr	r2, [pc, #192]	@ (8000bf8 <i2c_init+0x114>)
 8000b36:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b3a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);  // Pull-up (default 1 from floating)
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <i2c_init+0x114>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <i2c_init+0x114>)
 8000b42:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000b46:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <i2c_init+0x114>)
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf8 <i2c_init+0x114>)
 8000b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b52:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL11_2;
 8000b54:	4b28      	ldr	r3, [pc, #160]	@ (8000bf8 <i2c_init+0x114>)
 8000b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b58:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <i2c_init+0x114>)
 8000b5a:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000b5e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Reset I2C2
    I2C2->CR1 &= ~I2C_CR1_PE;
 8000b60:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <i2c_init+0x10c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <i2c_init+0x10c>)
 8000b66:	f023 0301 	bic.w	r3, r3, #1
 8000b6a:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_SWRST;
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <i2c_init+0x10c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <i2c_init+0x10c>)
 8000b72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b76:	6013      	str	r3, [r2, #0]
    I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <i2c_init+0x10c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <i2c_init+0x10c>)
 8000b7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000b82:	6013      	str	r3, [r2, #0]

    // SYSCLK is 4 MHz
    // PCLK1 will be 4 MHz if we configure no divides between SYSCLK and HCLK and b/t HCLK and PCLK1

    // configure HCLK and PCLK1 to have no divides
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1);
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <i2c_init+0x110>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf4 <i2c_init+0x110>)
 8000b8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8000b8e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV1;
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <i2c_init+0x110>)
 8000b92:	4a18      	ldr	r2, [pc, #96]	@ (8000bf4 <i2c_init+0x110>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	6093      	str	r3, [r2, #8]
    // tFilter = 260 ns (analog filter only)
    // tI2CCLK = 1 / PCLK1 = 1 / 4 MHz = 250 ns
    // PRESC = 0 (keep at 250 ns)
    // SCLL = (tLow - tFilter) / tI2CCLK = round((20 us - 260 ns) / 250 ns) = 79
    // SCLH = tHigh / tI2CCLK = 20 us / 250 ns = 80
    I2C2->TIMINGR &= 0;
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <i2c_init+0x10c>)
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <i2c_init+0x10c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_PRESC_Pos;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <i2c_init+0x10c>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <i2c_init+0x10c>)
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 79 << I2C_TIMINGR_SCLL_Pos;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <i2c_init+0x10c>)
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	4a10      	ldr	r2, [pc, #64]	@ (8000bf0 <i2c_init+0x10c>)
 8000bb0:	f043 034f 	orr.w	r3, r3, #79	@ 0x4f
 8000bb4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 80 << I2C_TIMINGR_SCLH_Pos;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <i2c_init+0x10c>)
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <i2c_init+0x10c>)
 8000bbc:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000bc0:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0 << I2C_TIMINGR_SDADEL_Pos;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <i2c_init+0x10c>)
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <i2c_init+0x10c>)
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 2 << I2C_TIMINGR_SCLDEL_Pos;
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <i2c_init+0x10c>)
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <i2c_init+0x10c>)
 8000bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd4:	6113      	str	r3, [r2, #16]

    // Enable I2C2
    I2C2->CR1 |= I2C_CR1_PE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <i2c_init+0x10c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <i2c_init+0x10c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e000      	b.n	8000be6 <i2c_init+0x102>
	if (I2C2->CR1 & I2C_CR1_PE) return;
 8000be4:	bf00      	nop
}
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40005800 	.word	0x40005800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400

08000bfc <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	603a      	str	r2, [r7, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	71bb      	strb	r3, [r7, #6]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	717b      	strb	r3, [r7, #5]
    uint32_t timeout = 1000000;  // Simple timeout mechanism
 8000c12:	4b79      	ldr	r3, [pc, #484]	@ (8000df8 <i2c_transaction+0x1fc>)
 8000c14:	60fb      	str	r3, [r7, #12]

    // Ensure the bus is free
    while ((I2C2->ISR & I2C_ISR_BUSY) && --timeout);
 8000c16:	bf00      	nop
 8000c18:	4b78      	ldr	r3, [pc, #480]	@ (8000dfc <i2c_transaction+0x200>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d005      	beq.n	8000c30 <i2c_transaction+0x34>
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f3      	bne.n	8000c18 <i2c_transaction+0x1c>
    if (!timeout) return 1;  // Timeout error
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <i2c_transaction+0x3e>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e0d7      	b.n	8000dea <i2c_transaction+0x1ee>

    if (dir) {  // read
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 8087 	beq.w	8000d50 <i2c_transaction+0x154>
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4a6d      	ldr	r2, [pc, #436]	@ (8000dfc <i2c_transaction+0x200>)
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8000dfc <i2c_transaction+0x200>)
 8000c4c:	4a6b      	ldr	r2, [pc, #428]	@ (8000dfc <i2c_transaction+0x200>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 1 << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000c52:	4b6a      	ldr	r3, [pc, #424]	@ (8000dfc <i2c_transaction+0x200>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a69      	ldr	r2, [pc, #420]	@ (8000dfc <i2c_transaction+0x200>)
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c5c:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000c5e:	4b67      	ldr	r3, [pc, #412]	@ (8000dfc <i2c_transaction+0x200>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4a66      	ldr	r2, [pc, #408]	@ (8000dfc <i2c_transaction+0x200>)
 8000c64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c68:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	72fb      	strb	r3, [r7, #11]
 8000c6e:	e06a      	b.n	8000d46 <i2c_transaction+0x14a>
	    	timeout = 1000000;
 8000c70:	4b61      	ldr	r3, [pc, #388]	@ (8000df8 <i2c_transaction+0x1fc>)
 8000c72:	60fb      	str	r3, [r7, #12]

    	    if (i == 0) {
 8000c74:	7afb      	ldrb	r3, [r7, #11]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d149      	bne.n	8000d0e <i2c_transaction+0x112>
    	    	while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000c7a:	bf00      	nop
 8000c7c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dfc <i2c_transaction+0x200>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d105      	bne.n	8000c94 <i2c_transaction+0x98>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f3      	bne.n	8000c7c <i2c_transaction+0x80>
    	        if (!timeout) return 2;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <i2c_transaction+0xa2>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	e0a5      	b.n	8000dea <i2c_transaction+0x1ee>
    	        I2C2->TXDR = data[i];
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b55      	ldr	r3, [pc, #340]	@ (8000dfc <i2c_transaction+0x200>)
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28

    	        while (!(I2C2->ISR & I2C_ISR_TC) && --timeout);
 8000caa:	bf00      	nop
 8000cac:	4b53      	ldr	r3, [pc, #332]	@ (8000dfc <i2c_transaction+0x200>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d105      	bne.n	8000cc4 <i2c_transaction+0xc8>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f3      	bne.n	8000cac <i2c_transaction+0xb0>
    	       	if (!timeout) return 2;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <i2c_transaction+0xd2>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e08d      	b.n	8000dea <i2c_transaction+0x1ee>

    	        I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8000dfc <i2c_transaction+0x200>)
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_RD_WRN;  // transfer direction. 0 for write, 1 for read
 8000cd6:	4b49      	ldr	r3, [pc, #292]	@ (8000dfc <i2c_transaction+0x200>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4a48      	ldr	r2, [pc, #288]	@ (8000dfc <i2c_transaction+0x200>)
 8000cdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce0:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= (len - 1) << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000ce2:	4b46      	ldr	r3, [pc, #280]	@ (8000dfc <i2c_transaction+0x200>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	797a      	ldrb	r2, [r7, #5]
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	0412      	lsls	r2, r2, #16
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a43      	ldr	r2, [pc, #268]	@ (8000dfc <i2c_transaction+0x200>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_AUTOEND;  // auto transmit STOP after # of bytes
 8000cf4:	4b41      	ldr	r3, [pc, #260]	@ (8000dfc <i2c_transaction+0x200>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4a40      	ldr	r2, [pc, #256]	@ (8000dfc <i2c_transaction+0x200>)
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cfe:	6053      	str	r3, [r2, #4]
    	       	I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000d00:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <i2c_transaction+0x200>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4a3d      	ldr	r2, [pc, #244]	@ (8000dfc <i2c_transaction+0x200>)
 8000d06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d0a:	6053      	str	r3, [r2, #4]

    	       	continue;
 8000d0c:	e018      	b.n	8000d40 <i2c_transaction+0x144>
    	    }

    	    while (!(I2C2->ISR & I2C_ISR_RXNE) && --timeout);
 8000d0e:	bf00      	nop
 8000d10:	4b3a      	ldr	r3, [pc, #232]	@ (8000dfc <i2c_transaction+0x200>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d105      	bne.n	8000d28 <i2c_transaction+0x12c>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f3      	bne.n	8000d10 <i2c_transaction+0x114>
    	    if (!timeout) return 3;  // Timeout error
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <i2c_transaction+0x136>
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e05b      	b.n	8000dea <i2c_transaction+0x1ee>
    	    data[i] = I2C2->RXDR;
 8000d32:	4b32      	ldr	r3, [pc, #200]	@ (8000dfc <i2c_transaction+0x200>)
 8000d34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2ca      	uxtb	r2, r1
 8000d3e:	701a      	strb	r2, [r3, #0]
	    for (uint8_t i = 0; i < len; i++) {
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	3301      	adds	r3, #1
 8000d44:	72fb      	strb	r3, [r7, #11]
 8000d46:	7afa      	ldrb	r2, [r7, #11]
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d390      	bcc.n	8000c70 <i2c_transaction+0x74>
 8000d4e:	e03e      	b.n	8000dce <i2c_transaction+0x1d2>
	    }
    } else {  // write
    	// Start condition with address
    	I2C2->CR2 = address << 1;  // address, assume 7-bit mode. << 1 b/c LSB is DC
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4a2a      	ldr	r2, [pc, #168]	@ (8000dfc <i2c_transaction+0x200>)
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= 0;  // transfer direction. 0 for write, 1 for read
 8000d58:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <i2c_transaction+0x200>)
 8000d5a:	4a28      	ldr	r2, [pc, #160]	@ (8000dfc <i2c_transaction+0x200>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= len << I2C_CR2_NBYTES_Pos;  // len = number of bytes to R/W
 8000d60:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <i2c_transaction+0x200>)
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	4924      	ldr	r1, [pc, #144]	@ (8000dfc <i2c_transaction+0x200>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	604b      	str	r3, [r1, #4]
    	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <i2c_transaction+0x200>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a22      	ldr	r2, [pc, #136]	@ (8000dfc <i2c_transaction+0x200>)
 8000d74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d78:	6053      	str	r3, [r2, #4]
	    I2C2->CR2 |= I2C_CR2_START;  // set start flag on
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <i2c_transaction+0x200>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dfc <i2c_transaction+0x200>)
 8000d80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d84:	6053      	str	r3, [r2, #4]

	    // Transmit/Receive Data
	    for (uint8_t i = 0; i < len; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	72bb      	strb	r3, [r7, #10]
 8000d8a:	e01c      	b.n	8000dc6 <i2c_transaction+0x1ca>
	    	timeout = 1000000;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <i2c_transaction+0x1fc>)
 8000d8e:	60fb      	str	r3, [r7, #12]

            while (!(I2C2->ISR & I2C_ISR_TXIS) && --timeout);
 8000d90:	bf00      	nop
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <i2c_transaction+0x200>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d105      	bne.n	8000daa <i2c_transaction+0x1ae>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f3      	bne.n	8000d92 <i2c_transaction+0x196>
   	        if (!timeout) return 2;  // Timeout error
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <i2c_transaction+0x1b8>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e01a      	b.n	8000dea <i2c_transaction+0x1ee>
    	    I2C2->TXDR = data[i];
 8000db4:	7abb      	ldrb	r3, [r7, #10]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <i2c_transaction+0x200>)
 8000dbe:	629a      	str	r2, [r3, #40]	@ 0x28
	    for (uint8_t i = 0; i < len; i++) {
 8000dc0:	7abb      	ldrb	r3, [r7, #10]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	72bb      	strb	r3, [r7, #10]
 8000dc6:	7aba      	ldrb	r2, [r7, #10]
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3de      	bcc.n	8000d8c <i2c_transaction+0x190>
	    }
    }

    while (!(I2C2->ISR & I2C_ISR_STOPF));  // Wait for STOP condition
 8000dce:	bf00      	nop
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <i2c_transaction+0x200>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f9      	beq.n	8000dd0 <i2c_transaction+0x1d4>
    I2C2->ICR |= I2C_ICR_STOPCF;  // Clear STOP flag
 8000ddc:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <i2c_transaction+0x200>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <i2c_transaction+0x200>)
 8000de2:	f043 0320 	orr.w	r3, r3, #32
 8000de6:	61d3      	str	r3, [r2, #28]

    return 0;  // Success
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	000f4240 	.word	0x000f4240
 8000dfc:	40005800 	.word	0x40005800

08000e00 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <leds_init+0xc4>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec4 <leds_init+0xc4>)
 8000e0a:	f043 0303 	orr.w	r3, r3, #3
 8000e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Configure PA5 and PB14 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000e10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e1a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000e1e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000e20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000e30:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <leds_init+0xc8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a24      	ldr	r2, [pc, #144]	@ (8000ec8 <leds_init+0xc8>)
 8000e36:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000e3a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <leds_init+0xc8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <leds_init+0xc8>)
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000e48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e52:	f023 0320 	bic.w	r3, r3, #32
 8000e56:	6053      	str	r3, [r2, #4]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <leds_init+0xc8>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ec8 <leds_init+0xc8>)
 8000e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e62:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000e64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e72:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD14;
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <leds_init+0xc8>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <leds_init+0xc8>)
 8000e7a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000e7e:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000e80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e8a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000e8e:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <leds_init+0xc8>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <leds_init+0xc8>)
 8000e96:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000e9a:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000e9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ea6:	f023 0320 	bic.w	r3, r3, #32
 8000eaa:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <leds_init+0xc8>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <leds_init+0xc8>)
 8000eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000eb6:	6153      	str	r3, [r2, #20]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400

08000ecc <leds_set>:

void leds_set(uint8_t led)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d847      	bhi.n	8000f6c <leds_set+0xa0>
 8000edc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee4 <leds_set+0x18>)
 8000ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee2:	bf00      	nop
 8000ee4:	08000ef5 	.word	0x08000ef5
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f31 	.word	0x08000f31
 8000ef0:	08000f4f 	.word	0x08000f4f
        case 0:
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000ef4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000efe:	f023 0320 	bic.w	r3, r3, #32
 8000f02:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <leds_set+0xac>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <leds_set+0xac>)
 8000f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f0e:	6153      	str	r3, [r2, #20]
            break;
 8000f10:	e02c      	b.n	8000f6c <leds_set+0xa0>
        case 1:
            //LED 2 is turned on
            GPIOA->ODR |= GPIO_ODR_OD5;
 8000f12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <leds_set+0xac>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <leds_set+0xac>)
 8000f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f2c:	6153      	str	r3, [r2, #20]
            break;
 8000f2e:	e01d      	b.n	8000f6c <leds_set+0xa0>
        case 2:
        	//LED 1 is turned on
            GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000f30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f3a:	f023 0320 	bic.w	r3, r3, #32
 8000f3e:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <leds_set+0xac>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <leds_set+0xac>)
 8000f46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4a:	6153      	str	r3, [r2, #20]
            break;
 8000f4c:	e00e      	b.n	8000f6c <leds_set+0xa0>
        case 3:
        	//Both LEDs are on
            GPIOA->ODR |= GPIO_ODR_OD5;
 8000f4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6153      	str	r3, [r2, #20]
            GPIOB->ODR |= GPIO_ODR_OD14;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <leds_set+0xac>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <leds_set+0xac>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6153      	str	r3, [r2, #20]
            break;
 8000f6a:	bf00      	nop

    }
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	48000400 	.word	0x48000400

08000f7c <sendMissingAlert>:
volatile int counter = 0;
volatile int arr_counter = 0;  // Counter for which part of the array we are displaying
volatile uint8_t minute_counter = 0; // counter for how many minutes have gone by
int bool = 1;

void sendMissingAlert(int seconds) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	@ 0x50
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	6078      	str	r0, [r7, #4]
    char message[50];  // Buffer for the formatted string
    snprintf(message, sizeof(message), "PrivTag has been missing for %d seconds", seconds);
 8000f84:	f107 0008 	add.w	r0, r7, #8
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <sendMissingAlert+0x70>)
 8000f8c:	2132      	movs	r1, #50	@ 0x32
 8000f8e:	f002 fc7d 	bl	800388c <sniprintf>

    int message_len = strlen(message);
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f91a 	bl	80001d0 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	643b      	str	r3, [r7, #64]	@ 0x40
    int offset = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	647b      	str	r3, [r7, #68]	@ 0x44

    while (offset < message_len) {
 8000fa4:	e018      	b.n	8000fd8 <sendMissingAlert+0x5c>
        int chunk_size = (message_len - offset > BLE_MAX_PACKET_SIZE) ? BLE_MAX_PACKET_SIZE : (message_len - offset);
 8000fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b14      	cmp	r3, #20
 8000fae:	bfa8      	it	ge
 8000fb0:	2314      	movge	r3, #20
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Send each chunk as a standalone notification
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, chunk_size, (uint8_t*)&message[offset]);
 8000fb4:	f107 0208 	add.w	r2, r7, #8
 8000fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fba:	4413      	add	r3, r2
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	490b      	ldr	r1, [pc, #44]	@ (8000ff0 <sendMissingAlert+0x74>)
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <sendMissingAlert+0x78>)
 8000fc6:	f7ff fd39 	bl	8000a3c <updateCharValue>

        offset += chunk_size;
 8000fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fce:	4413      	add	r3, r2
 8000fd0:	647b      	str	r3, [r7, #68]	@ 0x44
        HAL_Delay(50);  // Small delay to allow BLE module to process
 8000fd2:	2032      	movs	r0, #50	@ 0x32
 8000fd4:	f000 fcaa 	bl	800192c <HAL_Delay>
    while (offset < message_len) {
 8000fd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbe2      	blt.n	8000fa6 <sendMissingAlert+0x2a>
    }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3748      	adds	r7, #72	@ 0x48
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	080040d8 	.word	0x080040d8
 8000ff0:	200002d0 	.word	0x200002d0
 8000ff4:	200002c8 	.word	0x200002c8

08000ff8 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

    if (TIM2->SR & TIM_SR_UIF) {  // check if interrupt status reg != 0
 8000ffc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d018      	beq.n	800103c <TIM2_IRQHandler+0x44>
        TIM2->SR &= ~TIM_SR_UIF;  // turn it off
 800100a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6113      	str	r3, [r2, #16]

        arr_counter = (arr_counter + 1) % ARR_LENGTH;  // increment counter
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <TIM2_IRQHandler+0x50>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	425a      	negs	r2, r3
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	bf58      	it	pl
 800102c:	4253      	negpl	r3, r2
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <TIM2_IRQHandler+0x50>)
 8001030:	6013      	str	r3, [r2, #0]

        counter += 1;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <TIM2_IRQHandler+0x54>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <TIM2_IRQHandler+0x54>)
 800103a:	6013      	str	r3, [r2, #0]
    }
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000344 	.word	0x20000344
 800104c:	20000340 	.word	0x20000340

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b090      	sub	sp, #64	@ 0x40
 8001054:	af00      	add	r7, sp, #0
int main(void)
 8001056:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800105a:	623b      	str	r3, [r7, #32]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fbf1 	bl	8001842 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f90e 	bl	8001280 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f990 	bl	8001388 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001068:	f000 f950 	bl	800130c <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001076:	f000 ff51 	bl	8001f1c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fc56 	bl	800192c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108a:	f000 ff47 	bl	8001f1c <HAL_GPIO_WritePin>

  ble_init();
 800108e:	f7ff f945 	bl	800031c <ble_init>
  //Old code
  leds_init();
 8001092:	f7ff feb5 	bl	8000e00 <leds_init>
  timer_init(TIM2);
 8001096:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800109a:	f000 fb61 	bl	8001760 <timer_init>
  timer_set_ms(TIM2, 50);
 800109e:	2132      	movs	r1, #50	@ 0x32
 80010a0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80010a4:	f000 fb92 	bl	80017cc <timer_set_ms>
  HAL_Delay(500);
 80010a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ac:	f000 fc3e 	bl	800192c <HAL_Delay>
  i2c_init();
 80010b0:	f7ff fd18 	bl	8000ae4 <i2c_init>
  lsm6dsl_init();
 80010b4:	f7ff f8e4 	bl	8000280 <lsm6dsl_init>

  int16_t x, y, z;
  int16_t last_x = 0, last_y = 0, last_z = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80010bc:	2300      	movs	r3, #0
 80010be:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80010c0:	2300      	movs	r3, #0
 80010c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
  int stable_counter = 0;  // Count how many iterations values remain within threshold
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	@ 0x34
  const int STABLE_THRESHOLD = 160;
 80010c8:	23a0      	movs	r3, #160	@ 0xa0
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
          ITM_SendChar(*ptr++);
      }
      return len;
  }
  //Old code end
  HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f000 fc2d 	bl	800192c <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  while (1)
  {
	  //Old code
	  lsm6dsl_read_xyz(&x, &y, &z);
 80010d8:	f107 021a 	add.w	r2, r7, #26
 80010dc:	f107 011c 	add.w	r1, r7, #28
 80010e0:	f107 031e 	add.w	r3, r7, #30
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f8e4 	bl	80002b2 <lsm6dsl_read_xyz>

	          // Convert values to match the scale
	          int16_t x_scaled = x / 16;
 80010ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	da00      	bge.n	80010f4 <main+0xa4>
 80010f2:	330f      	adds	r3, #15
 80010f4:	111b      	asrs	r3, r3, #4
 80010f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	          int16_t y_scaled = y / 16;
 80010f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da00      	bge.n	8001102 <main+0xb2>
 8001100:	330f      	adds	r3, #15
 8001102:	111b      	asrs	r3, r3, #4
 8001104:	857b      	strh	r3, [r7, #42]	@ 0x2a
	          int16_t z_scaled = z / 16;
 8001106:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da00      	bge.n	8001110 <main+0xc0>
 800110e:	330f      	adds	r3, #15
 8001110:	111b      	asrs	r3, r3, #4
 8001112:	853b      	strh	r3, [r7, #40]	@ 0x28

	          // Check if the change is within the stable threshold
	          if (abs(x_scaled - last_x) <= STABLE_THRESHOLD && abs(y_scaled - last_y) <= STABLE_THRESHOLD && abs(z_scaled - last_z) <= STABLE_THRESHOLD)
 8001114:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001118:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	bfb8      	it	lt
 8001122:	425b      	neglt	r3, r3
 8001124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001126:	429a      	cmp	r2, r3
 8001128:	db67      	blt.n	80011fa <main+0x1aa>
 800112a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800112e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	bfb8      	it	lt
 8001138:	425b      	neglt	r3, r3
 800113a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800113c:	429a      	cmp	r2, r3
 800113e:	db5c      	blt.n	80011fa <main+0x1aa>
 8001140:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001144:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	bfb8      	it	lt
 800114e:	425b      	neglt	r3, r3
 8001150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001152:	429a      	cmp	r2, r3
 8001154:	db51      	blt.n	80011fa <main+0x1aa>
	          {
	              stable_counter++;
 8001156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001158:	3301      	adds	r3, #1
 800115a:	637b      	str	r3, [r7, #52]	@ 0x34
	              if (counter >= MINUTE_COUNT && bool && counter%200==0)
 800115c:	4b3f      	ldr	r3, [pc, #252]	@ (800125c <main+0x20c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2bc7      	cmp	r3, #199	@ 0xc7
 8001162:	dd30      	ble.n	80011c6 <main+0x176>
 8001164:	4b3e      	ldr	r3, [pc, #248]	@ (8001260 <main+0x210>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d02c      	beq.n	80011c6 <main+0x176>
 800116c:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <main+0x20c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b3c      	ldr	r3, [pc, #240]	@ (8001264 <main+0x214>)
 8001172:	fb83 1302 	smull	r1, r3, r3, r2
 8001176:	1199      	asrs	r1, r3, #6
 8001178:	17d3      	asrs	r3, r2, #31
 800117a:	1acb      	subs	r3, r1, r3
 800117c:	21c8      	movs	r1, #200	@ 0xc8
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d11e      	bne.n	80011c6 <main+0x176>
	              {
	            	  leds_set(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff fe9f 	bl	8000ecc <leds_set>
	            	  unsigned char test_str[] = "youlostit BLE test";
 800118e:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <main+0x218>)
 8001190:	1d3c      	adds	r4, r7, #4
 8001192:	461d      	mov	r5, r3
 8001194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	8022      	strh	r2, [r4, #0]
 800119e:	3402      	adds	r4, #2
 80011a0:	0c1b      	lsrs	r3, r3, #16
 80011a2:	7023      	strb	r3, [r4, #0]
	            	  //updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);

	            	  bool = 0;
 80011a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001260 <main+0x210>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	            	  int missing_seconds = counter / 20;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	@ (800125c <main+0x20c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a2f      	ldr	r2, [pc, #188]	@ (800126c <main+0x21c>)
 80011b0:	fb82 1203 	smull	r1, r2, r2, r3
 80011b4:	10d2      	asrs	r2, r2, #3
 80011b6:	17db      	asrs	r3, r3, #31
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
	            	  sendMissingAlert(missing_seconds);
 80011bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011be:	f7ff fedd 	bl	8000f7c <sendMissingAlert>
	              {
 80011c2:	bf00      	nop
	              if (counter >= MINUTE_COUNT && bool && counter%200==0)
 80011c4:	e026      	b.n	8001214 <main+0x1c4>

	              }
	              else if(counter >= MINUTE_COUNT && !bool && counter%200!=0)
 80011c6:	4b25      	ldr	r3, [pc, #148]	@ (800125c <main+0x20c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80011cc:	dd22      	ble.n	8001214 <main+0x1c4>
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <main+0x210>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11e      	bne.n	8001214 <main+0x1c4>
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <main+0x20c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <main+0x214>)
 80011dc:	fb83 1302 	smull	r1, r3, r3, r2
 80011e0:	1199      	asrs	r1, r3, #6
 80011e2:	17d3      	asrs	r3, r2, #31
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	21c8      	movs	r1, #200	@ 0xc8
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d010      	beq.n	8001214 <main+0x1c4>
	              {
	              	    bool = 1;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <main+0x210>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
	              if (counter >= MINUTE_COUNT && bool && counter%200==0)
 80011f8:	e00c      	b.n	8001214 <main+0x1c4>

	              }
	          }
	          else
	          {
	          	leds_set(0);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fe66 	bl	8000ecc <leds_set>
	          	arr_counter = 0;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <main+0x220>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
	          	minute_counter = 0;
 8001206:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <main+0x224>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	            counter = 0; // Reset the counter when the thing moves
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <main+0x20c>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e000      	b.n	8001216 <main+0x1c6>
	              if (counter >= MINUTE_COUNT && bool && counter%200==0)
 8001214:	bf00      	nop
	          }

	          // Updating the compares
	          last_x = x_scaled;
 8001216:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001218:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	          last_y = y_scaled;
 800121a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800121c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	          last_z = z_scaled;
 800121e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001220:	877b      	strh	r3, [r7, #58]	@ 0x3a

	          if(minute_counter>0){
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <main+0x224>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d006      	beq.n	800123a <main+0x1ea>
	          	leds_set(arr[arr_counter]);  // set LEDs based off current pattern
 800122c:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <main+0x220>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	@ (8001278 <main+0x228>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe49 	bl	8000ecc <leds_set>

	          }
	  //Old code end

	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800123a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f af4a 	bne.w	80010d8 <main+0x88>
 8001244:	2140      	movs	r1, #64	@ 0x40
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <main+0x22c>)
 8001248:	f000 fe50 	bl	8001eec <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	f43f af42 	beq.w	80010d8 <main+0x88>
	    catchBLE();
 8001254:	f7ff fa78 	bl	8000748 <catchBLE>
  {
 8001258:	e73e      	b.n	80010d8 <main+0x88>
 800125a:	bf00      	nop
 800125c:	20000340 	.word	0x20000340
 8001260:	20000140 	.word	0x20000140
 8001264:	51eb851f 	.word	0x51eb851f
 8001268:	08004100 	.word	0x08004100
 800126c:	66666667 	.word	0x66666667
 8001270:	20000344 	.word	0x20000344
 8001274:	20000348 	.word	0x20000348
 8001278:	20000130 	.word	0x20000130
 800127c:	48001000 	.word	0x48001000

08001280 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	@ 0x58
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2244      	movs	r2, #68	@ 0x44
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fb3c 	bl	800390c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012a6:	f000 fe83 	bl	8001fb0 <HAL_PWREx_ControlVoltageScaling>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012b0:	f000 f902 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012b4:	2310      	movs	r3, #16
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80012c0:	2370      	movs	r3, #112	@ 0x70
 80012c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fec5 	bl	800205c <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80012d8:	f000 f8ee 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fa8d 	bl	8002814 <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001300:	f000 f8da 	bl	80014b8 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3758      	adds	r7, #88	@ 0x58
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <MX_SPI3_Init+0x78>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001318:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800131c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001326:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800132a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_SPI3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_SPI3_Init+0x74>)
 800133a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_SPI3_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_SPI3_Init+0x74>)
 800135a:	2207      	movs	r2, #7
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_SPI3_Init+0x74>)
 8001366:	2208      	movs	r2, #8
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_SPI3_Init+0x74>)
 800136c:	f001 fc3e 	bl	8002bec <HAL_SPI_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 f89f 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002dc 	.word	0x200002dc
 8001384:	40003c00 	.word	0x40003c00

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139e:	4b43      	ldr	r3, [pc, #268]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a42      	ldr	r2, [pc, #264]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b40      	ldr	r3, [pc, #256]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a3c      	ldr	r2, [pc, #240]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a36      	ldr	r2, [pc, #216]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b31      	ldr	r3, [pc, #196]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a30      	ldr	r2, [pc, #192]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <MX_GPIO_Init+0x124>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <MX_GPIO_Init+0x124>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a2a      	ldr	r2, [pc, #168]	@ (80014ac <MX_GPIO_Init+0x124>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <MX_GPIO_Init+0x124>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2120      	movs	r1, #32
 800141a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141e:	f000 fd7d 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001428:	4821      	ldr	r0, [pc, #132]	@ (80014b0 <MX_GPIO_Init+0x128>)
 800142a:	f000 fd77 	bl	8001f1c <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f000 fd70 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800143c:	2340      	movs	r3, #64	@ 0x40
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001440:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <MX_GPIO_Init+0x12c>)
 8001452:	f000 fba1 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8001456:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001472:	f000 fb91 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4808      	ldr	r0, [pc, #32]	@ (80014b0 <MX_GPIO_Init+0x128>)
 8001490:	f000 fb82 	bl	8001b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2017      	movs	r0, #23
 800149a:	f000 fb46 	bl	8001b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800149e:	2017      	movs	r0, #23
 80014a0:	f000 fb5f 	bl	8001b62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	@ 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000c00 	.word	0x48000c00
 80014b4:	48001000 	.word	0x48001000

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <Error_Handler+0x8>

080014c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_MspInit+0x44>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_MspInit+0x44>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <HAL_MspInit+0x44>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_MspInit+0x44>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_SPI_MspInit+0x7c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d128      	bne.n	8001580 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <HAL_SPI_MspInit+0x80>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	4a16      	ldr	r2, [pc, #88]	@ (800158c <HAL_SPI_MspInit+0x80>)
 8001534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001538:	6593      	str	r3, [r2, #88]	@ 0x58
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_SPI_MspInit+0x80>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_SPI_MspInit+0x80>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a10      	ldr	r2, [pc, #64]	@ (800158c <HAL_SPI_MspInit+0x80>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_SPI_MspInit+0x80>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800155e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001570:	2306      	movs	r3, #6
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <HAL_SPI_MspInit+0x84>)
 800157c:	f000 fb0c 	bl	8001b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40003c00 	.word	0x40003c00
 800158c:	40021000 	.word	0x40021000
 8001590:	48000800 	.word	0x48000800

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <NMI_Handler+0x4>

0800159c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <MemManage_Handler+0x4>

080015ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <UsageFault_Handler+0x4>

080015bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 f97f 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <EXTI9_5_IRQHandler+0x14>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80015fe:	2040      	movs	r0, #64	@ 0x40
 8001600:	f000 fca4 	bl	8001f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200002d8 	.word	0x200002d8

0800160c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <_sbrk+0x50>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x16>
		heap_end = &end;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <_sbrk+0x50>)
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <_sbrk+0x54>)
 8001620:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <_sbrk+0x50>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <_sbrk+0x50>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	466a      	mov	r2, sp
 8001632:	4293      	cmp	r3, r2
 8001634:	d907      	bls.n	8001646 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001636:	f002 f981 	bl	800393c <__errno>
 800163a:	4603      	mov	r3, r0
 800163c:	220c      	movs	r2, #12
 800163e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001644:	e006      	b.n	8001654 <_sbrk+0x48>
	}

	heap_end += incr;
 8001646:	4b05      	ldr	r3, [pc, #20]	@ (800165c <_sbrk+0x50>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a03      	ldr	r2, [pc, #12]	@ (800165c <_sbrk+0x50>)
 8001650:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000034c 	.word	0x2000034c
 8001660:	200004a0 	.word	0x200004a0

08001664 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <SystemInit+0x64>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166e:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <SystemInit+0x64>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <SystemInit+0x68>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <SystemInit+0x68>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <SystemInit+0x68>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <SystemInit+0x68>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <SystemInit+0x68>)
 8001690:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001694:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001698:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <SystemInit+0x68>)
 800169c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <SystemInit+0x68>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a09      	ldr	r2, [pc, #36]	@ (80016cc <SystemInit+0x68>)
 80016a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <SystemInit+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <SystemInit+0x64>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016ba:	609a      	str	r2, [r3, #8]
#endif
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	40021000 	.word	0x40021000

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	@ (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	@ (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <timer_init>:
#include "timer.h"
#include <stm32l475xx.h>


void timer_init(TIM_TypeDef* timer)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 0201 	bic.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]
	timer->CNT = 0;//making the timer counter 0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
	timer->SR = 0;//making the interrupt flag 0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; //adding the clock for TIM2
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <timer_init+0x68>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <timer_init+0x68>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6593      	str	r3, [r2, #88]	@ 0x58
	timer->PSC = 8000-1; // Making the clock frequency 1ms
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
	timer->ARR = 49; // Setting the timer interrupt to 50ms
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2231      	movs	r2, #49	@ 0x31
 8001798:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer->DIER|=TIM_DIER_UIE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80017a6:	201c      	movs	r0, #28
 80017a8:	f7ff ff92 	bl	80016d0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	201c      	movs	r0, #28
 80017b0:	f7ff ffac 	bl	800170c <__NVIC_SetPriority>
	timer->CR1|= TIM_CR1_CEN; //Starting the timer
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000

080017cc <timer_set_ms>:
{
	timer->CNT = 0; // Reseting the timer to zero
}

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
	timer->ARR = period_ms-1; // Setting the timer interrupt to whatever is passed in
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	3b01      	subs	r3, #1
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f4:	f7ff ff36 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <LoopForever+0x6>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	@ (8001830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <LoopForever+0xe>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	@ (800183c <LoopForever+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f002 f893 	bl	8003948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001822:	f7ff fc15 	bl	8001050 <main>

08001826 <LoopForever>:

LoopForever:
    b LoopForever
 8001826:	e7fe      	b.n	8001826 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001834:	08004198 	.word	0x08004198
  ldr r2, =_sbss
 8001838:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 800183c:	2000049c 	.word	0x2000049c

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>

08001842 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f961 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f80e 	bl	8001874 <HAL_InitTick>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	e001      	b.n	8001868 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001864:	f7ff fe2e 	bl	80014c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001868:	79fb      	ldrb	r3, [r7, #7]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001880:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <HAL_InitTick+0x6c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d023      	beq.n	80018d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_InitTick+0x70>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_InitTick+0x6c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f96d 	bl	8001b7e <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10f      	bne.n	80018ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d809      	bhi.n	80018c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018b8:	f000 f937 	bl	8001b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_InitTick+0x74>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e007      	b.n	80018d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e004      	b.n	80018d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e001      	b.n	80018d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000014c 	.word	0x2000014c
 80018e4:	20000144 	.word	0x20000144
 80018e8:	20000148 	.word	0x20000148

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000014c 	.word	0x2000014c
 8001910:	20000350 	.word	0x20000350

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000350 	.word	0x20000350

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000014c 	.word	0x2000014c

08001974 <__NVIC_SetPriorityGrouping>:
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	@ (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	@ (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	@ (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	@ 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	@ 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001af4:	f7ff ff8e 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff29 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff3e 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff8e 	bl	8001a68 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5d 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff31 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa2 	bl	8001ad0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e17f      	b.n	8001ea8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8171 	beq.w	8001ea2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d005      	beq.n	8001bd8 <HAL_GPIO_Init+0x40>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 0201 	and.w	r2, r3, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d118      	bne.n	8001c78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f003 0201 	and.w	r2, r3, #1
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d017      	beq.n	8001cb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d123      	bne.n	8001d08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	6939      	ldr	r1, [r7, #16]
 8001d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80ac 	beq.w	8001ea2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec8 <HAL_GPIO_Init+0x330>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ec8 <HAL_GPIO_Init+0x330>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d56:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec8 <HAL_GPIO_Init+0x330>)
 8001d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d62:	4a5a      	ldr	r2, [pc, #360]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d8c:	d025      	beq.n	8001dda <HAL_GPIO_Init+0x242>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4f      	ldr	r2, [pc, #316]	@ (8001ed0 <HAL_GPIO_Init+0x338>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01f      	beq.n	8001dd6 <HAL_GPIO_Init+0x23e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed4 <HAL_GPIO_Init+0x33c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0x23a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_GPIO_Init+0x340>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0x236>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	@ (8001edc <HAL_GPIO_Init+0x344>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_GPIO_Init+0x232>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ee0 <HAL_GPIO_Init+0x348>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <HAL_GPIO_Init+0x22e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee4 <HAL_GPIO_Init+0x34c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x22a>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x244>
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x244>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x244>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x244>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x244>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x244>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x244>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dec:	4937      	ldr	r1, [pc, #220]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e1e:	4a32      	ldr	r2, [pc, #200]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e24:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e48:	4a27      	ldr	r2, [pc, #156]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f ae78 	bne.w	8001ba8 <HAL_GPIO_Init+0x10>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	48000800 	.word	0x48000800
 8001ed8:	48000c00 	.word	0x48000c00
 8001edc:	48001000 	.word	0x48001000
 8001ee0:	48001400 	.word	0x48001400
 8001ee4:	48001800 	.word	0x48001800
 8001ee8:	40010400 	.word	0x40010400

08001eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f62:	4a05      	ldr	r2, [pc, #20]	@ (8001f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f806 	bl	8001f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <HAL_PWREx_GetVoltageRange+0x18>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fbe:	d130      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc0:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fcc:	d038      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2232      	movs	r2, #50	@ 0x32
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff4:	e002      	b.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002008:	d102      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x60>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f2      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002010:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201c:	d110      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e00f      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202e:	d007      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002038:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800203e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000
 8002054:	20000144 	.word	0x20000144
 8002058:	431bde83 	.word	0x431bde83

0800205c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e3ca      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b97      	ldr	r3, [pc, #604]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b94      	ldr	r3, [pc, #592]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80e4 	beq.w	8002258 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4a>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	f040 808b 	bne.w	80021b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	f040 8087 	bne.w	80021b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a6:	4b89      	ldr	r3, [pc, #548]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x62>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e3a2      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	4b82      	ldr	r3, [pc, #520]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_RCC_OscConfig+0x7c>
 80020ce:	4b7f      	ldr	r3, [pc, #508]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_OscConfig+0x88>
 80020d8:	4b7c      	ldr	r3, [pc, #496]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d223      	bcs.n	8002130 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fd1d 	bl	8002b2c <RCC_SetFlashLatencyFromMSIRange>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e383      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b73      	ldr	r3, [pc, #460]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a72      	ldr	r2, [pc, #456]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	496d      	ldr	r1, [pc, #436]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b6c      	ldr	r3, [pc, #432]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4968      	ldr	r1, [pc, #416]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
 800212e:	e025      	b.n	800217c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002130:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4960      	ldr	r1, [pc, #384]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214e:	4b5f      	ldr	r3, [pc, #380]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	495b      	ldr	r1, [pc, #364]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fcdd 	bl	8002b2c <RCC_SetFlashLatencyFromMSIRange>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e343      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800217c:	f000 fc4a 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b52      	ldr	r3, [pc, #328]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	4950      	ldr	r1, [pc, #320]	@ (80022d0 <HAL_RCC_OscConfig+0x274>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a4e      	ldr	r2, [pc, #312]	@ (80022d4 <HAL_RCC_OscConfig+0x278>)
 800219a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800219c:	4b4e      	ldr	r3, [pc, #312]	@ (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fb67 	bl	8001874 <HAL_InitTick>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d052      	beq.n	8002256 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	e327      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021bc:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a42      	ldr	r2, [pc, #264]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fba4 	bl	8001914 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d0:	f7ff fba0 	bl	8001914 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e310      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e2:	4b3a      	ldr	r3, [pc, #232]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b37      	ldr	r3, [pc, #220]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a36      	ldr	r2, [pc, #216]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b34      	ldr	r3, [pc, #208]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4931      	ldr	r1, [pc, #196]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	492c      	ldr	r1, [pc, #176]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e01a      	b.n	8002258 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002222:	4b2a      	ldr	r3, [pc, #168]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a29      	ldr	r2, [pc, #164]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800222e:	f7ff fb71 	bl	8001914 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002236:	f7ff fb6d 	bl	8001914 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e2dd      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002248:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x1da>
 8002254:	e000      	b.n	8002258 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002256:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d074      	beq.n	800234e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b08      	cmp	r3, #8
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x21a>
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d10e      	bne.n	800228e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d10b      	bne.n	800228e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d064      	beq.n	800234c <HAL_RCC_OscConfig+0x2f0>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d160      	bne.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e2ba      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x24a>
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e026      	b.n	80022f4 <HAL_RCC_OscConfig+0x298>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_OscConfig+0x280>
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a02      	ldr	r2, [pc, #8]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x298>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004114 	.word	0x08004114
 80022d4:	20000144 	.word	0x20000144
 80022d8:	20000148 	.word	0x20000148
 80022dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a9f      	ldr	r2, [pc, #636]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fb0a 	bl	8001914 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fb06 	bl	8001914 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e276      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4b92      	ldr	r3, [pc, #584]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x2a8>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff faf6 	bl	8001914 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff faf2 	bl	8001914 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	@ 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e262      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233e:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x2d0>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d060      	beq.n	800241c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x310>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d119      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d116      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800236c:	4b7c      	ldr	r3, [pc, #496]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x328>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e23f      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b76      	ldr	r3, [pc, #472]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	4973      	ldr	r1, [pc, #460]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002398:	e040      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d023      	beq.n	80023ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff fab1 	bl	8001914 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7ff faad 	bl	8001914 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e21d      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b62      	ldr	r3, [pc, #392]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	495f      	ldr	r1, [pc, #380]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
 80023e8:	e018      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7ff fa8d 	bl	8001914 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7ff fa89 	bl	8001914 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1f9      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002410:	4b53      	ldr	r3, [pc, #332]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01c      	beq.n	800246a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002430:	4b4b      	ldr	r3, [pc, #300]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002436:	4a4a      	ldr	r2, [pc, #296]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7ff fa68 	bl	8001914 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7ff fa64 	bl	8001914 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1d4      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245a:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <HAL_RCC_OscConfig+0x3ec>
 8002468:	e01b      	b.n	80024a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	4b3d      	ldr	r3, [pc, #244]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002470:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7ff fa4b 	bl	8001914 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff fa47 	bl	8001914 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1b7      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002494:	4b32      	ldr	r3, [pc, #200]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a6 	beq.w	80025fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d118      	bne.n	800251a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f4:	f7ff fa0e 	bl	8001914 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7ff fa0a 	bl	8001914 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e17a      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d8>
 8002522:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002532:	e029      	b.n	8002588 <HAL_RCC_OscConfig+0x52c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d115      	bne.n	8002568 <HAL_RCC_OscConfig+0x50c>
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002542:	4a07      	ldr	r2, [pc, #28]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002552:	4a03      	ldr	r2, [pc, #12]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x52c>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	4b9c      	ldr	r3, [pc, #624]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	4a9b      	ldr	r2, [pc, #620]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002578:	4b98      	ldr	r3, [pc, #608]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a97      	ldr	r2, [pc, #604]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d016      	beq.n	80025be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7ff f9c0 	bl	8001914 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7ff f9bc 	bl	8001914 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e12a      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ae:	4b8b      	ldr	r3, [pc, #556]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ed      	beq.n	8002598 <HAL_RCC_OscConfig+0x53c>
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7ff f9a9 	bl	8001914 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff f9a5 	bl	8001914 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e113      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025dc:	4b7f      	ldr	r3, [pc, #508]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ed      	bne.n	80025c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b7a      	ldr	r3, [pc, #488]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	4a79      	ldr	r2, [pc, #484]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80fe 	beq.w	8002802 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	2b02      	cmp	r3, #2
 800260c:	f040 80d0 	bne.w	80027b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002610:	4b72      	ldr	r3, [pc, #456]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	429a      	cmp	r2, r3
 8002622:	d130      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	3b01      	subs	r3, #1
 8002630:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d127      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002640:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d11f      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002650:	2a07      	cmp	r2, #7
 8002652:	bf14      	ite	ne
 8002654:	2201      	movne	r2, #1
 8002656:	2200      	moveq	r2, #0
 8002658:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265a:	4293      	cmp	r3, r2
 800265c:	d113      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d109      	bne.n	8002686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	3b01      	subs	r3, #1
 8002680:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d06e      	beq.n	8002764 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d069      	beq.n	8002760 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0ad      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026a8:	4b4c      	ldr	r3, [pc, #304]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a4b      	ldr	r2, [pc, #300]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026b4:	f7ff f92e 	bl	8001914 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff f92a 	bl	8001914 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e09a      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ce:	4b43      	ldr	r3, [pc, #268]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b40      	ldr	r3, [pc, #256]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	4b40      	ldr	r3, [pc, #256]	@ (80027e0 <HAL_RCC_OscConfig+0x784>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026ea:	3a01      	subs	r2, #1
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026f4:	0212      	lsls	r2, r2, #8
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026fc:	0852      	lsrs	r2, r2, #1
 80026fe:	3a01      	subs	r2, #1
 8002700:	0552      	lsls	r2, r2, #21
 8002702:	4311      	orrs	r1, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002708:	0852      	lsrs	r2, r2, #1
 800270a:	3a01      	subs	r2, #1
 800270c:	0652      	lsls	r2, r2, #25
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002714:	0912      	lsrs	r2, r2, #4
 8002716:	0452      	lsls	r2, r2, #17
 8002718:	430a      	orrs	r2, r1
 800271a:	4930      	ldr	r1, [pc, #192]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 800271c:	4313      	orrs	r3, r2
 800271e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002720:	4b2e      	ldr	r3, [pc, #184]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2d      	ldr	r2, [pc, #180]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800272c:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a2a      	ldr	r2, [pc, #168]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002736:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002738:	f7ff f8ec 	bl	8001914 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff f8e8 	bl	8001914 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e058      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800275e:	e050      	b.n	8002802 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e04f      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d148      	bne.n	8002802 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002770:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800277c:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a16      	ldr	r2, [pc, #88]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002786:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002788:	f7ff f8c4 	bl	8001914 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff f8c0 	bl	8001914 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e030      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x734>
 80027ae:	e028      	b.n	8002802 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d023      	beq.n	80027fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <HAL_RCC_OscConfig+0x780>)
 80027bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7ff f8a7 	bl	8001914 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c8:	e00c      	b.n	80027e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7ff f8a3 	bl	8001914 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d905      	bls.n	80027e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e013      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
 80027dc:	40021000 	.word	0x40021000
 80027e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	4b09      	ldr	r3, [pc, #36]	@ (800280c <HAL_RCC_OscConfig+0x7b0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ec      	bne.n	80027ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_OscConfig+0x7b0>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4905      	ldr	r1, [pc, #20]	@ (800280c <HAL_RCC_OscConfig+0x7b0>)
 80027f6:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_RCC_OscConfig+0x7b4>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60cb      	str	r3, [r1, #12]
 80027fc:	e001      	b.n	8002802 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	feeefffc 	.word	0xfeeefffc

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0e7      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b75      	ldr	r3, [pc, #468]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d910      	bls.n	8002858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b72      	ldr	r3, [pc, #456]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4970      	ldr	r1, [pc, #448]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b6e      	ldr	r3, [pc, #440]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0cf      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d010      	beq.n	8002886 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002870:	429a      	cmp	r2, r3
 8002872:	d908      	bls.n	8002886 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4960      	ldr	r1, [pc, #384]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d04c      	beq.n	800292c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d121      	bne.n	80028ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0a6      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b2:	4b54      	ldr	r3, [pc, #336]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d115      	bne.n	80028ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e09a      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e08e      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028da:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e086      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b46      	ldr	r3, [pc, #280]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4943      	ldr	r1, [pc, #268]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7ff f80a 	bl	8001914 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7ff f806 	bl	8001914 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e06e      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002944:	429a      	cmp	r2, r3
 8002946:	d208      	bcs.n	800295a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b2e      	ldr	r3, [pc, #184]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	492b      	ldr	r1, [pc, #172]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295a:	4b29      	ldr	r3, [pc, #164]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d210      	bcs.n	800298a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002968:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 0207 	bic.w	r2, r3, #7
 8002970:	4923      	ldr	r1, [pc, #140]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002978:	4b21      	ldr	r3, [pc, #132]	@ (8002a00 <HAL_RCC_ClockConfig+0x1ec>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e036      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4918      	ldr	r1, [pc, #96]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4910      	ldr	r1, [pc, #64]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c8:	f000 f824 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	490b      	ldr	r1, [pc, #44]	@ (8002a08 <HAL_RCC_ClockConfig+0x1f4>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	4a09      	ldr	r2, [pc, #36]	@ (8002a0c <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029e8:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_RCC_ClockConfig+0x1fc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe ff41 	bl	8001874 <HAL_InitTick>
 80029f2:	4603      	mov	r3, r0
 80029f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08004114 	.word	0x08004114
 8002a0c:	20000144 	.word	0x20000144
 8002a10:	20000148 	.word	0x20000148

08002a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	@ 0x24
 8002a18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a22:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x34>
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d121      	bne.n	8002a86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d11e      	bne.n	8002a86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a48:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a54:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	e005      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a64:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a70:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10d      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d102      	bne.n	8002a92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a8c:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	e004      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a98:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d134      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0xa6>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d003      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ab8:	e005      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002abc:	617b      	str	r3, [r7, #20]
      break;
 8002abe:	e005      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ac2:	617b      	str	r3, [r7, #20]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	617b      	str	r3, [r7, #20]
      break;
 8002aca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ada:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	fb03 f202 	mul.w	r2, r3, r2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	0e5b      	lsrs	r3, r3, #25
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	3301      	adds	r3, #1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	@ 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08004124 	.word	0x08004124
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	007a1200 	.word	0x007a1200

08002b2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b38:	4b2a      	ldr	r3, [pc, #168]	@ (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b44:	f7ff fa26 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002b48:	6178      	str	r0, [r7, #20]
 8002b4a:	e014      	b.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b25      	ldr	r3, [pc, #148]	@ (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b50:	4a24      	ldr	r2, [pc, #144]	@ (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b58:	4b22      	ldr	r3, [pc, #136]	@ (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b64:	f7ff fa16 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002b68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7c:	d10b      	bne.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b80      	cmp	r3, #128	@ 0x80
 8002b82:	d919      	bls.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b88:	d902      	bls.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e013      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b90:	2301      	movs	r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e010      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b80      	cmp	r3, #128	@ 0x80
 8002b9a:	d902      	bls.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	e00a      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b80      	cmp	r3, #128	@ 0x80
 8002ba6:	d102      	bne.n	8002bae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba8:	2302      	movs	r3, #2
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	e004      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b70      	cmp	r3, #112	@ 0x70
 8002bb2:	d101      	bne.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 0207 	bic.w	r2, r3, #7
 8002bc0:	4909      	ldr	r1, [pc, #36]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bc8:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40022000 	.word	0x40022000

08002bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e095      	b.n	8002d2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0e:	d009      	beq.n	8002c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
 8002c16:	e005      	b.n	8002c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fc64 	bl	800150c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c64:	d902      	bls.n	8002c6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e002      	b.n	8002c72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c7a:	d007      	beq.n	8002c8c <HAL_SPI_Init+0xa0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	ea42 0103 	orr.w	r1, r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	f003 0204 	and.w	r2, r3, #4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d08:	ea42 0103 	orr.w	r1, r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_SPI_Transmit+0x22>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e15f      	b.n	8003014 <HAL_SPI_Transmit+0x2e2>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d5c:	f7fe fdda 	bl	8001914 <HAL_GetTick>
 8002d60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d002      	beq.n	8002d78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d76:	e148      	b.n	800300a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_SPI_Transmit+0x52>
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d88:	e13f      	b.n	800300a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	88fa      	ldrh	r2, [r7, #6]
 8002da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dd4:	d10f      	bne.n	8002df6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002df4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e00:	2b40      	cmp	r3, #64	@ 0x40
 8002e02:	d007      	beq.n	8002e14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e1c:	d94f      	bls.n	8002ebe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_Transmit+0xfa>
 8002e26:	8afb      	ldrh	r3, [r7, #22]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d142      	bne.n	8002eb2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e50:	e02f      	b.n	8002eb2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d112      	bne.n	8002e86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	1c9a      	adds	r2, r3, #2
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e84:	e015      	b.n	8002eb2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e86:	f7fe fd45 	bl	8001914 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d803      	bhi.n	8002e9e <HAL_SPI_Transmit+0x16c>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e9c:	d102      	bne.n	8002ea4 <HAL_SPI_Transmit+0x172>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002eb0:	e0ab      	b.n	800300a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ca      	bne.n	8002e52 <HAL_SPI_Transmit+0x120>
 8002ebc:	e080      	b.n	8002fc0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Transmit+0x19a>
 8002ec6:	8afb      	ldrh	r3, [r7, #22]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d174      	bne.n	8002fb6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d912      	bls.n	8002efc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	1c9a      	adds	r2, r3, #2
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b02      	subs	r3, #2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002efa:	e05c      	b.n	8002fb6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f22:	e048      	b.n	8002fb6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d12b      	bne.n	8002f8a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d912      	bls.n	8002f62 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	1c9a      	adds	r2, r3, #2
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b02      	subs	r3, #2
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f60:	e029      	b.n	8002fb6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f88:	e015      	b.n	8002fb6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f8a:	f7fe fcc3 	bl	8001914 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d803      	bhi.n	8002fa2 <HAL_SPI_Transmit+0x270>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fa0:	d102      	bne.n	8002fa8 <HAL_SPI_Transmit+0x276>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002fb4:	e029      	b.n	800300a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1b1      	bne.n	8002f24 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fb69 	bl	800369c <SPI_EndRxTxTransaction>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e003      	b.n	800300a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003012:	7ffb      	ldrb	r3, [r7, #31]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800302a:	2301      	movs	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_SPI_TransmitReceive+0x26>
 800303e:	2302      	movs	r3, #2
 8003040:	e20a      	b.n	8003458 <HAL_SPI_TransmitReceive+0x43c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800304a:	f7fe fc63 	bl	8001914 <HAL_GetTick>
 800304e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003056:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003066:	7efb      	ldrb	r3, [r7, #27]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d00e      	beq.n	800308a <HAL_SPI_TransmitReceive+0x6e>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003072:	d106      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x66>
 800307c:	7efb      	ldrb	r3, [r7, #27]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d003      	beq.n	800308a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003088:	e1e0      	b.n	800344c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_SPI_TransmitReceive+0x80>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_SPI_TransmitReceive+0x80>
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d103      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80030a2:	e1d3      	b.n	800344c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d003      	beq.n	80030b8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2205      	movs	r2, #5
 80030b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	887a      	ldrh	r2, [r7, #2]
 80030de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030fa:	d802      	bhi.n	8003102 <HAL_SPI_TransmitReceive+0xe6>
 80030fc:	8a3b      	ldrh	r3, [r7, #16]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d908      	bls.n	8003114 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e007      	b.n	8003124 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312e:	2b40      	cmp	r3, #64	@ 0x40
 8003130:	d007      	beq.n	8003142 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003140:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800314a:	f240 8081 	bls.w	8003250 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_SPI_TransmitReceive+0x140>
 8003156:	8a7b      	ldrh	r3, [r7, #18]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d16d      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	881a      	ldrh	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316c:	1c9a      	adds	r2, r3, #2
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003180:	e05a      	b.n	8003238 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11b      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x1ac>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d016      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x1ac>
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	2b01      	cmp	r3, #1
 800319e:	d113      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	881a      	ldrh	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d11c      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x1f4>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	b292      	uxth	r2, r2
 80031ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	1c9a      	adds	r2, r3, #2
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800320c:	2301      	movs	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003210:	f7fe fb80 	bl	8001914 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800321c:	429a      	cmp	r2, r3
 800321e:	d80b      	bhi.n	8003238 <HAL_SPI_TransmitReceive+0x21c>
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003226:	d007      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003236:	e109      	b.n	800344c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d19f      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x166>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d199      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x166>
 800324e:	e0e3      	b.n	8003418 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_SPI_TransmitReceive+0x244>
 8003258:	8a7b      	ldrh	r3, [r7, #18]
 800325a:	2b01      	cmp	r3, #1
 800325c:	f040 80cf 	bne.w	80033fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d912      	bls.n	8003290 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327a:	1c9a      	adds	r2, r3, #2
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b02      	subs	r3, #2
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800328e:	e0b6      	b.n	80033fe <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b6:	e0a2      	b.n	80033fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d134      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x314>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d02f      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x314>
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d12c      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d912      	bls.n	8003306 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	1c9a      	adds	r2, r3, #2
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b02      	subs	r3, #2
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003304:	e012      	b.n	800332c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d148      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x3b4>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d042      	beq.n	80033d0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d923      	bls.n	800339e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	b292      	uxth	r2, r2
 8003362:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	1c9a      	adds	r2, r3, #2
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b02      	subs	r3, #2
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d81f      	bhi.n	80033cc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	e016      	b.n	80033cc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f103 020c 	add.w	r2, r3, #12
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033cc:	2301      	movs	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033d0:	f7fe faa0 	bl	8001914 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033dc:	429a      	cmp	r2, r3
 80033de:	d803      	bhi.n	80033e8 <HAL_SPI_TransmitReceive+0x3cc>
 80033e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033e6:	d102      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x3d2>
 80033e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80033fc:	e026      	b.n	800344c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	f47f af57 	bne.w	80032b8 <HAL_SPI_TransmitReceive+0x29c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f47f af50 	bne.w	80032b8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f93d 	bl	800369c <SPI_EndRxTxTransaction>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003442:	e003      	b.n	800344c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003454:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003458:	4618      	mov	r0, r3
 800345a:	3728      	adds	r7, #40	@ 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003470:	f7fe fa50 	bl	8001914 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	4413      	add	r3, r2
 800347e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003480:	f7fe fa48 	bl	8001914 <HAL_GetTick>
 8003484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003486:	4b39      	ldr	r3, [pc, #228]	@ (800356c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	015b      	lsls	r3, r3, #5
 800348c:	0d1b      	lsrs	r3, r3, #20
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003496:	e054      	b.n	8003542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800349e:	d050      	beq.n	8003542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034a0:	f7fe fa38 	bl	8001914 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d902      	bls.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d13d      	bne.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ce:	d111      	bne.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d8:	d004      	beq.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e2:	d107      	bne.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fc:	d10f      	bne.n	800351e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e017      	b.n	8003562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3b01      	subs	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	429a      	cmp	r2, r3
 800355e:	d19b      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000144 	.word	0x20000144

08003570 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	@ 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003582:	f7fe f9c7 	bl	8001914 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003592:	f7fe f9bf 	bl	8001914 <HAL_GetTick>
 8003596:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003698 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00da      	lsls	r2, r3, #3
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	0d1b      	lsrs	r3, r3, #20
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035b8:	e060      	b.n	800367c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035c0:	d107      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035d8:	d050      	beq.n	800367c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035da:	f7fe f99b 	bl	8001914 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d902      	bls.n	80035f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d13d      	bne.n	800366c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003608:	d111      	bne.n	800362e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003612:	d004      	beq.n	800361e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361c:	d107      	bne.n	800362e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800362c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003636:	d10f      	bne.n	8003658 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003656:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e010      	b.n	800368e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	3b01      	subs	r3, #1
 800367a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d196      	bne.n	80035ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3728      	adds	r7, #40	@ 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000144 	.word	0x20000144

0800369c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff ff5b 	bl	8003570 <SPI_WaitFifoStateUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e027      	b.n	8003720 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2180      	movs	r1, #128	@ 0x80
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fec0 	bl	8003460 <SPI_WaitFlagStateUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e014      	b.n	8003720 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff ff34 	bl	8003570 <SPI_WaitFifoStateUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e000      	b.n	8003720 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <malloc>:
 8003728:	4b02      	ldr	r3, [pc, #8]	@ (8003734 <malloc+0xc>)
 800372a:	4601      	mov	r1, r0
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	f000 b82d 	b.w	800378c <_malloc_r>
 8003732:	bf00      	nop
 8003734:	20000150 	.word	0x20000150

08003738 <free>:
 8003738:	4b02      	ldr	r3, [pc, #8]	@ (8003744 <free+0xc>)
 800373a:	4601      	mov	r1, r0
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	f000 b937 	b.w	80039b0 <_free_r>
 8003742:	bf00      	nop
 8003744:	20000150 	.word	0x20000150

08003748 <sbrk_aligned>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	4e0f      	ldr	r6, [pc, #60]	@ (8003788 <sbrk_aligned+0x40>)
 800374c:	460c      	mov	r4, r1
 800374e:	6831      	ldr	r1, [r6, #0]
 8003750:	4605      	mov	r5, r0
 8003752:	b911      	cbnz	r1, 800375a <sbrk_aligned+0x12>
 8003754:	f000 f8e2 	bl	800391c <_sbrk_r>
 8003758:	6030      	str	r0, [r6, #0]
 800375a:	4621      	mov	r1, r4
 800375c:	4628      	mov	r0, r5
 800375e:	f000 f8dd 	bl	800391c <_sbrk_r>
 8003762:	1c43      	adds	r3, r0, #1
 8003764:	d103      	bne.n	800376e <sbrk_aligned+0x26>
 8003766:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800376a:	4620      	mov	r0, r4
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	1cc4      	adds	r4, r0, #3
 8003770:	f024 0403 	bic.w	r4, r4, #3
 8003774:	42a0      	cmp	r0, r4
 8003776:	d0f8      	beq.n	800376a <sbrk_aligned+0x22>
 8003778:	1a21      	subs	r1, r4, r0
 800377a:	4628      	mov	r0, r5
 800377c:	f000 f8ce 	bl	800391c <_sbrk_r>
 8003780:	3001      	adds	r0, #1
 8003782:	d1f2      	bne.n	800376a <sbrk_aligned+0x22>
 8003784:	e7ef      	b.n	8003766 <sbrk_aligned+0x1e>
 8003786:	bf00      	nop
 8003788:	20000354 	.word	0x20000354

0800378c <_malloc_r>:
 800378c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003790:	1ccd      	adds	r5, r1, #3
 8003792:	f025 0503 	bic.w	r5, r5, #3
 8003796:	3508      	adds	r5, #8
 8003798:	2d0c      	cmp	r5, #12
 800379a:	bf38      	it	cc
 800379c:	250c      	movcc	r5, #12
 800379e:	2d00      	cmp	r5, #0
 80037a0:	4606      	mov	r6, r0
 80037a2:	db01      	blt.n	80037a8 <_malloc_r+0x1c>
 80037a4:	42a9      	cmp	r1, r5
 80037a6:	d904      	bls.n	80037b2 <_malloc_r+0x26>
 80037a8:	230c      	movs	r3, #12
 80037aa:	6033      	str	r3, [r6, #0]
 80037ac:	2000      	movs	r0, #0
 80037ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003888 <_malloc_r+0xfc>
 80037b6:	f000 f89d 	bl	80038f4 <__malloc_lock>
 80037ba:	f8d8 3000 	ldr.w	r3, [r8]
 80037be:	461c      	mov	r4, r3
 80037c0:	bb44      	cbnz	r4, 8003814 <_malloc_r+0x88>
 80037c2:	4629      	mov	r1, r5
 80037c4:	4630      	mov	r0, r6
 80037c6:	f7ff ffbf 	bl	8003748 <sbrk_aligned>
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	4604      	mov	r4, r0
 80037ce:	d158      	bne.n	8003882 <_malloc_r+0xf6>
 80037d0:	f8d8 4000 	ldr.w	r4, [r8]
 80037d4:	4627      	mov	r7, r4
 80037d6:	2f00      	cmp	r7, #0
 80037d8:	d143      	bne.n	8003862 <_malloc_r+0xd6>
 80037da:	2c00      	cmp	r4, #0
 80037dc:	d04b      	beq.n	8003876 <_malloc_r+0xea>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	4639      	mov	r1, r7
 80037e2:	4630      	mov	r0, r6
 80037e4:	eb04 0903 	add.w	r9, r4, r3
 80037e8:	f000 f898 	bl	800391c <_sbrk_r>
 80037ec:	4581      	cmp	r9, r0
 80037ee:	d142      	bne.n	8003876 <_malloc_r+0xea>
 80037f0:	6821      	ldr	r1, [r4, #0]
 80037f2:	1a6d      	subs	r5, r5, r1
 80037f4:	4629      	mov	r1, r5
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7ff ffa6 	bl	8003748 <sbrk_aligned>
 80037fc:	3001      	adds	r0, #1
 80037fe:	d03a      	beq.n	8003876 <_malloc_r+0xea>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	442b      	add	r3, r5
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	f8d8 3000 	ldr.w	r3, [r8]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	bb62      	cbnz	r2, 8003868 <_malloc_r+0xdc>
 800380e:	f8c8 7000 	str.w	r7, [r8]
 8003812:	e00f      	b.n	8003834 <_malloc_r+0xa8>
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	1b52      	subs	r2, r2, r5
 8003818:	d420      	bmi.n	800385c <_malloc_r+0xd0>
 800381a:	2a0b      	cmp	r2, #11
 800381c:	d917      	bls.n	800384e <_malloc_r+0xc2>
 800381e:	1961      	adds	r1, r4, r5
 8003820:	42a3      	cmp	r3, r4
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	bf18      	it	ne
 8003826:	6059      	strne	r1, [r3, #4]
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	bf08      	it	eq
 800382c:	f8c8 1000 	streq.w	r1, [r8]
 8003830:	5162      	str	r2, [r4, r5]
 8003832:	604b      	str	r3, [r1, #4]
 8003834:	4630      	mov	r0, r6
 8003836:	f000 f863 	bl	8003900 <__malloc_unlock>
 800383a:	f104 000b 	add.w	r0, r4, #11
 800383e:	1d23      	adds	r3, r4, #4
 8003840:	f020 0007 	bic.w	r0, r0, #7
 8003844:	1ac2      	subs	r2, r0, r3
 8003846:	bf1c      	itt	ne
 8003848:	1a1b      	subne	r3, r3, r0
 800384a:	50a3      	strne	r3, [r4, r2]
 800384c:	e7af      	b.n	80037ae <_malloc_r+0x22>
 800384e:	6862      	ldr	r2, [r4, #4]
 8003850:	42a3      	cmp	r3, r4
 8003852:	bf0c      	ite	eq
 8003854:	f8c8 2000 	streq.w	r2, [r8]
 8003858:	605a      	strne	r2, [r3, #4]
 800385a:	e7eb      	b.n	8003834 <_malloc_r+0xa8>
 800385c:	4623      	mov	r3, r4
 800385e:	6864      	ldr	r4, [r4, #4]
 8003860:	e7ae      	b.n	80037c0 <_malloc_r+0x34>
 8003862:	463c      	mov	r4, r7
 8003864:	687f      	ldr	r7, [r7, #4]
 8003866:	e7b6      	b.n	80037d6 <_malloc_r+0x4a>
 8003868:	461a      	mov	r2, r3
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	42a3      	cmp	r3, r4
 800386e:	d1fb      	bne.n	8003868 <_malloc_r+0xdc>
 8003870:	2300      	movs	r3, #0
 8003872:	6053      	str	r3, [r2, #4]
 8003874:	e7de      	b.n	8003834 <_malloc_r+0xa8>
 8003876:	230c      	movs	r3, #12
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	4630      	mov	r0, r6
 800387c:	f000 f840 	bl	8003900 <__malloc_unlock>
 8003880:	e794      	b.n	80037ac <_malloc_r+0x20>
 8003882:	6005      	str	r5, [r0, #0]
 8003884:	e7d6      	b.n	8003834 <_malloc_r+0xa8>
 8003886:	bf00      	nop
 8003888:	20000358 	.word	0x20000358

0800388c <sniprintf>:
 800388c:	b40c      	push	{r2, r3}
 800388e:	b530      	push	{r4, r5, lr}
 8003890:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <sniprintf+0x64>)
 8003892:	1e0c      	subs	r4, r1, #0
 8003894:	681d      	ldr	r5, [r3, #0]
 8003896:	b09d      	sub	sp, #116	@ 0x74
 8003898:	da08      	bge.n	80038ac <sniprintf+0x20>
 800389a:	238b      	movs	r3, #139	@ 0x8b
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038a2:	b01d      	add	sp, #116	@ 0x74
 80038a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038a8:	b002      	add	sp, #8
 80038aa:	4770      	bx	lr
 80038ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038b4:	bf14      	ite	ne
 80038b6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80038ba:	4623      	moveq	r3, r4
 80038bc:	9304      	str	r3, [sp, #16]
 80038be:	9307      	str	r3, [sp, #28]
 80038c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038c4:	9002      	str	r0, [sp, #8]
 80038c6:	9006      	str	r0, [sp, #24]
 80038c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80038ce:	ab21      	add	r3, sp, #132	@ 0x84
 80038d0:	a902      	add	r1, sp, #8
 80038d2:	4628      	mov	r0, r5
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	f000 f911 	bl	8003afc <_svfiprintf_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	bfbc      	itt	lt
 80038de:	238b      	movlt	r3, #139	@ 0x8b
 80038e0:	602b      	strlt	r3, [r5, #0]
 80038e2:	2c00      	cmp	r4, #0
 80038e4:	d0dd      	beq.n	80038a2 <sniprintf+0x16>
 80038e6:	9b02      	ldr	r3, [sp, #8]
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e7d9      	b.n	80038a2 <sniprintf+0x16>
 80038ee:	bf00      	nop
 80038f0:	20000150 	.word	0x20000150

080038f4 <__malloc_lock>:
 80038f4:	4801      	ldr	r0, [pc, #4]	@ (80038fc <__malloc_lock+0x8>)
 80038f6:	f000 b84b 	b.w	8003990 <__retarget_lock_acquire_recursive>
 80038fa:	bf00      	nop
 80038fc:	20000494 	.word	0x20000494

08003900 <__malloc_unlock>:
 8003900:	4801      	ldr	r0, [pc, #4]	@ (8003908 <__malloc_unlock+0x8>)
 8003902:	f000 b846 	b.w	8003992 <__retarget_lock_release_recursive>
 8003906:	bf00      	nop
 8003908:	20000494 	.word	0x20000494

0800390c <memset>:
 800390c:	4402      	add	r2, r0
 800390e:	4603      	mov	r3, r0
 8003910:	4293      	cmp	r3, r2
 8003912:	d100      	bne.n	8003916 <memset+0xa>
 8003914:	4770      	bx	lr
 8003916:	f803 1b01 	strb.w	r1, [r3], #1
 800391a:	e7f9      	b.n	8003910 <memset+0x4>

0800391c <_sbrk_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4d06      	ldr	r5, [pc, #24]	@ (8003938 <_sbrk_r+0x1c>)
 8003920:	2300      	movs	r3, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	602b      	str	r3, [r5, #0]
 8003928:	f7fd fe70 	bl	800160c <_sbrk>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_sbrk_r+0x1a>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	b103      	cbz	r3, 8003936 <_sbrk_r+0x1a>
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	20000498 	.word	0x20000498

0800393c <__errno>:
 800393c:	4b01      	ldr	r3, [pc, #4]	@ (8003944 <__errno+0x8>)
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000150 	.word	0x20000150

08003948 <__libc_init_array>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	4d0d      	ldr	r5, [pc, #52]	@ (8003980 <__libc_init_array+0x38>)
 800394c:	4c0d      	ldr	r4, [pc, #52]	@ (8003984 <__libc_init_array+0x3c>)
 800394e:	1b64      	subs	r4, r4, r5
 8003950:	10a4      	asrs	r4, r4, #2
 8003952:	2600      	movs	r6, #0
 8003954:	42a6      	cmp	r6, r4
 8003956:	d109      	bne.n	800396c <__libc_init_array+0x24>
 8003958:	4d0b      	ldr	r5, [pc, #44]	@ (8003988 <__libc_init_array+0x40>)
 800395a:	4c0c      	ldr	r4, [pc, #48]	@ (800398c <__libc_init_array+0x44>)
 800395c:	f000 fba8 	bl	80040b0 <_init>
 8003960:	1b64      	subs	r4, r4, r5
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	2600      	movs	r6, #0
 8003966:	42a6      	cmp	r6, r4
 8003968:	d105      	bne.n	8003976 <__libc_init_array+0x2e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003970:	4798      	blx	r3
 8003972:	3601      	adds	r6, #1
 8003974:	e7ee      	b.n	8003954 <__libc_init_array+0xc>
 8003976:	f855 3b04 	ldr.w	r3, [r5], #4
 800397a:	4798      	blx	r3
 800397c:	3601      	adds	r6, #1
 800397e:	e7f2      	b.n	8003966 <__libc_init_array+0x1e>
 8003980:	08004190 	.word	0x08004190
 8003984:	08004190 	.word	0x08004190
 8003988:	08004190 	.word	0x08004190
 800398c:	08004194 	.word	0x08004194

08003990 <__retarget_lock_acquire_recursive>:
 8003990:	4770      	bx	lr

08003992 <__retarget_lock_release_recursive>:
 8003992:	4770      	bx	lr

08003994 <memcpy>:
 8003994:	440a      	add	r2, r1
 8003996:	4291      	cmp	r1, r2
 8003998:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800399c:	d100      	bne.n	80039a0 <memcpy+0xc>
 800399e:	4770      	bx	lr
 80039a0:	b510      	push	{r4, lr}
 80039a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039aa:	4291      	cmp	r1, r2
 80039ac:	d1f9      	bne.n	80039a2 <memcpy+0xe>
 80039ae:	bd10      	pop	{r4, pc}

080039b0 <_free_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4605      	mov	r5, r0
 80039b4:	2900      	cmp	r1, #0
 80039b6:	d041      	beq.n	8003a3c <_free_r+0x8c>
 80039b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039bc:	1f0c      	subs	r4, r1, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bfb8      	it	lt
 80039c2:	18e4      	addlt	r4, r4, r3
 80039c4:	f7ff ff96 	bl	80038f4 <__malloc_lock>
 80039c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <_free_r+0x90>)
 80039ca:	6813      	ldr	r3, [r2, #0]
 80039cc:	b933      	cbnz	r3, 80039dc <_free_r+0x2c>
 80039ce:	6063      	str	r3, [r4, #4]
 80039d0:	6014      	str	r4, [r2, #0]
 80039d2:	4628      	mov	r0, r5
 80039d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d8:	f7ff bf92 	b.w	8003900 <__malloc_unlock>
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d908      	bls.n	80039f2 <_free_r+0x42>
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	1821      	adds	r1, r4, r0
 80039e4:	428b      	cmp	r3, r1
 80039e6:	bf01      	itttt	eq
 80039e8:	6819      	ldreq	r1, [r3, #0]
 80039ea:	685b      	ldreq	r3, [r3, #4]
 80039ec:	1809      	addeq	r1, r1, r0
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	e7ed      	b.n	80039ce <_free_r+0x1e>
 80039f2:	461a      	mov	r2, r3
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b10b      	cbz	r3, 80039fc <_free_r+0x4c>
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	d9fa      	bls.n	80039f2 <_free_r+0x42>
 80039fc:	6811      	ldr	r1, [r2, #0]
 80039fe:	1850      	adds	r0, r2, r1
 8003a00:	42a0      	cmp	r0, r4
 8003a02:	d10b      	bne.n	8003a1c <_free_r+0x6c>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	4401      	add	r1, r0
 8003a08:	1850      	adds	r0, r2, r1
 8003a0a:	4283      	cmp	r3, r0
 8003a0c:	6011      	str	r1, [r2, #0]
 8003a0e:	d1e0      	bne.n	80039d2 <_free_r+0x22>
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	4408      	add	r0, r1
 8003a18:	6010      	str	r0, [r2, #0]
 8003a1a:	e7da      	b.n	80039d2 <_free_r+0x22>
 8003a1c:	d902      	bls.n	8003a24 <_free_r+0x74>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	e7d6      	b.n	80039d2 <_free_r+0x22>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	1821      	adds	r1, r4, r0
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	bf04      	itt	eq
 8003a2c:	6819      	ldreq	r1, [r3, #0]
 8003a2e:	685b      	ldreq	r3, [r3, #4]
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	bf04      	itt	eq
 8003a34:	1809      	addeq	r1, r1, r0
 8003a36:	6021      	streq	r1, [r4, #0]
 8003a38:	6054      	str	r4, [r2, #4]
 8003a3a:	e7ca      	b.n	80039d2 <_free_r+0x22>
 8003a3c:	bd38      	pop	{r3, r4, r5, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000358 	.word	0x20000358

08003a44 <__ssputs_r>:
 8003a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a48:	688e      	ldr	r6, [r1, #8]
 8003a4a:	461f      	mov	r7, r3
 8003a4c:	42be      	cmp	r6, r7
 8003a4e:	680b      	ldr	r3, [r1, #0]
 8003a50:	4682      	mov	sl, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	4690      	mov	r8, r2
 8003a56:	d82d      	bhi.n	8003ab4 <__ssputs_r+0x70>
 8003a58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a60:	d026      	beq.n	8003ab0 <__ssputs_r+0x6c>
 8003a62:	6965      	ldr	r5, [r4, #20]
 8003a64:	6909      	ldr	r1, [r1, #16]
 8003a66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a6a:	eba3 0901 	sub.w	r9, r3, r1
 8003a6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a72:	1c7b      	adds	r3, r7, #1
 8003a74:	444b      	add	r3, r9
 8003a76:	106d      	asrs	r5, r5, #1
 8003a78:	429d      	cmp	r5, r3
 8003a7a:	bf38      	it	cc
 8003a7c:	461d      	movcc	r5, r3
 8003a7e:	0553      	lsls	r3, r2, #21
 8003a80:	d527      	bpl.n	8003ad2 <__ssputs_r+0x8e>
 8003a82:	4629      	mov	r1, r5
 8003a84:	f7ff fe82 	bl	800378c <_malloc_r>
 8003a88:	4606      	mov	r6, r0
 8003a8a:	b360      	cbz	r0, 8003ae6 <__ssputs_r+0xa2>
 8003a8c:	6921      	ldr	r1, [r4, #16]
 8003a8e:	464a      	mov	r2, r9
 8003a90:	f7ff ff80 	bl	8003994 <memcpy>
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9e:	81a3      	strh	r3, [r4, #12]
 8003aa0:	6126      	str	r6, [r4, #16]
 8003aa2:	6165      	str	r5, [r4, #20]
 8003aa4:	444e      	add	r6, r9
 8003aa6:	eba5 0509 	sub.w	r5, r5, r9
 8003aaa:	6026      	str	r6, [r4, #0]
 8003aac:	60a5      	str	r5, [r4, #8]
 8003aae:	463e      	mov	r6, r7
 8003ab0:	42be      	cmp	r6, r7
 8003ab2:	d900      	bls.n	8003ab6 <__ssputs_r+0x72>
 8003ab4:	463e      	mov	r6, r7
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	4632      	mov	r2, r6
 8003aba:	4641      	mov	r1, r8
 8003abc:	f000 fad6 	bl	800406c <memmove>
 8003ac0:	68a3      	ldr	r3, [r4, #8]
 8003ac2:	1b9b      	subs	r3, r3, r6
 8003ac4:	60a3      	str	r3, [r4, #8]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	4433      	add	r3, r6
 8003aca:	6023      	str	r3, [r4, #0]
 8003acc:	2000      	movs	r0, #0
 8003ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad2:	462a      	mov	r2, r5
 8003ad4:	f000 fa9c 	bl	8004010 <_realloc_r>
 8003ad8:	4606      	mov	r6, r0
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d1e0      	bne.n	8003aa0 <__ssputs_r+0x5c>
 8003ade:	6921      	ldr	r1, [r4, #16]
 8003ae0:	4650      	mov	r0, sl
 8003ae2:	f7ff ff65 	bl	80039b0 <_free_r>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	f8ca 3000 	str.w	r3, [sl]
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af2:	81a3      	strh	r3, [r4, #12]
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003af8:	e7e9      	b.n	8003ace <__ssputs_r+0x8a>
	...

08003afc <_svfiprintf_r>:
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	4698      	mov	r8, r3
 8003b02:	898b      	ldrh	r3, [r1, #12]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	b09d      	sub	sp, #116	@ 0x74
 8003b08:	4607      	mov	r7, r0
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	4614      	mov	r4, r2
 8003b0e:	d510      	bpl.n	8003b32 <_svfiprintf_r+0x36>
 8003b10:	690b      	ldr	r3, [r1, #16]
 8003b12:	b973      	cbnz	r3, 8003b32 <_svfiprintf_r+0x36>
 8003b14:	2140      	movs	r1, #64	@ 0x40
 8003b16:	f7ff fe39 	bl	800378c <_malloc_r>
 8003b1a:	6028      	str	r0, [r5, #0]
 8003b1c:	6128      	str	r0, [r5, #16]
 8003b1e:	b930      	cbnz	r0, 8003b2e <_svfiprintf_r+0x32>
 8003b20:	230c      	movs	r3, #12
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b28:	b01d      	add	sp, #116	@ 0x74
 8003b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b2e:	2340      	movs	r3, #64	@ 0x40
 8003b30:	616b      	str	r3, [r5, #20]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b36:	2320      	movs	r3, #32
 8003b38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b40:	2330      	movs	r3, #48	@ 0x30
 8003b42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ce0 <_svfiprintf_r+0x1e4>
 8003b46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b4a:	f04f 0901 	mov.w	r9, #1
 8003b4e:	4623      	mov	r3, r4
 8003b50:	469a      	mov	sl, r3
 8003b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b56:	b10a      	cbz	r2, 8003b5c <_svfiprintf_r+0x60>
 8003b58:	2a25      	cmp	r2, #37	@ 0x25
 8003b5a:	d1f9      	bne.n	8003b50 <_svfiprintf_r+0x54>
 8003b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b60:	d00b      	beq.n	8003b7a <_svfiprintf_r+0x7e>
 8003b62:	465b      	mov	r3, fp
 8003b64:	4622      	mov	r2, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f7ff ff6b 	bl	8003a44 <__ssputs_r>
 8003b6e:	3001      	adds	r0, #1
 8003b70:	f000 80a7 	beq.w	8003cc2 <_svfiprintf_r+0x1c6>
 8003b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b76:	445a      	add	r2, fp
 8003b78:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 809f 	beq.w	8003cc2 <_svfiprintf_r+0x1c6>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b8e:	f10a 0a01 	add.w	sl, sl, #1
 8003b92:	9304      	str	r3, [sp, #16]
 8003b94:	9307      	str	r3, [sp, #28]
 8003b96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b9c:	4654      	mov	r4, sl
 8003b9e:	2205      	movs	r2, #5
 8003ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba4:	484e      	ldr	r0, [pc, #312]	@ (8003ce0 <_svfiprintf_r+0x1e4>)
 8003ba6:	f7fc fb1b 	bl	80001e0 <memchr>
 8003baa:	9a04      	ldr	r2, [sp, #16]
 8003bac:	b9d8      	cbnz	r0, 8003be6 <_svfiprintf_r+0xea>
 8003bae:	06d0      	lsls	r0, r2, #27
 8003bb0:	bf44      	itt	mi
 8003bb2:	2320      	movmi	r3, #32
 8003bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bb8:	0711      	lsls	r1, r2, #28
 8003bba:	bf44      	itt	mi
 8003bbc:	232b      	movmi	r3, #43	@ 0x2b
 8003bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bc8:	d015      	beq.n	8003bf6 <_svfiprintf_r+0xfa>
 8003bca:	9a07      	ldr	r2, [sp, #28]
 8003bcc:	4654      	mov	r4, sl
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f04f 0c0a 	mov.w	ip, #10
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bda:	3b30      	subs	r3, #48	@ 0x30
 8003bdc:	2b09      	cmp	r3, #9
 8003bde:	d94b      	bls.n	8003c78 <_svfiprintf_r+0x17c>
 8003be0:	b1b0      	cbz	r0, 8003c10 <_svfiprintf_r+0x114>
 8003be2:	9207      	str	r2, [sp, #28]
 8003be4:	e014      	b.n	8003c10 <_svfiprintf_r+0x114>
 8003be6:	eba0 0308 	sub.w	r3, r0, r8
 8003bea:	fa09 f303 	lsl.w	r3, r9, r3
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	9304      	str	r3, [sp, #16]
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	e7d2      	b.n	8003b9c <_svfiprintf_r+0xa0>
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	1d19      	adds	r1, r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	9103      	str	r1, [sp, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bfbb      	ittet	lt
 8003c02:	425b      	neglt	r3, r3
 8003c04:	f042 0202 	orrlt.w	r2, r2, #2
 8003c08:	9307      	strge	r3, [sp, #28]
 8003c0a:	9307      	strlt	r3, [sp, #28]
 8003c0c:	bfb8      	it	lt
 8003c0e:	9204      	strlt	r2, [sp, #16]
 8003c10:	7823      	ldrb	r3, [r4, #0]
 8003c12:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c14:	d10a      	bne.n	8003c2c <_svfiprintf_r+0x130>
 8003c16:	7863      	ldrb	r3, [r4, #1]
 8003c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c1a:	d132      	bne.n	8003c82 <_svfiprintf_r+0x186>
 8003c1c:	9b03      	ldr	r3, [sp, #12]
 8003c1e:	1d1a      	adds	r2, r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	9203      	str	r2, [sp, #12]
 8003c24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c28:	3402      	adds	r4, #2
 8003c2a:	9305      	str	r3, [sp, #20]
 8003c2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003cf0 <_svfiprintf_r+0x1f4>
 8003c30:	7821      	ldrb	r1, [r4, #0]
 8003c32:	2203      	movs	r2, #3
 8003c34:	4650      	mov	r0, sl
 8003c36:	f7fc fad3 	bl	80001e0 <memchr>
 8003c3a:	b138      	cbz	r0, 8003c4c <_svfiprintf_r+0x150>
 8003c3c:	9b04      	ldr	r3, [sp, #16]
 8003c3e:	eba0 000a 	sub.w	r0, r0, sl
 8003c42:	2240      	movs	r2, #64	@ 0x40
 8003c44:	4082      	lsls	r2, r0
 8003c46:	4313      	orrs	r3, r2
 8003c48:	3401      	adds	r4, #1
 8003c4a:	9304      	str	r3, [sp, #16]
 8003c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c50:	4824      	ldr	r0, [pc, #144]	@ (8003ce4 <_svfiprintf_r+0x1e8>)
 8003c52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c56:	2206      	movs	r2, #6
 8003c58:	f7fc fac2 	bl	80001e0 <memchr>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d036      	beq.n	8003cce <_svfiprintf_r+0x1d2>
 8003c60:	4b21      	ldr	r3, [pc, #132]	@ (8003ce8 <_svfiprintf_r+0x1ec>)
 8003c62:	bb1b      	cbnz	r3, 8003cac <_svfiprintf_r+0x1b0>
 8003c64:	9b03      	ldr	r3, [sp, #12]
 8003c66:	3307      	adds	r3, #7
 8003c68:	f023 0307 	bic.w	r3, r3, #7
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	9303      	str	r3, [sp, #12]
 8003c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c72:	4433      	add	r3, r6
 8003c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c76:	e76a      	b.n	8003b4e <_svfiprintf_r+0x52>
 8003c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	2001      	movs	r0, #1
 8003c80:	e7a8      	b.n	8003bd4 <_svfiprintf_r+0xd8>
 8003c82:	2300      	movs	r3, #0
 8003c84:	3401      	adds	r4, #1
 8003c86:	9305      	str	r3, [sp, #20]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f04f 0c0a 	mov.w	ip, #10
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c94:	3a30      	subs	r2, #48	@ 0x30
 8003c96:	2a09      	cmp	r2, #9
 8003c98:	d903      	bls.n	8003ca2 <_svfiprintf_r+0x1a6>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0c6      	beq.n	8003c2c <_svfiprintf_r+0x130>
 8003c9e:	9105      	str	r1, [sp, #20]
 8003ca0:	e7c4      	b.n	8003c2c <_svfiprintf_r+0x130>
 8003ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e7f0      	b.n	8003c8e <_svfiprintf_r+0x192>
 8003cac:	ab03      	add	r3, sp, #12
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <_svfiprintf_r+0x1f0>)
 8003cb4:	a904      	add	r1, sp, #16
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f3af 8000 	nop.w
 8003cbc:	1c42      	adds	r2, r0, #1
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	d1d6      	bne.n	8003c70 <_svfiprintf_r+0x174>
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	065b      	lsls	r3, r3, #25
 8003cc6:	f53f af2d 	bmi.w	8003b24 <_svfiprintf_r+0x28>
 8003cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ccc:	e72c      	b.n	8003b28 <_svfiprintf_r+0x2c>
 8003cce:	ab03      	add	r3, sp, #12
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	462a      	mov	r2, r5
 8003cd4:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <_svfiprintf_r+0x1f0>)
 8003cd6:	a904      	add	r1, sp, #16
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f000 f879 	bl	8003dd0 <_printf_i>
 8003cde:	e7ed      	b.n	8003cbc <_svfiprintf_r+0x1c0>
 8003ce0:	08004154 	.word	0x08004154
 8003ce4:	0800415e 	.word	0x0800415e
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	08003a45 	.word	0x08003a45
 8003cf0:	0800415a 	.word	0x0800415a

08003cf4 <_printf_common>:
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf8:	4616      	mov	r6, r2
 8003cfa:	4698      	mov	r8, r3
 8003cfc:	688a      	ldr	r2, [r1, #8]
 8003cfe:	690b      	ldr	r3, [r1, #16]
 8003d00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d04:	4293      	cmp	r3, r2
 8003d06:	bfb8      	it	lt
 8003d08:	4613      	movlt	r3, r2
 8003d0a:	6033      	str	r3, [r6, #0]
 8003d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d10:	4607      	mov	r7, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	b10a      	cbz	r2, 8003d1a <_printf_common+0x26>
 8003d16:	3301      	adds	r3, #1
 8003d18:	6033      	str	r3, [r6, #0]
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	0699      	lsls	r1, r3, #26
 8003d1e:	bf42      	ittt	mi
 8003d20:	6833      	ldrmi	r3, [r6, #0]
 8003d22:	3302      	addmi	r3, #2
 8003d24:	6033      	strmi	r3, [r6, #0]
 8003d26:	6825      	ldr	r5, [r4, #0]
 8003d28:	f015 0506 	ands.w	r5, r5, #6
 8003d2c:	d106      	bne.n	8003d3c <_printf_common+0x48>
 8003d2e:	f104 0a19 	add.w	sl, r4, #25
 8003d32:	68e3      	ldr	r3, [r4, #12]
 8003d34:	6832      	ldr	r2, [r6, #0]
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	42ab      	cmp	r3, r5
 8003d3a:	dc26      	bgt.n	8003d8a <_printf_common+0x96>
 8003d3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	3b00      	subs	r3, #0
 8003d44:	bf18      	it	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	0692      	lsls	r2, r2, #26
 8003d4a:	d42b      	bmi.n	8003da4 <_printf_common+0xb0>
 8003d4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d50:	4641      	mov	r1, r8
 8003d52:	4638      	mov	r0, r7
 8003d54:	47c8      	blx	r9
 8003d56:	3001      	adds	r0, #1
 8003d58:	d01e      	beq.n	8003d98 <_printf_common+0xa4>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	6922      	ldr	r2, [r4, #16]
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf02      	ittt	eq
 8003d66:	68e5      	ldreq	r5, [r4, #12]
 8003d68:	6833      	ldreq	r3, [r6, #0]
 8003d6a:	1aed      	subeq	r5, r5, r3
 8003d6c:	68a3      	ldr	r3, [r4, #8]
 8003d6e:	bf0c      	ite	eq
 8003d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d74:	2500      	movne	r5, #0
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bfc4      	itt	gt
 8003d7a:	1a9b      	subgt	r3, r3, r2
 8003d7c:	18ed      	addgt	r5, r5, r3
 8003d7e:	2600      	movs	r6, #0
 8003d80:	341a      	adds	r4, #26
 8003d82:	42b5      	cmp	r5, r6
 8003d84:	d11a      	bne.n	8003dbc <_printf_common+0xc8>
 8003d86:	2000      	movs	r0, #0
 8003d88:	e008      	b.n	8003d9c <_printf_common+0xa8>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4652      	mov	r2, sl
 8003d8e:	4641      	mov	r1, r8
 8003d90:	4638      	mov	r0, r7
 8003d92:	47c8      	blx	r9
 8003d94:	3001      	adds	r0, #1
 8003d96:	d103      	bne.n	8003da0 <_printf_common+0xac>
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da0:	3501      	adds	r5, #1
 8003da2:	e7c6      	b.n	8003d32 <_printf_common+0x3e>
 8003da4:	18e1      	adds	r1, r4, r3
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	2030      	movs	r0, #48	@ 0x30
 8003daa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dae:	4422      	add	r2, r4
 8003db0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003db4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003db8:	3302      	adds	r3, #2
 8003dba:	e7c7      	b.n	8003d4c <_printf_common+0x58>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	47c8      	blx	r9
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d0e6      	beq.n	8003d98 <_printf_common+0xa4>
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7d9      	b.n	8003d82 <_printf_common+0x8e>
	...

08003dd0 <_printf_i>:
 8003dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	7e0f      	ldrb	r7, [r1, #24]
 8003dd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dd8:	2f78      	cmp	r7, #120	@ 0x78
 8003dda:	4691      	mov	r9, r2
 8003ddc:	4680      	mov	r8, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	469a      	mov	sl, r3
 8003de2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003de6:	d807      	bhi.n	8003df8 <_printf_i+0x28>
 8003de8:	2f62      	cmp	r7, #98	@ 0x62
 8003dea:	d80a      	bhi.n	8003e02 <_printf_i+0x32>
 8003dec:	2f00      	cmp	r7, #0
 8003dee:	f000 80d2 	beq.w	8003f96 <_printf_i+0x1c6>
 8003df2:	2f58      	cmp	r7, #88	@ 0x58
 8003df4:	f000 80b9 	beq.w	8003f6a <_printf_i+0x19a>
 8003df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e00:	e03a      	b.n	8003e78 <_printf_i+0xa8>
 8003e02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e06:	2b15      	cmp	r3, #21
 8003e08:	d8f6      	bhi.n	8003df8 <_printf_i+0x28>
 8003e0a:	a101      	add	r1, pc, #4	@ (adr r1, 8003e10 <_printf_i+0x40>)
 8003e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e10:	08003e69 	.word	0x08003e69
 8003e14:	08003e7d 	.word	0x08003e7d
 8003e18:	08003df9 	.word	0x08003df9
 8003e1c:	08003df9 	.word	0x08003df9
 8003e20:	08003df9 	.word	0x08003df9
 8003e24:	08003df9 	.word	0x08003df9
 8003e28:	08003e7d 	.word	0x08003e7d
 8003e2c:	08003df9 	.word	0x08003df9
 8003e30:	08003df9 	.word	0x08003df9
 8003e34:	08003df9 	.word	0x08003df9
 8003e38:	08003df9 	.word	0x08003df9
 8003e3c:	08003f7d 	.word	0x08003f7d
 8003e40:	08003ea7 	.word	0x08003ea7
 8003e44:	08003f37 	.word	0x08003f37
 8003e48:	08003df9 	.word	0x08003df9
 8003e4c:	08003df9 	.word	0x08003df9
 8003e50:	08003f9f 	.word	0x08003f9f
 8003e54:	08003df9 	.word	0x08003df9
 8003e58:	08003ea7 	.word	0x08003ea7
 8003e5c:	08003df9 	.word	0x08003df9
 8003e60:	08003df9 	.word	0x08003df9
 8003e64:	08003f3f 	.word	0x08003f3f
 8003e68:	6833      	ldr	r3, [r6, #0]
 8003e6a:	1d1a      	adds	r2, r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6032      	str	r2, [r6, #0]
 8003e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e09d      	b.n	8003fb8 <_printf_i+0x1e8>
 8003e7c:	6833      	ldr	r3, [r6, #0]
 8003e7e:	6820      	ldr	r0, [r4, #0]
 8003e80:	1d19      	adds	r1, r3, #4
 8003e82:	6031      	str	r1, [r6, #0]
 8003e84:	0606      	lsls	r6, r0, #24
 8003e86:	d501      	bpl.n	8003e8c <_printf_i+0xbc>
 8003e88:	681d      	ldr	r5, [r3, #0]
 8003e8a:	e003      	b.n	8003e94 <_printf_i+0xc4>
 8003e8c:	0645      	lsls	r5, r0, #25
 8003e8e:	d5fb      	bpl.n	8003e88 <_printf_i+0xb8>
 8003e90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	da03      	bge.n	8003ea0 <_printf_i+0xd0>
 8003e98:	232d      	movs	r3, #45	@ 0x2d
 8003e9a:	426d      	negs	r5, r5
 8003e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ea0:	4859      	ldr	r0, [pc, #356]	@ (8004008 <_printf_i+0x238>)
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	e011      	b.n	8003eca <_printf_i+0xfa>
 8003ea6:	6821      	ldr	r1, [r4, #0]
 8003ea8:	6833      	ldr	r3, [r6, #0]
 8003eaa:	0608      	lsls	r0, r1, #24
 8003eac:	f853 5b04 	ldr.w	r5, [r3], #4
 8003eb0:	d402      	bmi.n	8003eb8 <_printf_i+0xe8>
 8003eb2:	0649      	lsls	r1, r1, #25
 8003eb4:	bf48      	it	mi
 8003eb6:	b2ad      	uxthmi	r5, r5
 8003eb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eba:	4853      	ldr	r0, [pc, #332]	@ (8004008 <_printf_i+0x238>)
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	bf14      	ite	ne
 8003ec0:	230a      	movne	r3, #10
 8003ec2:	2308      	moveq	r3, #8
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eca:	6866      	ldr	r6, [r4, #4]
 8003ecc:	60a6      	str	r6, [r4, #8]
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	bfa2      	ittt	ge
 8003ed2:	6821      	ldrge	r1, [r4, #0]
 8003ed4:	f021 0104 	bicge.w	r1, r1, #4
 8003ed8:	6021      	strge	r1, [r4, #0]
 8003eda:	b90d      	cbnz	r5, 8003ee0 <_printf_i+0x110>
 8003edc:	2e00      	cmp	r6, #0
 8003ede:	d04b      	beq.n	8003f78 <_printf_i+0x1a8>
 8003ee0:	4616      	mov	r6, r2
 8003ee2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ee6:	fb03 5711 	mls	r7, r3, r1, r5
 8003eea:	5dc7      	ldrb	r7, [r0, r7]
 8003eec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ef0:	462f      	mov	r7, r5
 8003ef2:	42bb      	cmp	r3, r7
 8003ef4:	460d      	mov	r5, r1
 8003ef6:	d9f4      	bls.n	8003ee2 <_printf_i+0x112>
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d10b      	bne.n	8003f14 <_printf_i+0x144>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	07df      	lsls	r7, r3, #31
 8003f00:	d508      	bpl.n	8003f14 <_printf_i+0x144>
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	6861      	ldr	r1, [r4, #4]
 8003f06:	4299      	cmp	r1, r3
 8003f08:	bfde      	ittt	le
 8003f0a:	2330      	movle	r3, #48	@ 0x30
 8003f0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f10:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f14:	1b92      	subs	r2, r2, r6
 8003f16:	6122      	str	r2, [r4, #16]
 8003f18:	f8cd a000 	str.w	sl, [sp]
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	aa03      	add	r2, sp, #12
 8003f20:	4621      	mov	r1, r4
 8003f22:	4640      	mov	r0, r8
 8003f24:	f7ff fee6 	bl	8003cf4 <_printf_common>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d14a      	bne.n	8003fc2 <_printf_i+0x1f2>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f30:	b004      	add	sp, #16
 8003f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	f043 0320 	orr.w	r3, r3, #32
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	4833      	ldr	r0, [pc, #204]	@ (800400c <_printf_i+0x23c>)
 8003f40:	2778      	movs	r7, #120	@ 0x78
 8003f42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	6831      	ldr	r1, [r6, #0]
 8003f4a:	061f      	lsls	r7, r3, #24
 8003f4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f50:	d402      	bmi.n	8003f58 <_printf_i+0x188>
 8003f52:	065f      	lsls	r7, r3, #25
 8003f54:	bf48      	it	mi
 8003f56:	b2ad      	uxthmi	r5, r5
 8003f58:	6031      	str	r1, [r6, #0]
 8003f5a:	07d9      	lsls	r1, r3, #31
 8003f5c:	bf44      	itt	mi
 8003f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003f62:	6023      	strmi	r3, [r4, #0]
 8003f64:	b11d      	cbz	r5, 8003f6e <_printf_i+0x19e>
 8003f66:	2310      	movs	r3, #16
 8003f68:	e7ac      	b.n	8003ec4 <_printf_i+0xf4>
 8003f6a:	4827      	ldr	r0, [pc, #156]	@ (8004008 <_printf_i+0x238>)
 8003f6c:	e7e9      	b.n	8003f42 <_printf_i+0x172>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	f023 0320 	bic.w	r3, r3, #32
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	e7f6      	b.n	8003f66 <_printf_i+0x196>
 8003f78:	4616      	mov	r6, r2
 8003f7a:	e7bd      	b.n	8003ef8 <_printf_i+0x128>
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	6961      	ldr	r1, [r4, #20]
 8003f82:	1d18      	adds	r0, r3, #4
 8003f84:	6030      	str	r0, [r6, #0]
 8003f86:	062e      	lsls	r6, r5, #24
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	d501      	bpl.n	8003f90 <_printf_i+0x1c0>
 8003f8c:	6019      	str	r1, [r3, #0]
 8003f8e:	e002      	b.n	8003f96 <_printf_i+0x1c6>
 8003f90:	0668      	lsls	r0, r5, #25
 8003f92:	d5fb      	bpl.n	8003f8c <_printf_i+0x1bc>
 8003f94:	8019      	strh	r1, [r3, #0]
 8003f96:	2300      	movs	r3, #0
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	4616      	mov	r6, r2
 8003f9c:	e7bc      	b.n	8003f18 <_printf_i+0x148>
 8003f9e:	6833      	ldr	r3, [r6, #0]
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	6032      	str	r2, [r6, #0]
 8003fa4:	681e      	ldr	r6, [r3, #0]
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7fc f918 	bl	80001e0 <memchr>
 8003fb0:	b108      	cbz	r0, 8003fb6 <_printf_i+0x1e6>
 8003fb2:	1b80      	subs	r0, r0, r6
 8003fb4:	6060      	str	r0, [r4, #4]
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fc0:	e7aa      	b.n	8003f18 <_printf_i+0x148>
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	4640      	mov	r0, r8
 8003fca:	47d0      	blx	sl
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d0ad      	beq.n	8003f2c <_printf_i+0x15c>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	079b      	lsls	r3, r3, #30
 8003fd4:	d413      	bmi.n	8003ffe <_printf_i+0x22e>
 8003fd6:	68e0      	ldr	r0, [r4, #12]
 8003fd8:	9b03      	ldr	r3, [sp, #12]
 8003fda:	4298      	cmp	r0, r3
 8003fdc:	bfb8      	it	lt
 8003fde:	4618      	movlt	r0, r3
 8003fe0:	e7a6      	b.n	8003f30 <_printf_i+0x160>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4632      	mov	r2, r6
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	4640      	mov	r0, r8
 8003fea:	47d0      	blx	sl
 8003fec:	3001      	adds	r0, #1
 8003fee:	d09d      	beq.n	8003f2c <_printf_i+0x15c>
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	68e3      	ldr	r3, [r4, #12]
 8003ff4:	9903      	ldr	r1, [sp, #12]
 8003ff6:	1a5b      	subs	r3, r3, r1
 8003ff8:	42ab      	cmp	r3, r5
 8003ffa:	dcf2      	bgt.n	8003fe2 <_printf_i+0x212>
 8003ffc:	e7eb      	b.n	8003fd6 <_printf_i+0x206>
 8003ffe:	2500      	movs	r5, #0
 8004000:	f104 0619 	add.w	r6, r4, #25
 8004004:	e7f5      	b.n	8003ff2 <_printf_i+0x222>
 8004006:	bf00      	nop
 8004008:	08004165 	.word	0x08004165
 800400c:	08004176 	.word	0x08004176

08004010 <_realloc_r>:
 8004010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004014:	4680      	mov	r8, r0
 8004016:	4615      	mov	r5, r2
 8004018:	460c      	mov	r4, r1
 800401a:	b921      	cbnz	r1, 8004026 <_realloc_r+0x16>
 800401c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004020:	4611      	mov	r1, r2
 8004022:	f7ff bbb3 	b.w	800378c <_malloc_r>
 8004026:	b92a      	cbnz	r2, 8004034 <_realloc_r+0x24>
 8004028:	f7ff fcc2 	bl	80039b0 <_free_r>
 800402c:	2400      	movs	r4, #0
 800402e:	4620      	mov	r0, r4
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004034:	f000 f834 	bl	80040a0 <_malloc_usable_size_r>
 8004038:	4285      	cmp	r5, r0
 800403a:	4606      	mov	r6, r0
 800403c:	d802      	bhi.n	8004044 <_realloc_r+0x34>
 800403e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004042:	d8f4      	bhi.n	800402e <_realloc_r+0x1e>
 8004044:	4629      	mov	r1, r5
 8004046:	4640      	mov	r0, r8
 8004048:	f7ff fba0 	bl	800378c <_malloc_r>
 800404c:	4607      	mov	r7, r0
 800404e:	2800      	cmp	r0, #0
 8004050:	d0ec      	beq.n	800402c <_realloc_r+0x1c>
 8004052:	42b5      	cmp	r5, r6
 8004054:	462a      	mov	r2, r5
 8004056:	4621      	mov	r1, r4
 8004058:	bf28      	it	cs
 800405a:	4632      	movcs	r2, r6
 800405c:	f7ff fc9a 	bl	8003994 <memcpy>
 8004060:	4621      	mov	r1, r4
 8004062:	4640      	mov	r0, r8
 8004064:	f7ff fca4 	bl	80039b0 <_free_r>
 8004068:	463c      	mov	r4, r7
 800406a:	e7e0      	b.n	800402e <_realloc_r+0x1e>

0800406c <memmove>:
 800406c:	4288      	cmp	r0, r1
 800406e:	b510      	push	{r4, lr}
 8004070:	eb01 0402 	add.w	r4, r1, r2
 8004074:	d902      	bls.n	800407c <memmove+0x10>
 8004076:	4284      	cmp	r4, r0
 8004078:	4623      	mov	r3, r4
 800407a:	d807      	bhi.n	800408c <memmove+0x20>
 800407c:	1e43      	subs	r3, r0, #1
 800407e:	42a1      	cmp	r1, r4
 8004080:	d008      	beq.n	8004094 <memmove+0x28>
 8004082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800408a:	e7f8      	b.n	800407e <memmove+0x12>
 800408c:	4402      	add	r2, r0
 800408e:	4601      	mov	r1, r0
 8004090:	428a      	cmp	r2, r1
 8004092:	d100      	bne.n	8004096 <memmove+0x2a>
 8004094:	bd10      	pop	{r4, pc}
 8004096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800409a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800409e:	e7f7      	b.n	8004090 <memmove+0x24>

080040a0 <_malloc_usable_size_r>:
 80040a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a4:	1f18      	subs	r0, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfbc      	itt	lt
 80040aa:	580b      	ldrlt	r3, [r1, r0]
 80040ac:	18c0      	addlt	r0, r0, r3
 80040ae:	4770      	bx	lr

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
